
ControlFollower3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  08005ee0  08005ee0  00015ee0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080061c0  080061c0  000161c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080061c8  080061c8  000161c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080061cc  080061cc  000161cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000674  20000000  080061d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020674  2**0
                  CONTENTS
  8 .bss          0000020c  20000674  20000674  00020674  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000880  20000880  00020674  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020674  2**0
                  CONTENTS, READONLY
 11 .debug_info   00018952  00000000  00000000  000206a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000030d4  00000000  00000000  00038ff6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00006a5f  00000000  00000000  0003c0ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a30  00000000  00000000  00042b30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c70  00000000  00000000  00043560  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000636e  00000000  00000000  000441d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00003e77  00000000  00000000  0004a53e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0004e3b5  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002744  00000000  00000000  0004e434  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000674 	.word	0x20000674
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ec4 	.word	0x08005ec4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000678 	.word	0x20000678
 80001cc:	08005ec4 	.word	0x08005ec4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b97a 	b.w	8000eac <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	460d      	mov	r5, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	9e08      	ldr	r6, [sp, #32]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d151      	bne.n	8000c84 <__udivmoddi4+0xb4>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d96d      	bls.n	8000cc2 <__udivmoddi4+0xf2>
 8000be6:	fab2 fe82 	clz	lr, r2
 8000bea:	f1be 0f00 	cmp.w	lr, #0
 8000bee:	d00b      	beq.n	8000c08 <__udivmoddi4+0x38>
 8000bf0:	f1ce 0c20 	rsb	ip, lr, #32
 8000bf4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bf8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bfc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c00:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c08:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c0c:	0c25      	lsrs	r5, r4, #16
 8000c0e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c12:	fa1f f987 	uxth.w	r9, r7
 8000c16:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c1a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c1e:	fb08 f309 	mul.w	r3, r8, r9
 8000c22:	42ab      	cmp	r3, r5
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x6c>
 8000c26:	19ed      	adds	r5, r5, r7
 8000c28:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c2c:	f080 8123 	bcs.w	8000e76 <__udivmoddi4+0x2a6>
 8000c30:	42ab      	cmp	r3, r5
 8000c32:	f240 8120 	bls.w	8000e76 <__udivmoddi4+0x2a6>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	443d      	add	r5, r7
 8000c3c:	1aed      	subs	r5, r5, r3
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c44:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c4c:	fb00 f909 	mul.w	r9, r0, r9
 8000c50:	45a1      	cmp	r9, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x98>
 8000c54:	19e4      	adds	r4, r4, r7
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	f080 810a 	bcs.w	8000e72 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8107 	bls.w	8000e72 <__udivmoddi4+0x2a2>
 8000c64:	3802      	subs	r0, #2
 8000c66:	443c      	add	r4, r7
 8000c68:	eba4 0409 	sub.w	r4, r4, r9
 8000c6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c70:	2100      	movs	r1, #0
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d061      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000c76:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	6034      	str	r4, [r6, #0]
 8000c7e:	6073      	str	r3, [r6, #4]
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0xc8>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	d054      	beq.n	8000d36 <__udivmoddi4+0x166>
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c92:	4608      	mov	r0, r1
 8000c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	f040 808e 	bne.w	8000dbe <__udivmoddi4+0x1ee>
 8000ca2:	42ab      	cmp	r3, r5
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xdc>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80fa 	bhi.w	8000ea0 <__udivmoddi4+0x2d0>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb65 0503 	sbc.w	r5, r5, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	46ac      	mov	ip, r5
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d03f      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000cba:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	b912      	cbnz	r2, 8000cca <__udivmoddi4+0xfa>
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cca:	fab7 fe87 	clz	lr, r7
 8000cce:	f1be 0f00 	cmp.w	lr, #0
 8000cd2:	d134      	bne.n	8000d3e <__udivmoddi4+0x16e>
 8000cd4:	1beb      	subs	r3, r5, r7
 8000cd6:	0c3a      	lsrs	r2, r7, #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ce2:	0c25      	lsrs	r5, r4, #16
 8000ce4:	fb02 3318 	mls	r3, r2, r8, r3
 8000ce8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cec:	fb0c f308 	mul.w	r3, ip, r8
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x134>
 8000cf4:	19ed      	adds	r5, r5, r7
 8000cf6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x132>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	f200 80d1 	bhi.w	8000ea4 <__udivmoddi4+0x2d4>
 8000d02:	4680      	mov	r8, r0
 8000d04:	1aed      	subs	r5, r5, r3
 8000d06:	b2a3      	uxth	r3, r4
 8000d08:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d0c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d10:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d14:	fb0c fc00 	mul.w	ip, ip, r0
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x15c>
 8000d1c:	19e4      	adds	r4, r4, r7
 8000d1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x15a>
 8000d24:	45a4      	cmp	ip, r4
 8000d26:	f200 80b8 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	eba4 040c 	sub.w	r4, r4, ip
 8000d30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d34:	e79d      	b.n	8000c72 <__udivmoddi4+0xa2>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	f1ce 0420 	rsb	r4, lr, #32
 8000d42:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d4a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d4e:	0c3a      	lsrs	r2, r7, #16
 8000d50:	fa25 f404 	lsr.w	r4, r5, r4
 8000d54:	ea48 0803 	orr.w	r8, r8, r3
 8000d58:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d5c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d60:	fb02 4411 	mls	r4, r2, r1, r4
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d6c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d70:	42ab      	cmp	r3, r5
 8000d72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d76:	d909      	bls.n	8000d8c <__udivmoddi4+0x1bc>
 8000d78:	19ed      	adds	r5, r5, r7
 8000d7a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d7e:	f080 808a 	bcs.w	8000e96 <__udivmoddi4+0x2c6>
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	f240 8087 	bls.w	8000e96 <__udivmoddi4+0x2c6>
 8000d88:	3902      	subs	r1, #2
 8000d8a:	443d      	add	r5, r7
 8000d8c:	1aeb      	subs	r3, r5, r3
 8000d8e:	fa1f f588 	uxth.w	r5, r8
 8000d92:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d96:	fb02 3310 	mls	r3, r2, r0, r3
 8000d9a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d9e:	fb00 f30c 	mul.w	r3, r0, ip
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1e6>
 8000da6:	19ed      	adds	r5, r5, r7
 8000da8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dac:	d26f      	bcs.n	8000e8e <__udivmoddi4+0x2be>
 8000dae:	42ab      	cmp	r3, r5
 8000db0:	d96d      	bls.n	8000e8e <__udivmoddi4+0x2be>
 8000db2:	3802      	subs	r0, #2
 8000db4:	443d      	add	r5, r7
 8000db6:	1aeb      	subs	r3, r5, r3
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	e78f      	b.n	8000cde <__udivmoddi4+0x10e>
 8000dbe:	f1c1 0720 	rsb	r7, r1, #32
 8000dc2:	fa22 f807 	lsr.w	r8, r2, r7
 8000dc6:	408b      	lsls	r3, r1
 8000dc8:	fa05 f401 	lsl.w	r4, r5, r1
 8000dcc:	ea48 0303 	orr.w	r3, r8, r3
 8000dd0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000dd4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dde:	fbb5 f9fc 	udiv	r9, r5, ip
 8000de2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000de6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dea:	fa1f f883 	uxth.w	r8, r3
 8000dee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000df2:	fb09 f408 	mul.w	r4, r9, r8
 8000df6:	42ac      	cmp	r4, r5
 8000df8:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x244>
 8000e02:	18ed      	adds	r5, r5, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	d243      	bcs.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0a:	42ac      	cmp	r4, r5
 8000e0c:	d941      	bls.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e12:	441d      	add	r5, r3
 8000e14:	1b2d      	subs	r5, r5, r4
 8000e16:	fa1f fe8e 	uxth.w	lr, lr
 8000e1a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e1e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e22:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e26:	fb00 f808 	mul.w	r8, r0, r8
 8000e2a:	45a0      	cmp	r8, r4
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x26e>
 8000e2e:	18e4      	adds	r4, r4, r3
 8000e30:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e34:	d229      	bcs.n	8000e8a <__udivmoddi4+0x2ba>
 8000e36:	45a0      	cmp	r8, r4
 8000e38:	d927      	bls.n	8000e8a <__udivmoddi4+0x2ba>
 8000e3a:	3802      	subs	r0, #2
 8000e3c:	441c      	add	r4, r3
 8000e3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e42:	eba4 0408 	sub.w	r4, r4, r8
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	454c      	cmp	r4, r9
 8000e4c:	46c6      	mov	lr, r8
 8000e4e:	464d      	mov	r5, r9
 8000e50:	d315      	bcc.n	8000e7e <__udivmoddi4+0x2ae>
 8000e52:	d012      	beq.n	8000e7a <__udivmoddi4+0x2aa>
 8000e54:	b156      	cbz	r6, 8000e6c <__udivmoddi4+0x29c>
 8000e56:	ebba 030e 	subs.w	r3, sl, lr
 8000e5a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e62:	40cb      	lsrs	r3, r1
 8000e64:	431f      	orrs	r7, r3
 8000e66:	40cc      	lsrs	r4, r1
 8000e68:	6037      	str	r7, [r6, #0]
 8000e6a:	6074      	str	r4, [r6, #4]
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	4618      	mov	r0, r3
 8000e74:	e6f8      	b.n	8000c68 <__udivmoddi4+0x98>
 8000e76:	4690      	mov	r8, r2
 8000e78:	e6e0      	b.n	8000c3c <__udivmoddi4+0x6c>
 8000e7a:	45c2      	cmp	sl, r8
 8000e7c:	d2ea      	bcs.n	8000e54 <__udivmoddi4+0x284>
 8000e7e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e82:	eb69 0503 	sbc.w	r5, r9, r3
 8000e86:	3801      	subs	r0, #1
 8000e88:	e7e4      	b.n	8000e54 <__udivmoddi4+0x284>
 8000e8a:	4628      	mov	r0, r5
 8000e8c:	e7d7      	b.n	8000e3e <__udivmoddi4+0x26e>
 8000e8e:	4640      	mov	r0, r8
 8000e90:	e791      	b.n	8000db6 <__udivmoddi4+0x1e6>
 8000e92:	4681      	mov	r9, r0
 8000e94:	e7be      	b.n	8000e14 <__udivmoddi4+0x244>
 8000e96:	4601      	mov	r1, r0
 8000e98:	e778      	b.n	8000d8c <__udivmoddi4+0x1bc>
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	e745      	b.n	8000d2c <__udivmoddi4+0x15c>
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xe6>
 8000ea4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea8:	443d      	add	r5, r7
 8000eaa:	e72b      	b.n	8000d04 <__udivmoddi4+0x134>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_InitTick+0x24>)
{
 8000eb4:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000eb6:	6818      	ldr	r0, [r3, #0]
 8000eb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ec0:	f000 fa82 	bl	80013c8 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	4621      	mov	r1, r4
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f000 fa3c 	bl	8001348 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	bd10      	pop	{r4, pc}
 8000ed4:	20000000 	.word	0x20000000

08000ed8 <HAL_Init>:
{
 8000ed8:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eda:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_Init+0x30>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ee2:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000eea:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ef2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	f000 fa15 	bl	8001324 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000efa:	2000      	movs	r0, #0
 8000efc:	f7ff ffd8 	bl	8000eb0 <HAL_InitTick>
  HAL_MspInit();
 8000f00:	f001 feeb 	bl	8002cda <HAL_MspInit>
}
 8000f04:	2000      	movs	r0, #0
 8000f06:	bd08      	pop	{r3, pc}
 8000f08:	40023c00 	.word	0x40023c00

08000f0c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000f0c:	4a02      	ldr	r2, [pc, #8]	; (8000f18 <HAL_IncTick+0xc>)
 8000f0e:	6813      	ldr	r3, [r2, #0]
 8000f10:	3301      	adds	r3, #1
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	200006c8 	.word	0x200006c8

08000f1c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f1c:	4b01      	ldr	r3, [pc, #4]	; (8000f24 <HAL_GetTick+0x8>)
 8000f1e:	6818      	ldr	r0, [r3, #0]
}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	200006c8 	.word	0x200006c8

08000f28 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f28:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f2a:	4604      	mov	r4, r0
 8000f2c:	2800      	cmp	r0, #0
 8000f2e:	f000 8099 	beq.w	8001064 <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f32:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000f34:	b923      	cbnz	r3, 8000f40 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f36:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f38:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f3c:	f001 fd44 	bl	80029c8 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f42:	06db      	lsls	r3, r3, #27
 8000f44:	f100 808c 	bmi.w	8001060 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f4e:	f023 0302 	bic.w	r3, r3, #2
 8000f52:	f043 0302 	orr.w	r3, r3, #2
 8000f56:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000f58:	4b43      	ldr	r3, [pc, #268]	; (8001068 <HAL_ADC_Init+0x140>)
 8000f5a:	685a      	ldr	r2, [r3, #4]
 8000f5c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000f60:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000f62:	685a      	ldr	r2, [r3, #4]
 8000f64:	6861      	ldr	r1, [r4, #4]
 8000f66:	430a      	orrs	r2, r1
 8000f68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000f6a:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000f6c:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000f76:	685a      	ldr	r2, [r3, #4]
 8000f78:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000f7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000f7e:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000f80:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000f82:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000f86:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000f88:	685a      	ldr	r2, [r3, #4]
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000f8e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000f90:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000f92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000f98:	689a      	ldr	r2, [r3, #8]
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f9e:	4933      	ldr	r1, [pc, #204]	; (800106c <HAL_ADC_Init+0x144>)
 8000fa0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000fa2:	428a      	cmp	r2, r1
 8000fa4:	d050      	beq.n	8001048 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000fa6:	6899      	ldr	r1, [r3, #8]
 8000fa8:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000fac:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000fae:	6899      	ldr	r1, [r3, #8]
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000fb4:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000fb6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000fb8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000fbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000fc2:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000fc4:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000fc6:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000fc8:	f022 0202 	bic.w	r2, r2, #2
 8000fcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000fd4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000fd6:	6a22      	ldr	r2, [r4, #32]
 8000fd8:	2a00      	cmp	r2, #0
 8000fda:	d03d      	beq.n	8001058 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000fdc:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000fde:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000fe0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000fe4:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000fe6:	685a      	ldr	r2, [r3, #4]
 8000fe8:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000fec:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	3901      	subs	r1, #1
 8000ff2:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000ff6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000ffa:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000ffc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001000:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001004:	3901      	subs	r1, #1
 8001006:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800100a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800100c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800100e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001010:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001014:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800101c:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800101e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001020:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001026:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001028:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800102a:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800102c:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8001030:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001032:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001034:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001036:	f023 0303 	bic.w	r3, r3, #3
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001040:	2300      	movs	r3, #0
 8001042:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8001046:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001048:	689a      	ldr	r2, [r3, #8]
 800104a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800104e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001050:	689a      	ldr	r2, [r3, #8]
 8001052:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001056:	e7b4      	b.n	8000fc2 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001058:	685a      	ldr	r2, [r3, #4]
 800105a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800105e:	e7ca      	b.n	8000ff6 <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8001060:	2001      	movs	r0, #1
 8001062:	e7ed      	b.n	8001040 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 8001064:	2001      	movs	r0, #1
}
 8001066:	bd10      	pop	{r4, pc}
 8001068:	40012300 	.word	0x40012300
 800106c:	0f000001 	.word	0x0f000001

08001070 <HAL_ADC_Start_DMA>:
{
 8001070:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001072:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 8001074:	2200      	movs	r2, #0
 8001076:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001078:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800107c:	2a01      	cmp	r2, #1
{
 800107e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001080:	d065      	beq.n	800114e <HAL_ADC_Start_DMA+0xde>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001082:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hadc);
 8001084:	2201      	movs	r2, #1
 8001086:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800108a:	68aa      	ldr	r2, [r5, #8]
 800108c:	07d2      	lsls	r2, r2, #31
 800108e:	d505      	bpl.n	800109c <HAL_ADC_Start_DMA+0x2c>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001090:	68aa      	ldr	r2, [r5, #8]
 8001092:	07d0      	lsls	r0, r2, #31
 8001094:	d415      	bmi.n	80010c2 <HAL_ADC_Start_DMA+0x52>
  return HAL_OK;
 8001096:	2000      	movs	r0, #0
}
 8001098:	b003      	add	sp, #12
 800109a:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 800109c:	68aa      	ldr	r2, [r5, #8]
 800109e:	f042 0201 	orr.w	r2, r2, #1
 80010a2:	60aa      	str	r2, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010a4:	4a2b      	ldr	r2, [pc, #172]	; (8001154 <HAL_ADC_Start_DMA+0xe4>)
 80010a6:	6810      	ldr	r0, [r2, #0]
 80010a8:	4a2b      	ldr	r2, [pc, #172]	; (8001158 <HAL_ADC_Start_DMA+0xe8>)
 80010aa:	fbb0 f0f2 	udiv	r0, r0, r2
 80010ae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80010b2:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 80010b4:	9a01      	ldr	r2, [sp, #4]
 80010b6:	2a00      	cmp	r2, #0
 80010b8:	d0ea      	beq.n	8001090 <HAL_ADC_Start_DMA+0x20>
      counter--;
 80010ba:	9a01      	ldr	r2, [sp, #4]
 80010bc:	3a01      	subs	r2, #1
 80010be:	9201      	str	r2, [sp, #4]
 80010c0:	e7f8      	b.n	80010b4 <HAL_ADC_Start_DMA+0x44>
    ADC_STATE_CLR_SET(hadc->State,
 80010c2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80010c4:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 80010c8:	f020 0001 	bic.w	r0, r0, #1
 80010cc:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80010d0:	6420      	str	r0, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010d2:	686a      	ldr	r2, [r5, #4]
 80010d4:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010d6:	bf41      	itttt	mi
 80010d8:	6c20      	ldrmi	r0, [r4, #64]	; 0x40
 80010da:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80010de:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80010e2:	6420      	strmi	r0, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010e4:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80010e6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010ec:	bf1c      	itt	ne
 80010ee:	6c62      	ldrne	r2, [r4, #68]	; 0x44
 80010f0:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80010f4:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 80010f6:	2200      	movs	r2, #0
 80010f8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80010fc:	4a17      	ldr	r2, [pc, #92]	; (800115c <HAL_ADC_Start_DMA+0xec>)
 80010fe:	63c2      	str	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001100:	4a17      	ldr	r2, [pc, #92]	; (8001160 <HAL_ADC_Start_DMA+0xf0>)
 8001102:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001104:	4a17      	ldr	r2, [pc, #92]	; (8001164 <HAL_ADC_Start_DMA+0xf4>)
 8001106:	64c2      	str	r2, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001108:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800110c:	602a      	str	r2, [r5, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800110e:	686a      	ldr	r2, [r5, #4]
 8001110:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001114:	606a      	str	r2, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001116:	68aa      	ldr	r2, [r5, #8]
 8001118:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800111c:	60aa      	str	r2, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800111e:	460a      	mov	r2, r1
 8001120:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 8001124:	f000 fa0c 	bl	8001540 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <HAL_ADC_Start_DMA+0xf8>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f013 0f1f 	tst.w	r3, #31
 8001130:	6823      	ldr	r3, [r4, #0]
 8001132:	d108      	bne.n	8001146 <HAL_ADC_Start_DMA+0xd6>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001134:	6898      	ldr	r0, [r3, #8]
 8001136:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800113a:	d1ac      	bne.n	8001096 <HAL_ADC_Start_DMA+0x26>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	e7a8      	b.n	8001098 <HAL_ADC_Start_DMA+0x28>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001146:	4a09      	ldr	r2, [pc, #36]	; (800116c <HAL_ADC_Start_DMA+0xfc>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d1a4      	bne.n	8001096 <HAL_ADC_Start_DMA+0x26>
 800114c:	e7f2      	b.n	8001134 <HAL_ADC_Start_DMA+0xc4>
  __HAL_LOCK(hadc);
 800114e:	2002      	movs	r0, #2
 8001150:	e7a2      	b.n	8001098 <HAL_ADC_Start_DMA+0x28>
 8001152:	bf00      	nop
 8001154:	20000000 	.word	0x20000000
 8001158:	000f4240 	.word	0x000f4240
 800115c:	08001173 	.word	0x08001173
 8001160:	080011d5 	.word	0x080011d5
 8001164:	080011e1 	.word	0x080011e1
 8001168:	40012300 	.word	0x40012300
 800116c:	40012000 	.word	0x40012000

08001170 <HAL_ADC_ConvCpltCallback>:
 8001170:	4770      	bx	lr

08001172 <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001172:	6b83      	ldr	r3, [r0, #56]	; 0x38
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001174:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001176:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 800117a:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800117c:	d124      	bne.n	80011c8 <ADC_DMAConvCplt+0x56>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800117e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001184:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	6891      	ldr	r1, [r2, #8]
 800118a:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 800118e:	d117      	bne.n	80011c0 <ADC_DMAConvCplt+0x4e>
 8001190:	6999      	ldr	r1, [r3, #24]
 8001192:	b9a9      	cbnz	r1, 80011c0 <ADC_DMAConvCplt+0x4e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001194:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001196:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 800119a:	d002      	beq.n	80011a2 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800119c:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800119e:	0549      	lsls	r1, r1, #21
 80011a0:	d40e      	bmi.n	80011c0 <ADC_DMAConvCplt+0x4e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80011a2:	6851      	ldr	r1, [r2, #4]
 80011a4:	f021 0120 	bic.w	r1, r1, #32
 80011a8:	6051      	str	r1, [r2, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80011aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011b0:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011b4:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011b6:	bf5e      	ittt	pl
 80011b8:	6c1a      	ldrpl	r2, [r3, #64]	; 0x40
 80011ba:	f042 0201 	orrpl.w	r2, r2, #1
 80011be:	641a      	strpl	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ffd5 	bl	8001170 <HAL_ADC_ConvCpltCallback>
 80011c6:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80011c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  }
}
 80011ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80011ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d0:	4718      	bx	r3

080011d2 <HAL_ADC_ConvHalfCpltCallback>:
 80011d2:	4770      	bx	lr

080011d4 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80011d4:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* Conversion complete callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80011d6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80011d8:	f7ff fffb 	bl	80011d2 <HAL_ADC_ConvHalfCpltCallback>
 80011dc:	bd08      	pop	{r3, pc}

080011de <HAL_ADC_ErrorCallback>:
{
 80011de:	4770      	bx	lr

080011e0 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80011e0:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80011e2:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80011e4:	2340      	movs	r3, #64	; 0x40
 80011e6:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80011e8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80011ea:	f043 0304 	orr.w	r3, r3, #4
 80011ee:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_ADC_ErrorCallback(hadc); 
 80011f0:	f7ff fff5 	bl	80011de <HAL_ADC_ErrorCallback>
 80011f4:	bd08      	pop	{r3, pc}
	...

080011f8 <HAL_ADC_ConfigChannel>:
{
 80011f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80011fe:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001202:	2b01      	cmp	r3, #1
 8001204:	f000 8083 	beq.w	800130e <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001208:	680d      	ldr	r5, [r1, #0]
 800120a:	6804      	ldr	r4, [r0, #0]
 800120c:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 800120e:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001210:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8001212:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8001216:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001218:	d92a      	bls.n	8001270 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800121a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800121e:	68e7      	ldr	r7, [r4, #12]
 8001220:	3b1e      	subs	r3, #30
 8001222:	f04f 0e07 	mov.w	lr, #7
 8001226:	fa0e fe03 	lsl.w	lr, lr, r3
 800122a:	ea27 070e 	bic.w	r7, r7, lr
 800122e:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001230:	68e7      	ldr	r7, [r4, #12]
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	433b      	orrs	r3, r7
 8001238:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 800123a:	684a      	ldr	r2, [r1, #4]
 800123c:	2a06      	cmp	r2, #6
 800123e:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8001242:	d825      	bhi.n	8001290 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001244:	4413      	add	r3, r2
 8001246:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8001248:	1f59      	subs	r1, r3, #5
 800124a:	231f      	movs	r3, #31
 800124c:	408b      	lsls	r3, r1
 800124e:	ea27 0303 	bic.w	r3, r7, r3
 8001252:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001254:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001256:	fa06 f101 	lsl.w	r1, r6, r1
 800125a:	4311      	orrs	r1, r2
 800125c:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800125e:	4b2d      	ldr	r3, [pc, #180]	; (8001314 <HAL_ADC_ConfigChannel+0x11c>)
 8001260:	429c      	cmp	r4, r3
 8001262:	d034      	beq.n	80012ce <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 8001264:	2300      	movs	r3, #0
 8001266:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800126a:	4618      	mov	r0, r3
}
 800126c:	b003      	add	sp, #12
 800126e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001270:	6927      	ldr	r7, [r4, #16]
 8001272:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001276:	f04f 0e07 	mov.w	lr, #7
 800127a:	fa0e fe03 	lsl.w	lr, lr, r3
 800127e:	ea27 070e 	bic.w	r7, r7, lr
 8001282:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001284:	6927      	ldr	r7, [r4, #16]
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	433b      	orrs	r3, r7
 800128c:	6123      	str	r3, [r4, #16]
 800128e:	e7d4      	b.n	800123a <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 8001290:	2a0c      	cmp	r2, #12
 8001292:	d80e      	bhi.n	80012b2 <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001294:	4413      	add	r3, r2
 8001296:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001298:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 800129c:	231f      	movs	r3, #31
 800129e:	4093      	lsls	r3, r2
 80012a0:	ea21 0303 	bic.w	r3, r1, r3
 80012a4:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80012a8:	fa06 f202 	lsl.w	r2, r6, r2
 80012ac:	431a      	orrs	r2, r3
 80012ae:	6322      	str	r2, [r4, #48]	; 0x30
 80012b0:	e7d5      	b.n	800125e <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012b2:	4413      	add	r3, r2
 80012b4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80012b6:	3b41      	subs	r3, #65	; 0x41
 80012b8:	221f      	movs	r2, #31
 80012ba:	409a      	lsls	r2, r3
 80012bc:	ea21 0202 	bic.w	r2, r1, r2
 80012c0:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80012c4:	fa06 f103 	lsl.w	r1, r6, r3
 80012c8:	4311      	orrs	r1, r2
 80012ca:	62e1      	str	r1, [r4, #44]	; 0x2c
 80012cc:	e7c7      	b.n	800125e <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012ce:	2d12      	cmp	r5, #18
 80012d0:	d104      	bne.n	80012dc <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012d2:	4a11      	ldr	r2, [pc, #68]	; (8001318 <HAL_ADC_ConfigChannel+0x120>)
 80012d4:	6853      	ldr	r3, [r2, #4]
 80012d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012da:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012dc:	f1a5 0310 	sub.w	r3, r5, #16
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d8bf      	bhi.n	8001264 <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012e4:	4a0c      	ldr	r2, [pc, #48]	; (8001318 <HAL_ADC_ConfigChannel+0x120>)
 80012e6:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80012e8:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012ee:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80012f0:	d1b8      	bne.n	8001264 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012f2:	4b0a      	ldr	r3, [pc, #40]	; (800131c <HAL_ADC_ConfigChannel+0x124>)
 80012f4:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <HAL_ADC_ConfigChannel+0x128>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80012fc:	230a      	movs	r3, #10
 80012fe:	4353      	muls	r3, r2
        counter--;
 8001300:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001302:	9b01      	ldr	r3, [sp, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d0ad      	beq.n	8001264 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 8001308:	9b01      	ldr	r3, [sp, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	e7f8      	b.n	8001300 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 800130e:	2002      	movs	r0, #2
 8001310:	e7ac      	b.n	800126c <HAL_ADC_ConfigChannel+0x74>
 8001312:	bf00      	nop
 8001314:	40012000 	.word	0x40012000
 8001318:	40012300 	.word	0x40012300
 800131c:	20000000 	.word	0x20000000
 8001320:	000f4240 	.word	0x000f4240

08001324 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001324:	4a07      	ldr	r2, [pc, #28]	; (8001344 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001326:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001328:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800132c:	041b      	lsls	r3, r3, #16
 800132e:	0c1b      	lsrs	r3, r3, #16
 8001330:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001334:	0200      	lsls	r0, r0, #8
 8001336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800133a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800133e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001340:	60d3      	str	r3, [r2, #12]
 8001342:	4770      	bx	lr
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001348:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800134a:	b530      	push	{r4, r5, lr}
 800134c:	68dc      	ldr	r4, [r3, #12]
 800134e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001352:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001356:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001358:	2b04      	cmp	r3, #4
 800135a:	bf28      	it	cs
 800135c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001360:	f04f 0501 	mov.w	r5, #1
 8001364:	fa05 f303 	lsl.w	r3, r5, r3
 8001368:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800136c:	bf8c      	ite	hi
 800136e:	3c03      	subhi	r4, #3
 8001370:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001372:	4019      	ands	r1, r3
 8001374:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001376:	fa05 f404 	lsl.w	r4, r5, r4
 800137a:	3c01      	subs	r4, #1
 800137c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800137e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001380:	ea42 0201 	orr.w	r2, r2, r1
 8001384:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001388:	bfaf      	iteee	ge
 800138a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138e:	f000 000f 	andlt.w	r0, r0, #15
 8001392:	4b06      	ldrlt	r3, [pc, #24]	; (80013ac <HAL_NVIC_SetPriority+0x64>)
 8001394:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001396:	bfa5      	ittet	ge
 8001398:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 800139c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80013a4:	bd30      	pop	{r4, r5, pc}
 80013a6:	bf00      	nop
 80013a8:	e000ed00 	.word	0xe000ed00
 80013ac:	e000ed14 	.word	0xe000ed14

080013b0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80013b0:	0942      	lsrs	r2, r0, #5
 80013b2:	2301      	movs	r3, #1
 80013b4:	f000 001f 	and.w	r0, r0, #31
 80013b8:	fa03 f000 	lsl.w	r0, r3, r0
 80013bc:	4b01      	ldr	r3, [pc, #4]	; (80013c4 <HAL_NVIC_EnableIRQ+0x14>)
 80013be:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80013c2:	4770      	bx	lr
 80013c4:	e000e100 	.word	0xe000e100

080013c8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c8:	3801      	subs	r0, #1
 80013ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80013ce:	d20a      	bcs.n	80013e6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d2:	4a07      	ldr	r2, [pc, #28]	; (80013f0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d6:	21f0      	movs	r1, #240	; 0xf0
 80013d8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013dc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013de:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80013e6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000e010 	.word	0xe000e010
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80013f6:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80013f8:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80013fa:	bf0c      	ite	eq
 80013fc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001400:	f022 0204 	bicne.w	r2, r2, #4
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	4770      	bx	lr
 8001408:	e000e010 	.word	0xe000e010

0800140c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800140c:	4770      	bx	lr

0800140e <HAL_SYSTICK_IRQHandler>:
{
 800140e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001410:	f7ff fffc 	bl	800140c <HAL_SYSTICK_Callback>
 8001414:	bd08      	pop	{r3, pc}
	...

08001418 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001418:	6803      	ldr	r3, [r0, #0]
 800141a:	b2da      	uxtb	r2, r3
 800141c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001420:	f023 0303 	bic.w	r3, r3, #3
 8001424:	2118      	movs	r1, #24
 8001426:	3a10      	subs	r2, #16
 8001428:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800142c:	4904      	ldr	r1, [pc, #16]	; (8001440 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 800142e:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001430:	bf88      	it	hi
 8001432:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001434:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001436:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001438:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 800143a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	08005ee0 	.word	0x08005ee0

08001444 <HAL_DMA_Init>:
{
 8001444:	b570      	push	{r4, r5, r6, lr}
 8001446:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001448:	f7ff fd68 	bl	8000f1c <HAL_GetTick>
 800144c:	4605      	mov	r5, r0
  if(hdma == NULL)
 800144e:	2c00      	cmp	r4, #0
 8001450:	d071      	beq.n	8001536 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8001452:	2300      	movs	r3, #0
 8001454:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001458:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800145a:	2302      	movs	r3, #2
 800145c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001460:	6813      	ldr	r3, [r2, #0]
 8001462:	f023 0301 	bic.w	r3, r3, #1
 8001466:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001468:	6821      	ldr	r1, [r4, #0]
 800146a:	680b      	ldr	r3, [r1, #0]
 800146c:	07d8      	lsls	r0, r3, #31
 800146e:	d43c      	bmi.n	80014ea <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8001470:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001472:	4d32      	ldr	r5, [pc, #200]	; (800153c <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001474:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001476:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001478:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800147a:	68a3      	ldr	r3, [r4, #8]
 800147c:	4313      	orrs	r3, r2
 800147e:	68e2      	ldr	r2, [r4, #12]
 8001480:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001482:	6922      	ldr	r2, [r4, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	6962      	ldr	r2, [r4, #20]
 8001488:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800148a:	69e2      	ldr	r2, [r4, #28]
 800148c:	4303      	orrs	r3, r0
 800148e:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001490:	6a22      	ldr	r2, [r4, #32]
 8001492:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001494:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001496:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001498:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800149c:	bf01      	itttt	eq
 800149e:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 80014a0:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 80014a2:	4335      	orreq	r5, r6
 80014a4:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 80014a6:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80014a8:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014aa:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014ac:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80014b0:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014b4:	d10b      	bne.n	80014ce <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 80014b6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014b8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80014ba:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014bc:	b13d      	cbz	r5, 80014ce <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80014be:	b9f8      	cbnz	r0, 8001500 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 80014c0:	2a01      	cmp	r2, #1
 80014c2:	d02d      	beq.n	8001520 <HAL_DMA_Init+0xdc>
 80014c4:	d301      	bcc.n	80014ca <HAL_DMA_Init+0x86>
 80014c6:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80014c8:	d101      	bne.n	80014ce <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014ca:	01ea      	lsls	r2, r5, #7
 80014cc:	d42b      	bmi.n	8001526 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 80014ce:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014d0:	4620      	mov	r0, r4
 80014d2:	f7ff ffa1 	bl	8001418 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014d6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80014d8:	233f      	movs	r3, #63	; 0x3f
 80014da:	4093      	lsls	r3, r2
 80014dc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014de:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80014e0:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014e2:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80014e4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80014e8:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014ea:	f7ff fd17 	bl	8000f1c <HAL_GetTick>
 80014ee:	1b40      	subs	r0, r0, r5
 80014f0:	2805      	cmp	r0, #5
 80014f2:	d9b9      	bls.n	8001468 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014f4:	2320      	movs	r3, #32
 80014f6:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014f8:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 80014fa:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80014fe:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001500:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001504:	d113      	bne.n	800152e <HAL_DMA_Init+0xea>
    switch (tmp)
 8001506:	2a03      	cmp	r2, #3
 8001508:	d8e1      	bhi.n	80014ce <HAL_DMA_Init+0x8a>
 800150a:	a001      	add	r0, pc, #4	; (adr r0, 8001510 <HAL_DMA_Init+0xcc>)
 800150c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001510:	08001527 	.word	0x08001527
 8001514:	080014cb 	.word	0x080014cb
 8001518:	08001527 	.word	0x08001527
 800151c:	08001521 	.word	0x08001521
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001520:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001524:	d1d3      	bne.n	80014ce <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001526:	2340      	movs	r3, #64	; 0x40
 8001528:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800152a:	2001      	movs	r0, #1
 800152c:	e7e5      	b.n	80014fa <HAL_DMA_Init+0xb6>
    switch (tmp)
 800152e:	2a02      	cmp	r2, #2
 8001530:	d9f9      	bls.n	8001526 <HAL_DMA_Init+0xe2>
 8001532:	2a03      	cmp	r2, #3
 8001534:	e7c8      	b.n	80014c8 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8001536:	2001      	movs	r0, #1
 8001538:	bd70      	pop	{r4, r5, r6, pc}
 800153a:	bf00      	nop
 800153c:	f010803f 	.word	0xf010803f

08001540 <HAL_DMA_Start_IT>:
{
 8001540:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8001542:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8001546:	2c01      	cmp	r4, #1
 8001548:	d036      	beq.n	80015b8 <HAL_DMA_Start_IT+0x78>
 800154a:	2401      	movs	r4, #1
 800154c:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001550:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001554:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 8001556:	2c01      	cmp	r4, #1
 8001558:	f04f 0500 	mov.w	r5, #0
 800155c:	f04f 0402 	mov.w	r4, #2
 8001560:	d128      	bne.n	80015b4 <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001562:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001566:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001568:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800156a:	6825      	ldr	r5, [r4, #0]
 800156c:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8001570:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8001572:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001574:	6883      	ldr	r3, [r0, #8]
 8001576:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8001578:	bf0e      	itee	eq
 800157a:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 800157c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 800157e:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001580:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8001582:	bf08      	it	eq
 8001584:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001586:	233f      	movs	r3, #63	; 0x3f
 8001588:	4093      	lsls	r3, r2
 800158a:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800158c:	6823      	ldr	r3, [r4, #0]
 800158e:	f043 0316 	orr.w	r3, r3, #22
 8001592:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001594:	6963      	ldr	r3, [r4, #20]
 8001596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800159a:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 800159c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800159e:	b11b      	cbz	r3, 80015a8 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 80015a0:	6823      	ldr	r3, [r4, #0]
 80015a2:	f043 0308 	orr.w	r3, r3, #8
 80015a6:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80015a8:	6823      	ldr	r3, [r4, #0]
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015b0:	2000      	movs	r0, #0
 80015b2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 80015b4:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 80015b8:	2002      	movs	r0, #2
}
 80015ba:	bd70      	pop	{r4, r5, r6, pc}

080015bc <HAL_DMA_IRQHandler>:
{
 80015bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80015be:	2300      	movs	r3, #0
 80015c0:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015c2:	4b5a      	ldr	r3, [pc, #360]	; (800172c <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015c4:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80015c6:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015c8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80015ca:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015cc:	2208      	movs	r2, #8
 80015ce:	409a      	lsls	r2, r3
 80015d0:	4216      	tst	r6, r2
{
 80015d2:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015d4:	d00c      	beq.n	80015f0 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015d6:	6801      	ldr	r1, [r0, #0]
 80015d8:	6808      	ldr	r0, [r1, #0]
 80015da:	0740      	lsls	r0, r0, #29
 80015dc:	d508      	bpl.n	80015f0 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015de:	6808      	ldr	r0, [r1, #0]
 80015e0:	f020 0004 	bic.w	r0, r0, #4
 80015e4:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015e6:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015e8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80015ea:	f042 0201 	orr.w	r2, r2, #1
 80015ee:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015f0:	2201      	movs	r2, #1
 80015f2:	409a      	lsls	r2, r3
 80015f4:	4216      	tst	r6, r2
 80015f6:	d008      	beq.n	800160a <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015f8:	6821      	ldr	r1, [r4, #0]
 80015fa:	6949      	ldr	r1, [r1, #20]
 80015fc:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015fe:	bf41      	itttt	mi
 8001600:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001602:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8001604:	f042 0202 	orrmi.w	r2, r2, #2
 8001608:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800160a:	2204      	movs	r2, #4
 800160c:	409a      	lsls	r2, r3
 800160e:	4216      	tst	r6, r2
 8001610:	d008      	beq.n	8001624 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001612:	6821      	ldr	r1, [r4, #0]
 8001614:	6809      	ldr	r1, [r1, #0]
 8001616:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001618:	bf41      	itttt	mi
 800161a:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800161c:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 800161e:	f042 0204 	orrmi.w	r2, r2, #4
 8001622:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001624:	2210      	movs	r2, #16
 8001626:	409a      	lsls	r2, r3
 8001628:	4216      	tst	r6, r2
 800162a:	d010      	beq.n	800164e <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800162c:	6823      	ldr	r3, [r4, #0]
 800162e:	6819      	ldr	r1, [r3, #0]
 8001630:	0709      	lsls	r1, r1, #28
 8001632:	d50c      	bpl.n	800164e <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001634:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	0350      	lsls	r0, r2, #13
 800163a:	d535      	bpl.n	80016a8 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	0319      	lsls	r1, r3, #12
 8001640:	d401      	bmi.n	8001646 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8001642:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001644:	e000      	b.n	8001648 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001646:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8001648:	b10b      	cbz	r3, 800164e <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 800164a:	4620      	mov	r0, r4
 800164c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800164e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001650:	2220      	movs	r2, #32
 8001652:	408a      	lsls	r2, r1
 8001654:	4216      	tst	r6, r2
 8001656:	d038      	beq.n	80016ca <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001658:	6823      	ldr	r3, [r4, #0]
 800165a:	6818      	ldr	r0, [r3, #0]
 800165c:	06c6      	lsls	r6, r0, #27
 800165e:	d534      	bpl.n	80016ca <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001660:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001662:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8001666:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001668:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800166a:	d125      	bne.n	80016b8 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800166c:	f022 0216 	bic.w	r2, r2, #22
 8001670:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001672:	695a      	ldr	r2, [r3, #20]
 8001674:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001678:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800167a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800167c:	b90a      	cbnz	r2, 8001682 <HAL_DMA_IRQHandler+0xc6>
 800167e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001680:	b11a      	cbz	r2, 800168a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	f022 0208 	bic.w	r2, r2, #8
 8001688:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800168a:	233f      	movs	r3, #63	; 0x3f
 800168c:	408b      	lsls	r3, r1
 800168e:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8001690:	2300      	movs	r3, #0
 8001692:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001696:	2301      	movs	r3, #1
 8001698:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800169c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800169e:	b10b      	cbz	r3, 80016a4 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 80016a0:	4620      	mov	r0, r4
 80016a2:	4798      	blx	r3
}
 80016a4:	b003      	add	sp, #12
 80016a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016ac:	bf5e      	ittt	pl
 80016ae:	681a      	ldrpl	r2, [r3, #0]
 80016b0:	f022 0208 	bicpl.w	r2, r2, #8
 80016b4:	601a      	strpl	r2, [r3, #0]
 80016b6:	e7c4      	b.n	8001642 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016b8:	0350      	lsls	r0, r2, #13
 80016ba:	d528      	bpl.n	800170e <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	0319      	lsls	r1, r3, #12
 80016c0:	d432      	bmi.n	8001728 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 80016c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80016c4:	b10b      	cbz	r3, 80016ca <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 80016c6:	4620      	mov	r0, r4
 80016c8:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d0e9      	beq.n	80016a4 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80016d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80016d2:	07da      	lsls	r2, r3, #31
 80016d4:	d519      	bpl.n	800170a <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 80016d6:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 80016d8:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80016da:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80016de:	6813      	ldr	r3, [r2, #0]
 80016e0:	f023 0301 	bic.w	r3, r3, #1
 80016e4:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016e6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80016ea:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 80016ee:	9b01      	ldr	r3, [sp, #4]
 80016f0:	3301      	adds	r3, #1
 80016f2:	429f      	cmp	r7, r3
 80016f4:	9301      	str	r3, [sp, #4]
 80016f6:	d302      	bcc.n	80016fe <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80016f8:	6813      	ldr	r3, [r2, #0]
 80016fa:	07db      	lsls	r3, r3, #31
 80016fc:	d4f7      	bmi.n	80016ee <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 80016fe:	2300      	movs	r3, #0
 8001700:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001704:	2301      	movs	r3, #1
 8001706:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800170a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800170c:	e7c7      	b.n	800169e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8001714:	d108      	bne.n	8001728 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001716:	6819      	ldr	r1, [r3, #0]
 8001718:	f021 0110 	bic.w	r1, r1, #16
 800171c:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800171e:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8001720:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001724:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001728:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800172a:	e7cb      	b.n	80016c4 <HAL_DMA_IRQHandler+0x108>
 800172c:	20000000 	.word	0x20000000

08001730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001734:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001736:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001738:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80018e8 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800173c:	4a68      	ldr	r2, [pc, #416]	; (80018e0 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800173e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80018ec <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001742:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001744:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8001746:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800174a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 800174c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001750:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001754:	45b6      	cmp	lr, r6
 8001756:	f040 80ae 	bne.w	80018b6 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800175a:	684c      	ldr	r4, [r1, #4]
 800175c:	f024 0710 	bic.w	r7, r4, #16
 8001760:	2f02      	cmp	r7, #2
 8001762:	d116      	bne.n	8001792 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001764:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001768:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800176c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001770:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001774:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001778:	f04f 0c0f 	mov.w	ip, #15
 800177c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001780:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001784:	690d      	ldr	r5, [r1, #16]
 8001786:	fa05 f50b 	lsl.w	r5, r5, fp
 800178a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800178e:	f8ca 5020 	str.w	r5, [sl, #32]
 8001792:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001796:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001798:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800179c:	fa05 f50a 	lsl.w	r5, r5, sl
 80017a0:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017a2:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017a6:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017aa:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017ae:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017b0:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017b4:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80017b6:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017ba:	d811      	bhi.n	80017e0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80017bc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017be:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017c2:	68cf      	ldr	r7, [r1, #12]
 80017c4:	fa07 fc0a 	lsl.w	ip, r7, sl
 80017c8:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80017cc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80017ce:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017d0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017d4:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80017d8:	409f      	lsls	r7, r3
 80017da:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80017de:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80017e0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017e2:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017e4:	688f      	ldr	r7, [r1, #8]
 80017e6:	fa07 f70a 	lsl.w	r7, r7, sl
 80017ea:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80017ec:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017ee:	00e5      	lsls	r5, r4, #3
 80017f0:	d561      	bpl.n	80018b6 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f2:	f04f 0b00 	mov.w	fp, #0
 80017f6:	f8cd b00c 	str.w	fp, [sp, #12]
 80017fa:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017fe:	4d39      	ldr	r5, [pc, #228]	; (80018e4 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001800:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001804:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001808:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800180c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001810:	9703      	str	r7, [sp, #12]
 8001812:	9f03      	ldr	r7, [sp, #12]
 8001814:	f023 0703 	bic.w	r7, r3, #3
 8001818:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800181c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001820:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001824:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001828:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800182c:	f04f 0e0f 	mov.w	lr, #15
 8001830:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001834:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001836:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800183a:	d043      	beq.n	80018c4 <HAL_GPIO_Init+0x194>
 800183c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001840:	42a8      	cmp	r0, r5
 8001842:	d041      	beq.n	80018c8 <HAL_GPIO_Init+0x198>
 8001844:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001848:	42a8      	cmp	r0, r5
 800184a:	d03f      	beq.n	80018cc <HAL_GPIO_Init+0x19c>
 800184c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001850:	42a8      	cmp	r0, r5
 8001852:	d03d      	beq.n	80018d0 <HAL_GPIO_Init+0x1a0>
 8001854:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001858:	42a8      	cmp	r0, r5
 800185a:	d03b      	beq.n	80018d4 <HAL_GPIO_Init+0x1a4>
 800185c:	4548      	cmp	r0, r9
 800185e:	d03b      	beq.n	80018d8 <HAL_GPIO_Init+0x1a8>
 8001860:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001864:	42a8      	cmp	r0, r5
 8001866:	d039      	beq.n	80018dc <HAL_GPIO_Init+0x1ac>
 8001868:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800186c:	42a8      	cmp	r0, r5
 800186e:	bf14      	ite	ne
 8001870:	2508      	movne	r5, #8
 8001872:	2507      	moveq	r5, #7
 8001874:	fa05 f50c 	lsl.w	r5, r5, ip
 8001878:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800187c:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800187e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001880:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001882:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001886:	bf0c      	ite	eq
 8001888:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800188a:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800188c:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800188e:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001890:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001894:	bf0c      	ite	eq
 8001896:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001898:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800189a:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800189c:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800189e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80018a2:	bf0c      	ite	eq
 80018a4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80018a6:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80018a8:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80018aa:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018ac:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80018ae:	bf54      	ite	pl
 80018b0:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80018b2:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80018b4:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018b6:	3301      	adds	r3, #1
 80018b8:	2b10      	cmp	r3, #16
 80018ba:	f47f af44 	bne.w	8001746 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80018be:	b005      	add	sp, #20
 80018c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018c4:	465d      	mov	r5, fp
 80018c6:	e7d5      	b.n	8001874 <HAL_GPIO_Init+0x144>
 80018c8:	2501      	movs	r5, #1
 80018ca:	e7d3      	b.n	8001874 <HAL_GPIO_Init+0x144>
 80018cc:	2502      	movs	r5, #2
 80018ce:	e7d1      	b.n	8001874 <HAL_GPIO_Init+0x144>
 80018d0:	2503      	movs	r5, #3
 80018d2:	e7cf      	b.n	8001874 <HAL_GPIO_Init+0x144>
 80018d4:	2504      	movs	r5, #4
 80018d6:	e7cd      	b.n	8001874 <HAL_GPIO_Init+0x144>
 80018d8:	2505      	movs	r5, #5
 80018da:	e7cb      	b.n	8001874 <HAL_GPIO_Init+0x144>
 80018dc:	2506      	movs	r5, #6
 80018de:	e7c9      	b.n	8001874 <HAL_GPIO_Init+0x144>
 80018e0:	40013c00 	.word	0x40013c00
 80018e4:	40020000 	.word	0x40020000
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40021400 	.word	0x40021400

080018f0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018f0:	b10a      	cbz	r2, 80018f6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018f2:	6181      	str	r1, [r0, #24]
 80018f4:	4770      	bx	lr
 80018f6:	0409      	lsls	r1, r1, #16
 80018f8:	e7fb      	b.n	80018f2 <HAL_GPIO_WritePin+0x2>
	...

080018fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018fe:	4604      	mov	r4, r0
 8001900:	b910      	cbnz	r0, 8001908 <HAL_RCC_OscConfig+0xc>
  {
    return HAL_ERROR;
 8001902:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001904:	b003      	add	sp, #12
 8001906:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001908:	6803      	ldr	r3, [r0, #0]
 800190a:	07d8      	lsls	r0, r3, #31
 800190c:	d43b      	bmi.n	8001986 <HAL_RCC_OscConfig+0x8a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800190e:	6823      	ldr	r3, [r4, #0]
 8001910:	0799      	lsls	r1, r3, #30
 8001912:	f100 8084 	bmi.w	8001a1e <HAL_RCC_OscConfig+0x122>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001916:	6823      	ldr	r3, [r4, #0]
 8001918:	071e      	lsls	r6, r3, #28
 800191a:	f100 80c6 	bmi.w	8001aaa <HAL_RCC_OscConfig+0x1ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800191e:	6823      	ldr	r3, [r4, #0]
 8001920:	075d      	lsls	r5, r3, #29
 8001922:	d52a      	bpl.n	800197a <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001924:	2300      	movs	r3, #0
 8001926:	9301      	str	r3, [sp, #4]
 8001928:	4baa      	ldr	r3, [pc, #680]	; (8001bd4 <HAL_RCC_OscConfig+0x2d8>)
    PWR->CR |= PWR_CR_DBP;
 800192a:	4dab      	ldr	r5, [pc, #684]	; (8001bd8 <HAL_RCC_OscConfig+0x2dc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800192c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800192e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001932:	641a      	str	r2, [r3, #64]	; 0x40
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193a:	9301      	str	r3, [sp, #4]
 800193c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800193e:	682b      	ldr	r3, [r5, #0]
 8001940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001944:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001946:	f7ff fae9 	bl	8000f1c <HAL_GetTick>
 800194a:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800194c:	682b      	ldr	r3, [r5, #0]
 800194e:	05da      	lsls	r2, r3, #23
 8001950:	f140 80cd 	bpl.w	8001aee <HAL_RCC_OscConfig+0x1f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001954:	68a3      	ldr	r3, [r4, #8]
 8001956:	4d9f      	ldr	r5, [pc, #636]	; (8001bd4 <HAL_RCC_OscConfig+0x2d8>)
 8001958:	2b01      	cmp	r3, #1
 800195a:	f040 80cf 	bne.w	8001afc <HAL_RCC_OscConfig+0x200>
 800195e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001966:	f7ff fad9 	bl	8000f1c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800196a:	4d9a      	ldr	r5, [pc, #616]	; (8001bd4 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 800196c:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800196e:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001972:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001974:	079b      	lsls	r3, r3, #30
 8001976:	f140 80e2 	bpl.w	8001b3e <HAL_RCC_OscConfig+0x242>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800197a:	69a2      	ldr	r2, [r4, #24]
 800197c:	2a00      	cmp	r2, #0
 800197e:	f040 80e5 	bne.w	8001b4c <HAL_RCC_OscConfig+0x250>
  return HAL_OK;
 8001982:	2000      	movs	r0, #0
 8001984:	e7be      	b.n	8001904 <HAL_RCC_OscConfig+0x8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001986:	4b93      	ldr	r3, [pc, #588]	; (8001bd4 <HAL_RCC_OscConfig+0x2d8>)
 8001988:	689a      	ldr	r2, [r3, #8]
 800198a:	f002 020c 	and.w	r2, r2, #12
 800198e:	2a04      	cmp	r2, #4
 8001990:	d007      	beq.n	80019a2 <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001998:	2a08      	cmp	r2, #8
 800199a:	d10a      	bne.n	80019b2 <HAL_RCC_OscConfig+0xb6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	025a      	lsls	r2, r3, #9
 80019a0:	d507      	bpl.n	80019b2 <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a2:	4b8c      	ldr	r3, [pc, #560]	; (8001bd4 <HAL_RCC_OscConfig+0x2d8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	039b      	lsls	r3, r3, #14
 80019a8:	d5b1      	bpl.n	800190e <HAL_RCC_OscConfig+0x12>
 80019aa:	6863      	ldr	r3, [r4, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1ae      	bne.n	800190e <HAL_RCC_OscConfig+0x12>
 80019b0:	e7a7      	b.n	8001902 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019b2:	6863      	ldr	r3, [r4, #4]
 80019b4:	4d87      	ldr	r5, [pc, #540]	; (8001bd4 <HAL_RCC_OscConfig+0x2d8>)
 80019b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ba:	d111      	bne.n	80019e0 <HAL_RCC_OscConfig+0xe4>
 80019bc:	682b      	ldr	r3, [r5, #0]
 80019be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80019c4:	f7ff faaa 	bl	8000f1c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c8:	4d82      	ldr	r5, [pc, #520]	; (8001bd4 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 80019ca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019cc:	682b      	ldr	r3, [r5, #0]
 80019ce:	039f      	lsls	r7, r3, #14
 80019d0:	d49d      	bmi.n	800190e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019d2:	f7ff faa3 	bl	8000f1c <HAL_GetTick>
 80019d6:	1b80      	subs	r0, r0, r6
 80019d8:	2864      	cmp	r0, #100	; 0x64
 80019da:	d9f7      	bls.n	80019cc <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 80019dc:	2003      	movs	r0, #3
 80019de:	e791      	b.n	8001904 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019e4:	d104      	bne.n	80019f0 <HAL_RCC_OscConfig+0xf4>
 80019e6:	682b      	ldr	r3, [r5, #0]
 80019e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ec:	602b      	str	r3, [r5, #0]
 80019ee:	e7e5      	b.n	80019bc <HAL_RCC_OscConfig+0xc0>
 80019f0:	682a      	ldr	r2, [r5, #0]
 80019f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80019f6:	602a      	str	r2, [r5, #0]
 80019f8:	682a      	ldr	r2, [r5, #0]
 80019fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019fe:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1df      	bne.n	80019c4 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 8001a04:	f7ff fa8a 	bl	8000f1c <HAL_GetTick>
 8001a08:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a0a:	682b      	ldr	r3, [r5, #0]
 8001a0c:	0398      	lsls	r0, r3, #14
 8001a0e:	f57f af7e 	bpl.w	800190e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a12:	f7ff fa83 	bl	8000f1c <HAL_GetTick>
 8001a16:	1b80      	subs	r0, r0, r6
 8001a18:	2864      	cmp	r0, #100	; 0x64
 8001a1a:	d9f6      	bls.n	8001a0a <HAL_RCC_OscConfig+0x10e>
 8001a1c:	e7de      	b.n	80019dc <HAL_RCC_OscConfig+0xe0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a1e:	4b6d      	ldr	r3, [pc, #436]	; (8001bd4 <HAL_RCC_OscConfig+0x2d8>)
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	f012 0f0c 	tst.w	r2, #12
 8001a26:	d007      	beq.n	8001a38 <HAL_RCC_OscConfig+0x13c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a28:	689a      	ldr	r2, [r3, #8]
 8001a2a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a2e:	2a08      	cmp	r2, #8
 8001a30:	d112      	bne.n	8001a58 <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	0259      	lsls	r1, r3, #9
 8001a36:	d40f      	bmi.n	8001a58 <HAL_RCC_OscConfig+0x15c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a38:	4b66      	ldr	r3, [pc, #408]	; (8001bd4 <HAL_RCC_OscConfig+0x2d8>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	0792      	lsls	r2, r2, #30
 8001a3e:	d503      	bpl.n	8001a48 <HAL_RCC_OscConfig+0x14c>
 8001a40:	68e2      	ldr	r2, [r4, #12]
 8001a42:	2a01      	cmp	r2, #1
 8001a44:	f47f af5d 	bne.w	8001902 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	6921      	ldr	r1, [r4, #16]
 8001a4c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001a50:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001a54:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a56:	e75e      	b.n	8001916 <HAL_RCC_OscConfig+0x1a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a58:	68e2      	ldr	r2, [r4, #12]
 8001a5a:	4b60      	ldr	r3, [pc, #384]	; (8001bdc <HAL_RCC_OscConfig+0x2e0>)
 8001a5c:	b1b2      	cbz	r2, 8001a8c <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 8001a5e:	2201      	movs	r2, #1
 8001a60:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a62:	f7ff fa5b 	bl	8000f1c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a66:	4d5b      	ldr	r5, [pc, #364]	; (8001bd4 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8001a68:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6a:	682b      	ldr	r3, [r5, #0]
 8001a6c:	079b      	lsls	r3, r3, #30
 8001a6e:	d507      	bpl.n	8001a80 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a70:	682b      	ldr	r3, [r5, #0]
 8001a72:	6922      	ldr	r2, [r4, #16]
 8001a74:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a78:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a7c:	602b      	str	r3, [r5, #0]
 8001a7e:	e74a      	b.n	8001916 <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a80:	f7ff fa4c 	bl	8000f1c <HAL_GetTick>
 8001a84:	1b80      	subs	r0, r0, r6
 8001a86:	2802      	cmp	r0, #2
 8001a88:	d9ef      	bls.n	8001a6a <HAL_RCC_OscConfig+0x16e>
 8001a8a:	e7a7      	b.n	80019dc <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8001a8c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a8e:	f7ff fa45 	bl	8000f1c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a92:	4d50      	ldr	r5, [pc, #320]	; (8001bd4 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8001a94:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a96:	682b      	ldr	r3, [r5, #0]
 8001a98:	079f      	lsls	r7, r3, #30
 8001a9a:	f57f af3c 	bpl.w	8001916 <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a9e:	f7ff fa3d 	bl	8000f1c <HAL_GetTick>
 8001aa2:	1b80      	subs	r0, r0, r6
 8001aa4:	2802      	cmp	r0, #2
 8001aa6:	d9f6      	bls.n	8001a96 <HAL_RCC_OscConfig+0x19a>
 8001aa8:	e798      	b.n	80019dc <HAL_RCC_OscConfig+0xe0>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001aaa:	6962      	ldr	r2, [r4, #20]
 8001aac:	4b4c      	ldr	r3, [pc, #304]	; (8001be0 <HAL_RCC_OscConfig+0x2e4>)
 8001aae:	b17a      	cbz	r2, 8001ad0 <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_LSI_ENABLE();
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001ab4:	f7ff fa32 	bl	8000f1c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab8:	4d46      	ldr	r5, [pc, #280]	; (8001bd4 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8001aba:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001abc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001abe:	0798      	lsls	r0, r3, #30
 8001ac0:	f53f af2d 	bmi.w	800191e <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ac4:	f7ff fa2a 	bl	8000f1c <HAL_GetTick>
 8001ac8:	1b80      	subs	r0, r0, r6
 8001aca:	2802      	cmp	r0, #2
 8001acc:	d9f6      	bls.n	8001abc <HAL_RCC_OscConfig+0x1c0>
 8001ace:	e785      	b.n	80019dc <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_LSI_DISABLE();
 8001ad0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001ad2:	f7ff fa23 	bl	8000f1c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad6:	4d3f      	ldr	r5, [pc, #252]	; (8001bd4 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8001ad8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ada:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001adc:	0799      	lsls	r1, r3, #30
 8001ade:	f57f af1e 	bpl.w	800191e <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae2:	f7ff fa1b 	bl	8000f1c <HAL_GetTick>
 8001ae6:	1b80      	subs	r0, r0, r6
 8001ae8:	2802      	cmp	r0, #2
 8001aea:	d9f6      	bls.n	8001ada <HAL_RCC_OscConfig+0x1de>
 8001aec:	e776      	b.n	80019dc <HAL_RCC_OscConfig+0xe0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001aee:	f7ff fa15 	bl	8000f1c <HAL_GetTick>
 8001af2:	1b80      	subs	r0, r0, r6
 8001af4:	2802      	cmp	r0, #2
 8001af6:	f67f af29 	bls.w	800194c <HAL_RCC_OscConfig+0x50>
 8001afa:	e76f      	b.n	80019dc <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001afc:	2b05      	cmp	r3, #5
 8001afe:	d104      	bne.n	8001b0a <HAL_RCC_OscConfig+0x20e>
 8001b00:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001b02:	f043 0304 	orr.w	r3, r3, #4
 8001b06:	672b      	str	r3, [r5, #112]	; 0x70
 8001b08:	e729      	b.n	800195e <HAL_RCC_OscConfig+0x62>
 8001b0a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001b0c:	f022 0201 	bic.w	r2, r2, #1
 8001b10:	672a      	str	r2, [r5, #112]	; 0x70
 8001b12:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001b14:	f022 0204 	bic.w	r2, r2, #4
 8001b18:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f47f af23 	bne.w	8001966 <HAL_RCC_OscConfig+0x6a>
      tickstart = HAL_GetTick();
 8001b20:	f7ff f9fc 	bl	8000f1c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b24:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001b28:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b2a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001b2c:	0798      	lsls	r0, r3, #30
 8001b2e:	f57f af24 	bpl.w	800197a <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b32:	f7ff f9f3 	bl	8000f1c <HAL_GetTick>
 8001b36:	1b80      	subs	r0, r0, r6
 8001b38:	42b8      	cmp	r0, r7
 8001b3a:	d9f6      	bls.n	8001b2a <HAL_RCC_OscConfig+0x22e>
 8001b3c:	e74e      	b.n	80019dc <HAL_RCC_OscConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b3e:	f7ff f9ed 	bl	8000f1c <HAL_GetTick>
 8001b42:	1b80      	subs	r0, r0, r6
 8001b44:	42b8      	cmp	r0, r7
 8001b46:	f67f af14 	bls.w	8001972 <HAL_RCC_OscConfig+0x76>
 8001b4a:	e747      	b.n	80019dc <HAL_RCC_OscConfig+0xe0>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b4c:	4d21      	ldr	r5, [pc, #132]	; (8001bd4 <HAL_RCC_OscConfig+0x2d8>)
 8001b4e:	68ab      	ldr	r3, [r5, #8]
 8001b50:	f003 030c 	and.w	r3, r3, #12
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	f43f aed4 	beq.w	8001902 <HAL_RCC_OscConfig+0x6>
 8001b5a:	4e22      	ldr	r6, [pc, #136]	; (8001be4 <HAL_RCC_OscConfig+0x2e8>)
 8001b5c:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b5e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001b60:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b62:	d12a      	bne.n	8001bba <HAL_RCC_OscConfig+0x2be>
        tickstart = HAL_GetTick();
 8001b64:	f7ff f9da 	bl	8000f1c <HAL_GetTick>
 8001b68:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b6a:	682b      	ldr	r3, [r5, #0]
 8001b6c:	0199      	lsls	r1, r3, #6
 8001b6e:	d41e      	bmi.n	8001bae <HAL_RCC_OscConfig+0x2b2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b70:	6a22      	ldr	r2, [r4, #32]
 8001b72:	69e3      	ldr	r3, [r4, #28]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b78:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001b7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b7e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001b82:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b84:	4c13      	ldr	r4, [pc, #76]	; (8001bd4 <HAL_RCC_OscConfig+0x2d8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b86:	0852      	lsrs	r2, r2, #1
 8001b88:	3a01      	subs	r2, #1
 8001b8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001b8e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001b90:	2301      	movs	r3, #1
 8001b92:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001b94:	f7ff f9c2 	bl	8000f1c <HAL_GetTick>
 8001b98:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b9a:	6823      	ldr	r3, [r4, #0]
 8001b9c:	019a      	lsls	r2, r3, #6
 8001b9e:	f53f aef0 	bmi.w	8001982 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba2:	f7ff f9bb 	bl	8000f1c <HAL_GetTick>
 8001ba6:	1b40      	subs	r0, r0, r5
 8001ba8:	2802      	cmp	r0, #2
 8001baa:	d9f6      	bls.n	8001b9a <HAL_RCC_OscConfig+0x29e>
 8001bac:	e716      	b.n	80019dc <HAL_RCC_OscConfig+0xe0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bae:	f7ff f9b5 	bl	8000f1c <HAL_GetTick>
 8001bb2:	1bc0      	subs	r0, r0, r7
 8001bb4:	2802      	cmp	r0, #2
 8001bb6:	d9d8      	bls.n	8001b6a <HAL_RCC_OscConfig+0x26e>
 8001bb8:	e710      	b.n	80019dc <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 8001bba:	f7ff f9af 	bl	8000f1c <HAL_GetTick>
 8001bbe:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bc0:	682b      	ldr	r3, [r5, #0]
 8001bc2:	019b      	lsls	r3, r3, #6
 8001bc4:	f57f aedd 	bpl.w	8001982 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bc8:	f7ff f9a8 	bl	8000f1c <HAL_GetTick>
 8001bcc:	1b00      	subs	r0, r0, r4
 8001bce:	2802      	cmp	r0, #2
 8001bd0:	d9f6      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x2c4>
 8001bd2:	e703      	b.n	80019dc <HAL_RCC_OscConfig+0xe0>
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40007000 	.word	0x40007000
 8001bdc:	42470000 	.word	0x42470000
 8001be0:	42470e80 	.word	0x42470e80
 8001be4:	42470060 	.word	0x42470060

08001be8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001be8:	4913      	ldr	r1, [pc, #76]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001bea:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bec:	688b      	ldr	r3, [r1, #8]
 8001bee:	f003 030c 	and.w	r3, r3, #12
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d003      	beq.n	8001bfe <HAL_RCC_GetSysClockFreq+0x16>
 8001bf6:	2b08      	cmp	r3, #8
 8001bf8:	d003      	beq.n	8001c02 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bfa:	4810      	ldr	r0, [pc, #64]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001bfc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001bfe:	4810      	ldr	r0, [pc, #64]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x58>)
 8001c00:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c02:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c04:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c06:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c08:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c0c:	bf14      	ite	ne
 8001c0e:	480c      	ldrne	r0, [pc, #48]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c10:	480a      	ldreq	r0, [pc, #40]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c12:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001c16:	bf18      	it	ne
 8001c18:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c1a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c1e:	fba1 0100 	umull	r0, r1, r1, r0
 8001c22:	f7fe ffbd 	bl	8000ba0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c26:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x50>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001c2e:	3301      	adds	r3, #1
 8001c30:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001c32:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c36:	bd08      	pop	{r3, pc}
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	00f42400 	.word	0x00f42400
 8001c40:	017d7840 	.word	0x017d7840

08001c44 <HAL_RCC_ClockConfig>:
{
 8001c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c48:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001c4a:	4604      	mov	r4, r0
 8001c4c:	b910      	cbnz	r0, 8001c54 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001c4e:	2001      	movs	r0, #1
 8001c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c54:	4b44      	ldr	r3, [pc, #272]	; (8001d68 <HAL_RCC_ClockConfig+0x124>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	f002 020f 	and.w	r2, r2, #15
 8001c5c:	428a      	cmp	r2, r1
 8001c5e:	d328      	bcc.n	8001cb2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c60:	6821      	ldr	r1, [r4, #0]
 8001c62:	078f      	lsls	r7, r1, #30
 8001c64:	d42d      	bmi.n	8001cc2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c66:	07c8      	lsls	r0, r1, #31
 8001c68:	d440      	bmi.n	8001cec <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c6a:	4b3f      	ldr	r3, [pc, #252]	; (8001d68 <HAL_RCC_ClockConfig+0x124>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	f002 020f 	and.w	r2, r2, #15
 8001c72:	4295      	cmp	r5, r2
 8001c74:	d366      	bcc.n	8001d44 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c76:	6822      	ldr	r2, [r4, #0]
 8001c78:	0751      	lsls	r1, r2, #29
 8001c7a:	d46c      	bmi.n	8001d56 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c7c:	0713      	lsls	r3, r2, #28
 8001c7e:	d507      	bpl.n	8001c90 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c80:	4a3a      	ldr	r2, [pc, #232]	; (8001d6c <HAL_RCC_ClockConfig+0x128>)
 8001c82:	6921      	ldr	r1, [r4, #16]
 8001c84:	6893      	ldr	r3, [r2, #8]
 8001c86:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001c8a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001c8e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c90:	f7ff ffaa 	bl	8001be8 <HAL_RCC_GetSysClockFreq>
 8001c94:	4b35      	ldr	r3, [pc, #212]	; (8001d6c <HAL_RCC_ClockConfig+0x128>)
 8001c96:	4a36      	ldr	r2, [pc, #216]	; (8001d70 <HAL_RCC_ClockConfig+0x12c>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001c9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ca0:	40d8      	lsrs	r0, r3
 8001ca2:	4b34      	ldr	r3, [pc, #208]	; (8001d74 <HAL_RCC_ClockConfig+0x130>)
 8001ca4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	f7ff f902 	bl	8000eb0 <HAL_InitTick>
  return HAL_OK;
 8001cac:	2000      	movs	r0, #0
 8001cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb2:	b2ca      	uxtb	r2, r1
 8001cb4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 030f 	and.w	r3, r3, #15
 8001cbc:	4299      	cmp	r1, r3
 8001cbe:	d1c6      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xa>
 8001cc0:	e7ce      	b.n	8001c60 <HAL_RCC_ClockConfig+0x1c>
 8001cc2:	4b2a      	ldr	r3, [pc, #168]	; (8001d6c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cc8:	bf1e      	ittt	ne
 8001cca:	689a      	ldrne	r2, [r3, #8]
 8001ccc:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001cd0:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd2:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cd4:	bf42      	ittt	mi
 8001cd6:	689a      	ldrmi	r2, [r3, #8]
 8001cd8:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001cdc:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	68a0      	ldr	r0, [r4, #8]
 8001ce2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001ce6:	4302      	orrs	r2, r0
 8001ce8:	609a      	str	r2, [r3, #8]
 8001cea:	e7bc      	b.n	8001c66 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cec:	6862      	ldr	r2, [r4, #4]
 8001cee:	4b1f      	ldr	r3, [pc, #124]	; (8001d6c <HAL_RCC_ClockConfig+0x128>)
 8001cf0:	2a01      	cmp	r2, #1
 8001cf2:	d11d      	bne.n	8001d30 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cfa:	d0a8      	beq.n	8001c4e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cfc:	4e1b      	ldr	r6, [pc, #108]	; (8001d6c <HAL_RCC_ClockConfig+0x128>)
 8001cfe:	68b3      	ldr	r3, [r6, #8]
 8001d00:	f023 0303 	bic.w	r3, r3, #3
 8001d04:	4313      	orrs	r3, r2
 8001d06:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001d08:	f7ff f908 	bl	8000f1c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d0c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001d10:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d12:	68b3      	ldr	r3, [r6, #8]
 8001d14:	6862      	ldr	r2, [r4, #4]
 8001d16:	f003 030c 	and.w	r3, r3, #12
 8001d1a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001d1e:	d0a4      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d20:	f7ff f8fc 	bl	8000f1c <HAL_GetTick>
 8001d24:	1bc0      	subs	r0, r0, r7
 8001d26:	4540      	cmp	r0, r8
 8001d28:	d9f3      	bls.n	8001d12 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001d2a:	2003      	movs	r0, #3
}
 8001d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d30:	1e91      	subs	r1, r2, #2
 8001d32:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d34:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d36:	d802      	bhi.n	8001d3e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d38:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001d3c:	e7dd      	b.n	8001cfa <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d3e:	f013 0f02 	tst.w	r3, #2
 8001d42:	e7da      	b.n	8001cfa <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d44:	b2ea      	uxtb	r2, r5
 8001d46:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	429d      	cmp	r5, r3
 8001d50:	f47f af7d 	bne.w	8001c4e <HAL_RCC_ClockConfig+0xa>
 8001d54:	e78f      	b.n	8001c76 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d56:	4905      	ldr	r1, [pc, #20]	; (8001d6c <HAL_RCC_ClockConfig+0x128>)
 8001d58:	68e0      	ldr	r0, [r4, #12]
 8001d5a:	688b      	ldr	r3, [r1, #8]
 8001d5c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001d60:	4303      	orrs	r3, r0
 8001d62:	608b      	str	r3, [r1, #8]
 8001d64:	e78a      	b.n	8001c7c <HAL_RCC_ClockConfig+0x38>
 8001d66:	bf00      	nop
 8001d68:	40023c00 	.word	0x40023c00
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	08005f1c 	.word	0x08005f1c
 8001d74:	20000000 	.word	0x20000000

08001d78 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001d78:	4b01      	ldr	r3, [pc, #4]	; (8001d80 <HAL_RCC_GetHCLKFreq+0x8>)
 8001d7a:	6818      	ldr	r0, [r3, #0]
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	20000000 	.word	0x20000000

08001d84 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d84:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001d86:	4a05      	ldr	r2, [pc, #20]	; (8001d9c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001d8e:	5cd3      	ldrb	r3, [r2, r3]
 8001d90:	4a03      	ldr	r2, [pc, #12]	; (8001da0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001d92:	6810      	ldr	r0, [r2, #0]
}
 8001d94:	40d8      	lsrs	r0, r3
 8001d96:	4770      	bx	lr
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	08005f2c 	.word	0x08005f2c
 8001da0:	20000000 	.word	0x20000000

08001da4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001da4:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001da6:	4a05      	ldr	r2, [pc, #20]	; (8001dbc <HAL_RCC_GetPCLK2Freq+0x18>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001dae:	5cd3      	ldrb	r3, [r2, r3]
 8001db0:	4a03      	ldr	r2, [pc, #12]	; (8001dc0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001db2:	6810      	ldr	r0, [r2, #0]
}
 8001db4:	40d8      	lsrs	r0, r3
 8001db6:	4770      	bx	lr
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	08005f2c 	.word	0x08005f2c
 8001dc0:	20000000 	.word	0x20000000

08001dc4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dc4:	6a03      	ldr	r3, [r0, #32]
 8001dc6:	f023 0301 	bic.w	r3, r3, #1
 8001dca:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001dcc:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001dce:	6842      	ldr	r2, [r0, #4]
{
 8001dd0:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001dd2:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001dd4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001dd6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001dda:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001ddc:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001dde:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001de2:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001de4:	4c0c      	ldr	r4, [pc, #48]	; (8001e18 <TIM_OC1_SetConfig+0x54>)
 8001de6:	42a0      	cmp	r0, r4
 8001de8:	d009      	beq.n	8001dfe <TIM_OC1_SetConfig+0x3a>
 8001dea:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001dee:	42a0      	cmp	r0, r4
 8001df0:	d005      	beq.n	8001dfe <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001df2:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001df4:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001df6:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001df8:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001dfa:	6203      	str	r3, [r0, #32]
} 
 8001dfc:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8001dfe:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e00:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001e02:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001e06:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e08:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001e0a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e0e:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001e10:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e14:	4322      	orrs	r2, r4
 8001e16:	e7ec      	b.n	8001df2 <TIM_OC1_SetConfig+0x2e>
 8001e18:	40010000 	.word	0x40010000

08001e1c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e1c:	6a03      	ldr	r3, [r0, #32]
 8001e1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e22:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e24:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001e26:	6842      	ldr	r2, [r0, #4]
{
 8001e28:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e2a:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e2c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001e2e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001e32:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001e34:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001e36:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001e3a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001e3e:	4c0e      	ldr	r4, [pc, #56]	; (8001e78 <TIM_OC3_SetConfig+0x5c>)
 8001e40:	42a0      	cmp	r0, r4
 8001e42:	d009      	beq.n	8001e58 <TIM_OC3_SetConfig+0x3c>
 8001e44:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e48:	42a0      	cmp	r0, r4
 8001e4a:	d005      	beq.n	8001e58 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e4c:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001e4e:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001e50:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001e52:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e54:	6203      	str	r3, [r0, #32]
}
 8001e56:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e58:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e5a:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001e5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e60:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001e64:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001e66:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e6a:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001e6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e70:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8001e74:	e7ea      	b.n	8001e4c <TIM_OC3_SetConfig+0x30>
 8001e76:	bf00      	nop
 8001e78:	40010000 	.word	0x40010000

08001e7c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001e7c:	6a03      	ldr	r3, [r0, #32]
 8001e7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e82:	6203      	str	r3, [r0, #32]
{
 8001e84:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e86:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001e88:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e8a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e8c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001e8e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e92:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001e96:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001e98:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001e9c:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001ea0:	4d09      	ldr	r5, [pc, #36]	; (8001ec8 <TIM_OC4_SetConfig+0x4c>)
 8001ea2:	42a8      	cmp	r0, r5
 8001ea4:	d009      	beq.n	8001eba <TIM_OC4_SetConfig+0x3e>
 8001ea6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001eaa:	42a8      	cmp	r0, r5
 8001eac:	d005      	beq.n	8001eba <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001eae:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001eb0:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001eb2:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001eb4:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001eb6:	6204      	str	r4, [r0, #32]
}
 8001eb8:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001eba:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001ebc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001ec0:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8001ec4:	e7f3      	b.n	8001eae <TIM_OC4_SetConfig+0x32>
 8001ec6:	bf00      	nop
 8001ec8:	40010000 	.word	0x40010000

08001ecc <HAL_TIM_PWM_MspInit>:
 8001ecc:	4770      	bx	lr

08001ece <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001ece:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001ed2:	2b01      	cmp	r3, #1
{
 8001ed4:	b570      	push	{r4, r5, r6, lr}
 8001ed6:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001eda:	d01c      	beq.n	8001f16 <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8001edc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8001ee0:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8001ee8:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001eea:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001eee:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001ef2:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001ef4:	680a      	ldr	r2, [r1, #0]
 8001ef6:	2a40      	cmp	r2, #64	; 0x40
 8001ef8:	d079      	beq.n	8001fee <HAL_TIM_ConfigClockSource+0x120>
 8001efa:	d819      	bhi.n	8001f30 <HAL_TIM_ConfigClockSource+0x62>
 8001efc:	2a10      	cmp	r2, #16
 8001efe:	f000 8093 	beq.w	8002028 <HAL_TIM_ConfigClockSource+0x15a>
 8001f02:	d80a      	bhi.n	8001f1a <HAL_TIM_ConfigClockSource+0x4c>
 8001f04:	2a00      	cmp	r2, #0
 8001f06:	f000 8089 	beq.w	800201c <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001f10:	2300      	movs	r3, #0
 8001f12:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001f16:	4618      	mov	r0, r3
}
 8001f18:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001f1a:	2a20      	cmp	r2, #32
 8001f1c:	f000 808a 	beq.w	8002034 <HAL_TIM_ConfigClockSource+0x166>
 8001f20:	2a30      	cmp	r2, #48	; 0x30
 8001f22:	d1f2      	bne.n	8001f0a <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001f24:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f26:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001f2a:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8001f2e:	e036      	b.n	8001f9e <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001f30:	2a70      	cmp	r2, #112	; 0x70
 8001f32:	d036      	beq.n	8001fa2 <HAL_TIM_ConfigClockSource+0xd4>
 8001f34:	d81b      	bhi.n	8001f6e <HAL_TIM_ConfigClockSource+0xa0>
 8001f36:	2a50      	cmp	r2, #80	; 0x50
 8001f38:	d042      	beq.n	8001fc0 <HAL_TIM_ConfigClockSource+0xf2>
 8001f3a:	2a60      	cmp	r2, #96	; 0x60
 8001f3c:	d1e5      	bne.n	8001f0a <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f3e:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001f40:	684d      	ldr	r5, [r1, #4]
 8001f42:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f44:	f024 0410 	bic.w	r4, r4, #16
 8001f48:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f4a:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001f4c:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f4e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f52:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f56:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f5a:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001f5e:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f60:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001f62:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f64:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001f68:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001f6c:	e017      	b.n	8001f9e <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001f6e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001f72:	d011      	beq.n	8001f98 <HAL_TIM_ConfigClockSource+0xca>
 8001f74:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001f78:	d1c7      	bne.n	8001f0a <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001f7a:	688a      	ldr	r2, [r1, #8]
 8001f7c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001f7e:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001f80:	68c9      	ldr	r1, [r1, #12]
 8001f82:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f84:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001f88:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001f8c:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f8e:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f96:	e002      	b.n	8001f9e <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	e7b3      	b.n	8001f0a <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001fa2:	688a      	ldr	r2, [r1, #8]
 8001fa4:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001fa6:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001fa8:	68c9      	ldr	r1, [r1, #12]
 8001faa:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fac:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001fb0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001fb4:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001fb6:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001fb8:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fba:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001fbe:	e7ee      	b.n	8001f9e <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001fc0:	684c      	ldr	r4, [r1, #4]
 8001fc2:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001fc4:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fc6:	6a1d      	ldr	r5, [r3, #32]
 8001fc8:	f025 0501 	bic.w	r5, r5, #1
 8001fcc:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001fce:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fd0:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fd4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001fd8:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001fdc:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001fde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fe0:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001fe2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001fe4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001fe8:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001fec:	e7d7      	b.n	8001f9e <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001fee:	684c      	ldr	r4, [r1, #4]
 8001ff0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001ff2:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ff4:	6a1d      	ldr	r5, [r3, #32]
 8001ff6:	f025 0501 	bic.w	r5, r5, #1
 8001ffa:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001ffc:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ffe:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002002:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002006:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800200a:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800200c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800200e:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002010:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002012:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002016:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 800201a:	e7c0      	b.n	8001f9e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800201c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800201e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002022:	f042 0207 	orr.w	r2, r2, #7
 8002026:	e7ba      	b.n	8001f9e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002028:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800202a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800202e:	f042 0217 	orr.w	r2, r2, #23
 8002032:	e7b4      	b.n	8001f9e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002034:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002036:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800203a:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800203e:	e7ae      	b.n	8001f9e <HAL_TIM_ConfigClockSource+0xd0>

08002040 <HAL_TIM_PeriodElapsedCallback>:
 8002040:	4770      	bx	lr

08002042 <HAL_TIM_OC_DelayElapsedCallback>:
 8002042:	4770      	bx	lr

08002044 <HAL_TIM_IC_CaptureCallback>:
 8002044:	4770      	bx	lr

08002046 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002046:	4770      	bx	lr

08002048 <HAL_TIM_TriggerCallback>:
 8002048:	4770      	bx	lr

0800204a <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800204a:	6803      	ldr	r3, [r0, #0]
 800204c:	691a      	ldr	r2, [r3, #16]
 800204e:	0791      	lsls	r1, r2, #30
{
 8002050:	b510      	push	{r4, lr}
 8002052:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002054:	d50e      	bpl.n	8002074 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002056:	68da      	ldr	r2, [r3, #12]
 8002058:	0792      	lsls	r2, r2, #30
 800205a:	d50b      	bpl.n	8002074 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800205c:	f06f 0202 	mvn.w	r2, #2
 8002060:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002062:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002064:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002066:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002068:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800206a:	d077      	beq.n	800215c <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800206c:	f7ff ffea 	bl	8002044 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002070:	2300      	movs	r3, #0
 8002072:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002074:	6823      	ldr	r3, [r4, #0]
 8002076:	691a      	ldr	r2, [r3, #16]
 8002078:	0750      	lsls	r0, r2, #29
 800207a:	d510      	bpl.n	800209e <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	0751      	lsls	r1, r2, #29
 8002080:	d50d      	bpl.n	800209e <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002082:	f06f 0204 	mvn.w	r2, #4
 8002086:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002088:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800208a:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800208c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002090:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8002092:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002094:	d068      	beq.n	8002168 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002096:	f7ff ffd5 	bl	8002044 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800209a:	2300      	movs	r3, #0
 800209c:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800209e:	6823      	ldr	r3, [r4, #0]
 80020a0:	691a      	ldr	r2, [r3, #16]
 80020a2:	0712      	lsls	r2, r2, #28
 80020a4:	d50f      	bpl.n	80020c6 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80020a6:	68da      	ldr	r2, [r3, #12]
 80020a8:	0710      	lsls	r0, r2, #28
 80020aa:	d50c      	bpl.n	80020c6 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020ac:	f06f 0208 	mvn.w	r2, #8
 80020b0:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020b2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020b4:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020b6:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020b8:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80020ba:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020bc:	d05a      	beq.n	8002174 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80020be:	f7ff ffc1 	bl	8002044 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020c2:	2300      	movs	r3, #0
 80020c4:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020c6:	6823      	ldr	r3, [r4, #0]
 80020c8:	691a      	ldr	r2, [r3, #16]
 80020ca:	06d2      	lsls	r2, r2, #27
 80020cc:	d510      	bpl.n	80020f0 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	06d0      	lsls	r0, r2, #27
 80020d2:	d50d      	bpl.n	80020f0 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020d4:	f06f 0210 	mvn.w	r2, #16
 80020d8:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020da:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020dc:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020de:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020e2:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80020e4:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020e6:	d04b      	beq.n	8002180 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80020e8:	f7ff ffac 	bl	8002044 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ec:	2300      	movs	r3, #0
 80020ee:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020f0:	6823      	ldr	r3, [r4, #0]
 80020f2:	691a      	ldr	r2, [r3, #16]
 80020f4:	07d1      	lsls	r1, r2, #31
 80020f6:	d508      	bpl.n	800210a <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	07d2      	lsls	r2, r2, #31
 80020fc:	d505      	bpl.n	800210a <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020fe:	f06f 0201 	mvn.w	r2, #1
 8002102:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002104:	4620      	mov	r0, r4
 8002106:	f7ff ff9b 	bl	8002040 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800210a:	6823      	ldr	r3, [r4, #0]
 800210c:	691a      	ldr	r2, [r3, #16]
 800210e:	0610      	lsls	r0, r2, #24
 8002110:	d508      	bpl.n	8002124 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	0611      	lsls	r1, r2, #24
 8002116:	d505      	bpl.n	8002124 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002118:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800211c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800211e:	4620      	mov	r0, r4
 8002120:	f000 f9cf 	bl	80024c2 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002124:	6823      	ldr	r3, [r4, #0]
 8002126:	691a      	ldr	r2, [r3, #16]
 8002128:	0652      	lsls	r2, r2, #25
 800212a:	d508      	bpl.n	800213e <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	0650      	lsls	r0, r2, #25
 8002130:	d505      	bpl.n	800213e <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002132:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002136:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002138:	4620      	mov	r0, r4
 800213a:	f7ff ff85 	bl	8002048 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800213e:	6823      	ldr	r3, [r4, #0]
 8002140:	691a      	ldr	r2, [r3, #16]
 8002142:	0691      	lsls	r1, r2, #26
 8002144:	d522      	bpl.n	800218c <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	0692      	lsls	r2, r2, #26
 800214a:	d51f      	bpl.n	800218c <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800214c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002150:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002152:	611a      	str	r2, [r3, #16]
}
 8002154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8002158:	f000 b9b2 	b.w	80024c0 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800215c:	f7ff ff71 	bl	8002042 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002160:	4620      	mov	r0, r4
 8002162:	f7ff ff70 	bl	8002046 <HAL_TIM_PWM_PulseFinishedCallback>
 8002166:	e783      	b.n	8002070 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002168:	f7ff ff6b 	bl	8002042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800216c:	4620      	mov	r0, r4
 800216e:	f7ff ff6a 	bl	8002046 <HAL_TIM_PWM_PulseFinishedCallback>
 8002172:	e792      	b.n	800209a <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002174:	f7ff ff65 	bl	8002042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002178:	4620      	mov	r0, r4
 800217a:	f7ff ff64 	bl	8002046 <HAL_TIM_PWM_PulseFinishedCallback>
 800217e:	e7a0      	b.n	80020c2 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002180:	f7ff ff5f 	bl	8002042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002184:	4620      	mov	r0, r4
 8002186:	f7ff ff5e 	bl	8002046 <HAL_TIM_PWM_PulseFinishedCallback>
 800218a:	e7af      	b.n	80020ec <HAL_TIM_IRQHandler+0xa2>
 800218c:	bd10      	pop	{r4, pc}
	...

08002190 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002190:	4a2e      	ldr	r2, [pc, #184]	; (800224c <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8002192:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002194:	4290      	cmp	r0, r2
 8002196:	d012      	beq.n	80021be <TIM_Base_SetConfig+0x2e>
 8002198:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800219c:	d00f      	beq.n	80021be <TIM_Base_SetConfig+0x2e>
 800219e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80021a2:	4290      	cmp	r0, r2
 80021a4:	d00b      	beq.n	80021be <TIM_Base_SetConfig+0x2e>
 80021a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021aa:	4290      	cmp	r0, r2
 80021ac:	d007      	beq.n	80021be <TIM_Base_SetConfig+0x2e>
 80021ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021b2:	4290      	cmp	r0, r2
 80021b4:	d003      	beq.n	80021be <TIM_Base_SetConfig+0x2e>
 80021b6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80021ba:	4290      	cmp	r0, r2
 80021bc:	d11d      	bne.n	80021fa <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 80021be:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80021c4:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80021c6:	4a21      	ldr	r2, [pc, #132]	; (800224c <TIM_Base_SetConfig+0xbc>)
 80021c8:	4290      	cmp	r0, r2
 80021ca:	d104      	bne.n	80021d6 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021cc:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80021ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021d2:	4313      	orrs	r3, r2
 80021d4:	e028      	b.n	8002228 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80021d6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80021da:	d0f7      	beq.n	80021cc <TIM_Base_SetConfig+0x3c>
 80021dc:	4a1c      	ldr	r2, [pc, #112]	; (8002250 <TIM_Base_SetConfig+0xc0>)
 80021de:	4290      	cmp	r0, r2
 80021e0:	d0f4      	beq.n	80021cc <TIM_Base_SetConfig+0x3c>
 80021e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021e6:	4290      	cmp	r0, r2
 80021e8:	d0f0      	beq.n	80021cc <TIM_Base_SetConfig+0x3c>
 80021ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021ee:	4290      	cmp	r0, r2
 80021f0:	d0ec      	beq.n	80021cc <TIM_Base_SetConfig+0x3c>
 80021f2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80021f6:	4290      	cmp	r0, r2
 80021f8:	d0e8      	beq.n	80021cc <TIM_Base_SetConfig+0x3c>
 80021fa:	4a16      	ldr	r2, [pc, #88]	; (8002254 <TIM_Base_SetConfig+0xc4>)
 80021fc:	4290      	cmp	r0, r2
 80021fe:	d0e5      	beq.n	80021cc <TIM_Base_SetConfig+0x3c>
 8002200:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002204:	4290      	cmp	r0, r2
 8002206:	d0e1      	beq.n	80021cc <TIM_Base_SetConfig+0x3c>
 8002208:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800220c:	4290      	cmp	r0, r2
 800220e:	d0dd      	beq.n	80021cc <TIM_Base_SetConfig+0x3c>
 8002210:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002214:	4290      	cmp	r0, r2
 8002216:	d0d9      	beq.n	80021cc <TIM_Base_SetConfig+0x3c>
 8002218:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800221c:	4290      	cmp	r0, r2
 800221e:	d0d5      	beq.n	80021cc <TIM_Base_SetConfig+0x3c>
 8002220:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002224:	4290      	cmp	r0, r2
 8002226:	d0d1      	beq.n	80021cc <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8002228:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800222a:	688b      	ldr	r3, [r1, #8]
 800222c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800222e:	680b      	ldr	r3, [r1, #0]
 8002230:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002232:	4b06      	ldr	r3, [pc, #24]	; (800224c <TIM_Base_SetConfig+0xbc>)
 8002234:	4298      	cmp	r0, r3
 8002236:	d006      	beq.n	8002246 <TIM_Base_SetConfig+0xb6>
 8002238:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800223c:	4298      	cmp	r0, r3
 800223e:	d002      	beq.n	8002246 <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8002240:	2301      	movs	r3, #1
 8002242:	6143      	str	r3, [r0, #20]
}
 8002244:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002246:	690b      	ldr	r3, [r1, #16]
 8002248:	6303      	str	r3, [r0, #48]	; 0x30
 800224a:	e7f9      	b.n	8002240 <TIM_Base_SetConfig+0xb0>
 800224c:	40010000 	.word	0x40010000
 8002250:	40000400 	.word	0x40000400
 8002254:	40014000 	.word	0x40014000

08002258 <HAL_TIM_Base_Init>:
{ 
 8002258:	b510      	push	{r4, lr}
  if(htim == NULL)
 800225a:	4604      	mov	r4, r0
 800225c:	b1a0      	cbz	r0, 8002288 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800225e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002262:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002266:	b91b      	cbnz	r3, 8002270 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002268:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 800226c:	f000 fdda 	bl	8002e24 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002270:	2302      	movs	r3, #2
 8002272:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002276:	6820      	ldr	r0, [r4, #0]
 8002278:	1d21      	adds	r1, r4, #4
 800227a:	f7ff ff89 	bl	8002190 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800227e:	2301      	movs	r3, #1
 8002280:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002284:	2000      	movs	r0, #0
 8002286:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002288:	2001      	movs	r0, #1
}
 800228a:	bd10      	pop	{r4, pc}

0800228c <HAL_TIM_PWM_Init>:
{
 800228c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800228e:	4604      	mov	r4, r0
 8002290:	b1a0      	cbz	r0, 80022bc <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002292:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002296:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800229a:	b91b      	cbnz	r3, 80022a4 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800229c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 80022a0:	f7ff fe14 	bl	8001ecc <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 80022a4:	2302      	movs	r3, #2
 80022a6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80022aa:	6820      	ldr	r0, [r4, #0]
 80022ac:	1d21      	adds	r1, r4, #4
 80022ae:	f7ff ff6f 	bl	8002190 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80022b2:	2301      	movs	r3, #1
 80022b4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80022b8:	2000      	movs	r0, #0
 80022ba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80022bc:	2001      	movs	r0, #1
}  
 80022be:	bd10      	pop	{r4, pc}

080022c0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022c0:	6a03      	ldr	r3, [r0, #32]
 80022c2:	f023 0310 	bic.w	r3, r3, #16
 80022c6:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80022c8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80022ca:	6842      	ldr	r2, [r0, #4]
{
 80022cc:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 80022ce:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022d0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80022d2:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022d6:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80022da:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80022dc:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80022e0:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80022e4:	4c0d      	ldr	r4, [pc, #52]	; (800231c <TIM_OC2_SetConfig+0x5c>)
 80022e6:	42a0      	cmp	r0, r4
 80022e8:	d009      	beq.n	80022fe <TIM_OC2_SetConfig+0x3e>
 80022ea:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80022ee:	42a0      	cmp	r0, r4
 80022f0:	d005      	beq.n	80022fe <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 80022f2:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80022f4:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80022f6:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80022f8:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80022fa:	6203      	str	r3, [r0, #32]
}
 80022fc:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80022fe:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002300:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002302:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002306:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800230a:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800230c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002310:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002312:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002316:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 800231a:	e7ea      	b.n	80022f2 <TIM_OC2_SetConfig+0x32>
 800231c:	40010000 	.word	0x40010000

08002320 <HAL_TIM_PWM_ConfigChannel>:
{
 8002320:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002322:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002326:	2b01      	cmp	r3, #1
{
 8002328:	4604      	mov	r4, r0
 800232a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800232e:	d025      	beq.n	800237c <HAL_TIM_PWM_ConfigChannel+0x5c>
 8002330:	2301      	movs	r3, #1
 8002332:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8002336:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 800233a:	2a0c      	cmp	r2, #12
 800233c:	d818      	bhi.n	8002370 <HAL_TIM_PWM_ConfigChannel+0x50>
 800233e:	e8df f002 	tbb	[pc, r2]
 8002342:	1707      	.short	0x1707
 8002344:	171e1717 	.word	0x171e1717
 8002348:	172f1717 	.word	0x172f1717
 800234c:	1717      	.short	0x1717
 800234e:	40          	.byte	0x40
 800234f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002350:	6820      	ldr	r0, [r4, #0]
 8002352:	f7ff fd37 	bl	8001dc4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002356:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002358:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800235a:	699a      	ldr	r2, [r3, #24]
 800235c:	f042 0208 	orr.w	r2, r2, #8
 8002360:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002362:	699a      	ldr	r2, [r3, #24]
 8002364:	f022 0204 	bic.w	r2, r2, #4
 8002368:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800236a:	699a      	ldr	r2, [r3, #24]
 800236c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800236e:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002370:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002372:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002374:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8002378:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 800237c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800237e:	6820      	ldr	r0, [r4, #0]
 8002380:	f7ff ff9e 	bl	80022c0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002384:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002386:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002388:	699a      	ldr	r2, [r3, #24]
 800238a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800238e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002390:	699a      	ldr	r2, [r3, #24]
 8002392:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002396:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002398:	699a      	ldr	r2, [r3, #24]
 800239a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800239e:	e7e6      	b.n	800236e <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023a0:	6820      	ldr	r0, [r4, #0]
 80023a2:	f7ff fd3b 	bl	8001e1c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023a6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80023a8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023aa:	69da      	ldr	r2, [r3, #28]
 80023ac:	f042 0208 	orr.w	r2, r2, #8
 80023b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023b2:	69da      	ldr	r2, [r3, #28]
 80023b4:	f022 0204 	bic.w	r2, r2, #4
 80023b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80023ba:	69da      	ldr	r2, [r3, #28]
 80023bc:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80023be:	61da      	str	r2, [r3, #28]
    break;
 80023c0:	e7d6      	b.n	8002370 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023c2:	6820      	ldr	r0, [r4, #0]
 80023c4:	f7ff fd5a 	bl	8001e7c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023c8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80023ca:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023cc:	69da      	ldr	r2, [r3, #28]
 80023ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023d2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023d4:	69da      	ldr	r2, [r3, #28]
 80023d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80023dc:	69da      	ldr	r2, [r3, #28]
 80023de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80023e2:	e7ec      	b.n	80023be <HAL_TIM_PWM_ConfigChannel+0x9e>

080023e4 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 80023e4:	6a03      	ldr	r3, [r0, #32]
{
 80023e6:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 80023e8:	2401      	movs	r4, #1
 80023ea:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80023ec:	ea23 0304 	bic.w	r3, r3, r4
 80023f0:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80023f2:	6a03      	ldr	r3, [r0, #32]
 80023f4:	408a      	lsls	r2, r1
 80023f6:	431a      	orrs	r2, r3
 80023f8:	6202      	str	r2, [r0, #32]
 80023fa:	bd10      	pop	{r4, pc}

080023fc <HAL_TIM_PWM_Start>:
{
 80023fc:	b510      	push	{r4, lr}
 80023fe:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002400:	2201      	movs	r2, #1
 8002402:	6800      	ldr	r0, [r0, #0]
 8002404:	f7ff ffee 	bl	80023e4 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8002408:	6823      	ldr	r3, [r4, #0]
 800240a:	4a08      	ldr	r2, [pc, #32]	; (800242c <HAL_TIM_PWM_Start+0x30>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d003      	beq.n	8002418 <HAL_TIM_PWM_Start+0x1c>
 8002410:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002414:	4293      	cmp	r3, r2
 8002416:	d103      	bne.n	8002420 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8002418:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800241a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800241e:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	f042 0201 	orr.w	r2, r2, #1
 8002426:	601a      	str	r2, [r3, #0]
} 
 8002428:	2000      	movs	r0, #0
 800242a:	bd10      	pop	{r4, pc}
 800242c:	40010000 	.word	0x40010000

08002430 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8002430:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002434:	2b01      	cmp	r3, #1
{
 8002436:	b510      	push	{r4, lr}
 8002438:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800243c:	d018      	beq.n	8002470 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 800243e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002442:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8002444:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002446:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002448:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800244a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800244e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	4322      	orrs	r2, r4
 8002454:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800245c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	430a      	orrs	r2, r1
 8002462:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8002464:	2301      	movs	r3, #1
 8002466:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800246a:	2300      	movs	r3, #0
 800246c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8002470:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8002472:	bd10      	pop	{r4, pc}

08002474 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002474:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002478:	2b01      	cmp	r3, #1
 800247a:	d01f      	beq.n	80024bc <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800247c:	68cb      	ldr	r3, [r1, #12]
 800247e:	688a      	ldr	r2, [r1, #8]
 8002480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002484:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002486:	684a      	ldr	r2, [r1, #4]
 8002488:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800248c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800248e:	680a      	ldr	r2, [r1, #0]
 8002490:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002494:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002496:	690a      	ldr	r2, [r1, #16]
 8002498:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800249c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800249e:	694a      	ldr	r2, [r1, #20]
 80024a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024a4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80024a6:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80024a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80024ac:	4313      	orrs	r3, r2
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80024ae:	6802      	ldr	r2, [r0, #0]
 80024b0:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 80024b2:	2300      	movs	r3, #0
 80024b4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 80024b8:	4618      	mov	r0, r3
 80024ba:	4770      	bx	lr
  __HAL_LOCK(htim);
 80024bc:	2002      	movs	r0, #2
}
 80024be:	4770      	bx	lr

080024c0 <HAL_TIMEx_CommutationCallback>:
 80024c0:	4770      	bx	lr

080024c2 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024c2:	4770      	bx	lr

080024c4 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80024c8:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80024ca:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 80024cc:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024ce:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80024d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80024d4:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80024d6:	6133      	str	r3, [r6, #16]
{
 80024d8:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024da:	6883      	ldr	r3, [r0, #8]
 80024dc:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 80024de:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024e0:	4303      	orrs	r3, r0
 80024e2:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80024e4:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024e8:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80024ea:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024ee:	430b      	orrs	r3, r1
 80024f0:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80024f2:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80024f4:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80024f6:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80024f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 80024fc:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024fe:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8002502:	6173      	str	r3, [r6, #20]
 8002504:	4b7a      	ldr	r3, [pc, #488]	; (80026f0 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002506:	d17c      	bne.n	8002602 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002508:	429e      	cmp	r6, r3
 800250a:	d003      	beq.n	8002514 <UART_SetConfig+0x50>
 800250c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002510:	429e      	cmp	r6, r3
 8002512:	d144      	bne.n	800259e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002514:	f7ff fc46 	bl	8001da4 <HAL_RCC_GetPCLK2Freq>
 8002518:	2519      	movs	r5, #25
 800251a:	fb05 f300 	mul.w	r3, r5, r0
 800251e:	6860      	ldr	r0, [r4, #4]
 8002520:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002524:	0040      	lsls	r0, r0, #1
 8002526:	fbb3 f3f0 	udiv	r3, r3, r0
 800252a:	fbb3 f3f9 	udiv	r3, r3, r9
 800252e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002532:	f7ff fc37 	bl	8001da4 <HAL_RCC_GetPCLK2Freq>
 8002536:	6863      	ldr	r3, [r4, #4]
 8002538:	4368      	muls	r0, r5
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	fbb0 f7f3 	udiv	r7, r0, r3
 8002540:	f7ff fc30 	bl	8001da4 <HAL_RCC_GetPCLK2Freq>
 8002544:	6863      	ldr	r3, [r4, #4]
 8002546:	4368      	muls	r0, r5
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	fbb0 f3f3 	udiv	r3, r0, r3
 800254e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002552:	fb09 7313 	mls	r3, r9, r3, r7
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	3332      	adds	r3, #50	; 0x32
 800255a:	fbb3 f3f9 	udiv	r3, r3, r9
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002564:	f7ff fc1e 	bl	8001da4 <HAL_RCC_GetPCLK2Freq>
 8002568:	6862      	ldr	r2, [r4, #4]
 800256a:	4368      	muls	r0, r5
 800256c:	0052      	lsls	r2, r2, #1
 800256e:	fbb0 faf2 	udiv	sl, r0, r2
 8002572:	f7ff fc17 	bl	8001da4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002576:	6863      	ldr	r3, [r4, #4]
 8002578:	4368      	muls	r0, r5
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002580:	fbb3 f3f9 	udiv	r3, r3, r9
 8002584:	fb09 a313 	mls	r3, r9, r3, sl
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	3332      	adds	r3, #50	; 0x32
 800258c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002596:	443b      	add	r3, r7
 8002598:	60b3      	str	r3, [r6, #8]
 800259a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800259e:	f7ff fbf1 	bl	8001d84 <HAL_RCC_GetPCLK1Freq>
 80025a2:	2519      	movs	r5, #25
 80025a4:	fb05 f300 	mul.w	r3, r5, r0
 80025a8:	6860      	ldr	r0, [r4, #4]
 80025aa:	f04f 0964 	mov.w	r9, #100	; 0x64
 80025ae:	0040      	lsls	r0, r0, #1
 80025b0:	fbb3 f3f0 	udiv	r3, r3, r0
 80025b4:	fbb3 f3f9 	udiv	r3, r3, r9
 80025b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80025bc:	f7ff fbe2 	bl	8001d84 <HAL_RCC_GetPCLK1Freq>
 80025c0:	6863      	ldr	r3, [r4, #4]
 80025c2:	4368      	muls	r0, r5
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	fbb0 f7f3 	udiv	r7, r0, r3
 80025ca:	f7ff fbdb 	bl	8001d84 <HAL_RCC_GetPCLK1Freq>
 80025ce:	6863      	ldr	r3, [r4, #4]
 80025d0:	4368      	muls	r0, r5
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80025d8:	fbb3 f3f9 	udiv	r3, r3, r9
 80025dc:	fb09 7313 	mls	r3, r9, r3, r7
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	3332      	adds	r3, #50	; 0x32
 80025e4:	fbb3 f3f9 	udiv	r3, r3, r9
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80025ee:	f7ff fbc9 	bl	8001d84 <HAL_RCC_GetPCLK1Freq>
 80025f2:	6862      	ldr	r2, [r4, #4]
 80025f4:	4368      	muls	r0, r5
 80025f6:	0052      	lsls	r2, r2, #1
 80025f8:	fbb0 faf2 	udiv	sl, r0, r2
 80025fc:	f7ff fbc2 	bl	8001d84 <HAL_RCC_GetPCLK1Freq>
 8002600:	e7b9      	b.n	8002576 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002602:	429e      	cmp	r6, r3
 8002604:	d002      	beq.n	800260c <UART_SetConfig+0x148>
 8002606:	4b3b      	ldr	r3, [pc, #236]	; (80026f4 <UART_SetConfig+0x230>)
 8002608:	429e      	cmp	r6, r3
 800260a:	d140      	bne.n	800268e <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800260c:	f7ff fbca 	bl	8001da4 <HAL_RCC_GetPCLK2Freq>
 8002610:	6867      	ldr	r7, [r4, #4]
 8002612:	2519      	movs	r5, #25
 8002614:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002618:	fb05 f300 	mul.w	r3, r5, r0
 800261c:	00bf      	lsls	r7, r7, #2
 800261e:	fbb3 f3f7 	udiv	r3, r3, r7
 8002622:	fbb3 f3f9 	udiv	r3, r3, r9
 8002626:	011f      	lsls	r7, r3, #4
 8002628:	f7ff fbbc 	bl	8001da4 <HAL_RCC_GetPCLK2Freq>
 800262c:	6863      	ldr	r3, [r4, #4]
 800262e:	4368      	muls	r0, r5
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	fbb0 f8f3 	udiv	r8, r0, r3
 8002636:	f7ff fbb5 	bl	8001da4 <HAL_RCC_GetPCLK2Freq>
 800263a:	6863      	ldr	r3, [r4, #4]
 800263c:	4368      	muls	r0, r5
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	fbb0 f3f3 	udiv	r3, r0, r3
 8002644:	fbb3 f3f9 	udiv	r3, r3, r9
 8002648:	fb09 8313 	mls	r3, r9, r3, r8
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	3332      	adds	r3, #50	; 0x32
 8002650:	fbb3 f3f9 	udiv	r3, r3, r9
 8002654:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002658:	f7ff fba4 	bl	8001da4 <HAL_RCC_GetPCLK2Freq>
 800265c:	6862      	ldr	r2, [r4, #4]
 800265e:	4368      	muls	r0, r5
 8002660:	0092      	lsls	r2, r2, #2
 8002662:	fbb0 faf2 	udiv	sl, r0, r2
 8002666:	f7ff fb9d 	bl	8001da4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800266a:	6863      	ldr	r3, [r4, #4]
 800266c:	4368      	muls	r0, r5
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	fbb0 f3f3 	udiv	r3, r0, r3
 8002674:	fbb3 f3f9 	udiv	r3, r3, r9
 8002678:	fb09 a313 	mls	r3, r9, r3, sl
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	3332      	adds	r3, #50	; 0x32
 8002680:	fbb3 f3f9 	udiv	r3, r3, r9
 8002684:	f003 030f 	and.w	r3, r3, #15
 8002688:	ea43 0308 	orr.w	r3, r3, r8
 800268c:	e783      	b.n	8002596 <UART_SetConfig+0xd2>
 800268e:	f7ff fb79 	bl	8001d84 <HAL_RCC_GetPCLK1Freq>
 8002692:	6867      	ldr	r7, [r4, #4]
 8002694:	2519      	movs	r5, #25
 8002696:	f04f 0964 	mov.w	r9, #100	; 0x64
 800269a:	fb05 f300 	mul.w	r3, r5, r0
 800269e:	00bf      	lsls	r7, r7, #2
 80026a0:	fbb3 f3f7 	udiv	r3, r3, r7
 80026a4:	fbb3 f3f9 	udiv	r3, r3, r9
 80026a8:	011f      	lsls	r7, r3, #4
 80026aa:	f7ff fb6b 	bl	8001d84 <HAL_RCC_GetPCLK1Freq>
 80026ae:	6863      	ldr	r3, [r4, #4]
 80026b0:	4368      	muls	r0, r5
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	fbb0 f8f3 	udiv	r8, r0, r3
 80026b8:	f7ff fb64 	bl	8001d84 <HAL_RCC_GetPCLK1Freq>
 80026bc:	6863      	ldr	r3, [r4, #4]
 80026be:	4368      	muls	r0, r5
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026c6:	fbb3 f3f9 	udiv	r3, r3, r9
 80026ca:	fb09 8313 	mls	r3, r9, r3, r8
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	3332      	adds	r3, #50	; 0x32
 80026d2:	fbb3 f3f9 	udiv	r3, r3, r9
 80026d6:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80026da:	f7ff fb53 	bl	8001d84 <HAL_RCC_GetPCLK1Freq>
 80026de:	6862      	ldr	r2, [r4, #4]
 80026e0:	4368      	muls	r0, r5
 80026e2:	0092      	lsls	r2, r2, #2
 80026e4:	fbb0 faf2 	udiv	sl, r0, r2
 80026e8:	f7ff fb4c 	bl	8001d84 <HAL_RCC_GetPCLK1Freq>
 80026ec:	e7bd      	b.n	800266a <UART_SetConfig+0x1a6>
 80026ee:	bf00      	nop
 80026f0:	40011000 	.word	0x40011000
 80026f4:	40011400 	.word	0x40011400

080026f8 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80026f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026fa:	4604      	mov	r4, r0
 80026fc:	460e      	mov	r6, r1
 80026fe:	4617      	mov	r7, r2
 8002700:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002702:	6821      	ldr	r1, [r4, #0]
 8002704:	680b      	ldr	r3, [r1, #0]
 8002706:	ea36 0303 	bics.w	r3, r6, r3
 800270a:	d101      	bne.n	8002710 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 800270c:	2000      	movs	r0, #0
}
 800270e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002710:	1c6b      	adds	r3, r5, #1
 8002712:	d0f7      	beq.n	8002704 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002714:	b995      	cbnz	r5, 800273c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002716:	6823      	ldr	r3, [r4, #0]
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800271e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002720:	695a      	ldr	r2, [r3, #20]
 8002722:	f022 0201 	bic.w	r2, r2, #1
 8002726:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002728:	2320      	movs	r3, #32
 800272a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800272e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002732:	2300      	movs	r3, #0
 8002734:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002738:	2003      	movs	r0, #3
 800273a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800273c:	f7fe fbee 	bl	8000f1c <HAL_GetTick>
 8002740:	1bc0      	subs	r0, r0, r7
 8002742:	4285      	cmp	r5, r0
 8002744:	d2dd      	bcs.n	8002702 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8002746:	e7e6      	b.n	8002716 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08002748 <HAL_UART_Init>:
{
 8002748:	b510      	push	{r4, lr}
  if(huart == NULL)
 800274a:	4604      	mov	r4, r0
 800274c:	b340      	cbz	r0, 80027a0 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800274e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002752:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002756:	b91b      	cbnz	r3, 8002760 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002758:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800275c:	f000 fc3e 	bl	8002fdc <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002760:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002762:	2324      	movs	r3, #36	; 0x24
 8002764:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002768:	68d3      	ldr	r3, [r2, #12]
 800276a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800276e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002770:	4620      	mov	r0, r4
 8002772:	f7ff fea7 	bl	80024c4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002776:	6823      	ldr	r3, [r4, #0]
 8002778:	691a      	ldr	r2, [r3, #16]
 800277a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800277e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002780:	695a      	ldr	r2, [r3, #20]
 8002782:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002786:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800278e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002790:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8002792:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002794:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002796:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800279a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800279e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80027a0:	2001      	movs	r0, #1
}
 80027a2:	bd10      	pop	{r4, pc}

080027a4 <HAL_UART_Transmit>:
{
 80027a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027a8:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 80027aa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80027ae:	2b20      	cmp	r3, #32
{
 80027b0:	4604      	mov	r4, r0
 80027b2:	460d      	mov	r5, r1
 80027b4:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 80027b6:	d14f      	bne.n	8002858 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 80027b8:	2900      	cmp	r1, #0
 80027ba:	d04a      	beq.n	8002852 <HAL_UART_Transmit+0xae>
 80027bc:	2a00      	cmp	r2, #0
 80027be:	d048      	beq.n	8002852 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80027c0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d047      	beq.n	8002858 <HAL_UART_Transmit+0xb4>
 80027c8:	2301      	movs	r3, #1
 80027ca:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ce:	2300      	movs	r3, #0
 80027d0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027d2:	2321      	movs	r3, #33	; 0x21
 80027d4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80027d8:	f7fe fba0 	bl	8000f1c <HAL_GetTick>
    huart->TxXferSize = Size;
 80027dc:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80027e0:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80027e2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80027e6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	b96b      	cbnz	r3, 8002808 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027ec:	463b      	mov	r3, r7
 80027ee:	4632      	mov	r2, r6
 80027f0:	2140      	movs	r1, #64	; 0x40
 80027f2:	4620      	mov	r0, r4
 80027f4:	f7ff ff80 	bl	80026f8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80027f8:	b9b0      	cbnz	r0, 8002828 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 80027fa:	2320      	movs	r3, #32
 80027fc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002800:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8002804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002808:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800280a:	3b01      	subs	r3, #1
 800280c:	b29b      	uxth	r3, r3
 800280e:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002810:	68a3      	ldr	r3, [r4, #8]
 8002812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002816:	4632      	mov	r2, r6
 8002818:	463b      	mov	r3, r7
 800281a:	f04f 0180 	mov.w	r1, #128	; 0x80
 800281e:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002820:	d10e      	bne.n	8002840 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002822:	f7ff ff69 	bl	80026f8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002826:	b110      	cbz	r0, 800282e <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8002828:	2003      	movs	r0, #3
 800282a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800282e:	882b      	ldrh	r3, [r5, #0]
 8002830:	6822      	ldr	r2, [r4, #0]
 8002832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002836:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002838:	6923      	ldr	r3, [r4, #16]
 800283a:	b943      	cbnz	r3, 800284e <HAL_UART_Transmit+0xaa>
          pData +=2U;
 800283c:	3502      	adds	r5, #2
 800283e:	e7d2      	b.n	80027e6 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002840:	f7ff ff5a 	bl	80026f8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002844:	2800      	cmp	r0, #0
 8002846:	d1ef      	bne.n	8002828 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002848:	6823      	ldr	r3, [r4, #0]
 800284a:	782a      	ldrb	r2, [r5, #0]
 800284c:	605a      	str	r2, [r3, #4]
 800284e:	3501      	adds	r5, #1
 8002850:	e7c9      	b.n	80027e6 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002852:	2001      	movs	r0, #1
 8002854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8002858:	2002      	movs	r0, #2
}
 800285a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002860 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 8002862:	4855      	ldr	r0, [pc, #340]	; (80029b8 <MX_ADC1_Init+0x158>)
 8002864:	4b55      	ldr	r3, [pc, #340]	; (80029bc <MX_ADC1_Init+0x15c>)
 8002866:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002868:	2300      	movs	r3, #0
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ENABLE;
 800286a:	2201      	movs	r2, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800286c:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800286e:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002870:	6203      	str	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002872:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002874:	4952      	ldr	r1, [pc, #328]	; (80029c0 <MX_ADC1_Init+0x160>)
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002876:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 11;
 8002878:	230b      	movs	r3, #11
  hadc1.Init.ScanConvMode = ENABLE;
 800287a:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800287c:	6182      	str	r2, [r0, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800287e:	6281      	str	r1, [r0, #40]	; 0x28
  hadc1.Init.NbrOfConversion = 11;
 8002880:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002882:	6302      	str	r2, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002884:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002886:	f7fe fb4f 	bl	8000f28 <HAL_ADC_Init>
 800288a:	b118      	cbz	r0, 8002894 <MX_ADC1_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 800288c:	214a      	movs	r1, #74	; 0x4a
 800288e:	484d      	ldr	r0, [pc, #308]	; (80029c4 <MX_ADC1_Init+0x164>)
 8002890:	f000 fa22 	bl	8002cd8 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_3;
 8002894:	2303      	movs	r3, #3
 8002896:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002898:	4669      	mov	r1, sp
  sConfig.Rank = 1;
 800289a:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800289c:	4846      	ldr	r0, [pc, #280]	; (80029b8 <MX_ADC1_Init+0x158>)
  sConfig.Rank = 1;
 800289e:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80028a0:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028a2:	f7fe fca9 	bl	80011f8 <HAL_ADC_ConfigChannel>
 80028a6:	b118      	cbz	r0, 80028b0 <MX_ADC1_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 80028a8:	2154      	movs	r1, #84	; 0x54
 80028aa:	4846      	ldr	r0, [pc, #280]	; (80029c4 <MX_ADC1_Init+0x164>)
 80028ac:	f000 fa14 	bl	8002cd8 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_14;
  sConfig.Rank = 2;
 80028b0:	230e      	movs	r3, #14
 80028b2:	2402      	movs	r4, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028b4:	4669      	mov	r1, sp
 80028b6:	4840      	ldr	r0, [pc, #256]	; (80029b8 <MX_ADC1_Init+0x158>)
  sConfig.Rank = 2;
 80028b8:	e88d 0018 	stmia.w	sp, {r3, r4}
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028bc:	f7fe fc9c 	bl	80011f8 <HAL_ADC_ConfigChannel>
 80028c0:	b118      	cbz	r0, 80028ca <MX_ADC1_Init+0x6a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80028c2:	215d      	movs	r1, #93	; 0x5d
 80028c4:	483f      	ldr	r0, [pc, #252]	; (80029c4 <MX_ADC1_Init+0x164>)
 80028c6:	f000 fa07 	bl	8002cd8 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_2;
  sConfig.Rank = 3;
 80028ca:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028cc:	4669      	mov	r1, sp
 80028ce:	483a      	ldr	r0, [pc, #232]	; (80029b8 <MX_ADC1_Init+0x158>)
  sConfig.Channel = ADC_CHANNEL_2;
 80028d0:	9400      	str	r4, [sp, #0]
  sConfig.Rank = 3;
 80028d2:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028d4:	f7fe fc90 	bl	80011f8 <HAL_ADC_ConfigChannel>
 80028d8:	b118      	cbz	r0, 80028e2 <MX_ADC1_Init+0x82>
  {
    _Error_Handler(__FILE__, __LINE__);
 80028da:	2166      	movs	r1, #102	; 0x66
 80028dc:	4839      	ldr	r0, [pc, #228]	; (80029c4 <MX_ADC1_Init+0x164>)
 80028de:	f000 f9fb 	bl	8002cd8 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_15;
  sConfig.Rank = 4;
 80028e2:	220f      	movs	r2, #15
 80028e4:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028e6:	4669      	mov	r1, sp
 80028e8:	4833      	ldr	r0, [pc, #204]	; (80029b8 <MX_ADC1_Init+0x158>)
  sConfig.Rank = 4;
 80028ea:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028ee:	f7fe fc83 	bl	80011f8 <HAL_ADC_ConfigChannel>
 80028f2:	b118      	cbz	r0, 80028fc <MX_ADC1_Init+0x9c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80028f4:	216f      	movs	r1, #111	; 0x6f
 80028f6:	4833      	ldr	r0, [pc, #204]	; (80029c4 <MX_ADC1_Init+0x164>)
 80028f8:	f000 f9ee 	bl	8002cd8 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = 5;
 80028fc:	2301      	movs	r3, #1
 80028fe:	f04f 0c05 	mov.w	ip, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002902:	4669      	mov	r1, sp
 8002904:	482c      	ldr	r0, [pc, #176]	; (80029b8 <MX_ADC1_Init+0x158>)
  sConfig.Rank = 5;
 8002906:	e88d 1008 	stmia.w	sp, {r3, ip}
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800290a:	f7fe fc75 	bl	80011f8 <HAL_ADC_ConfigChannel>
 800290e:	b118      	cbz	r0, 8002918 <MX_ADC1_Init+0xb8>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002910:	2178      	movs	r1, #120	; 0x78
 8002912:	482c      	ldr	r0, [pc, #176]	; (80029c4 <MX_ADC1_Init+0x164>)
 8002914:	f000 f9e0 	bl	8002cd8 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_8;
  sConfig.Rank = 6;
 8002918:	2308      	movs	r3, #8
 800291a:	f04f 0e06 	mov.w	lr, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800291e:	4669      	mov	r1, sp
 8002920:	4825      	ldr	r0, [pc, #148]	; (80029b8 <MX_ADC1_Init+0x158>)
  sConfig.Rank = 6;
 8002922:	e88d 4008 	stmia.w	sp, {r3, lr}
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002926:	f7fe fc67 	bl	80011f8 <HAL_ADC_ConfigChannel>
 800292a:	b118      	cbz	r0, 8002934 <MX_ADC1_Init+0xd4>
  {
    _Error_Handler(__FILE__, __LINE__);
 800292c:	2181      	movs	r1, #129	; 0x81
 800292e:	4825      	ldr	r0, [pc, #148]	; (80029c4 <MX_ADC1_Init+0x164>)
 8002930:	f000 f9d2 	bl	8002cd8 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 7;
 8002934:	2300      	movs	r3, #0
 8002936:	2407      	movs	r4, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002938:	4669      	mov	r1, sp
 800293a:	481f      	ldr	r0, [pc, #124]	; (80029b8 <MX_ADC1_Init+0x158>)
  sConfig.Rank = 7;
 800293c:	e88d 0018 	stmia.w	sp, {r3, r4}
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002940:	f7fe fc5a 	bl	80011f8 <HAL_ADC_ConfigChannel>
 8002944:	b118      	cbz	r0, 800294e <MX_ADC1_Init+0xee>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002946:	218a      	movs	r1, #138	; 0x8a
 8002948:	481e      	ldr	r0, [pc, #120]	; (80029c4 <MX_ADC1_Init+0x164>)
 800294a:	f000 f9c5 	bl	8002cd8 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_9;
  sConfig.Rank = 8;
 800294e:	2009      	movs	r0, #9
 8002950:	2308      	movs	r3, #8
 8002952:	e88d 0009 	stmia.w	sp, {r0, r3}
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002956:	4669      	mov	r1, sp
 8002958:	4817      	ldr	r0, [pc, #92]	; (80029b8 <MX_ADC1_Init+0x158>)
 800295a:	f7fe fc4d 	bl	80011f8 <HAL_ADC_ConfigChannel>
 800295e:	b118      	cbz	r0, 8002968 <MX_ADC1_Init+0x108>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002960:	2193      	movs	r1, #147	; 0x93
 8002962:	4818      	ldr	r0, [pc, #96]	; (80029c4 <MX_ADC1_Init+0x164>)
 8002964:	f000 f9b8 	bl	8002cd8 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_10;
  sConfig.Rank = 9;
 8002968:	210a      	movs	r1, #10
 800296a:	2309      	movs	r3, #9
 800296c:	e88d 000a 	stmia.w	sp, {r1, r3}
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002970:	4811      	ldr	r0, [pc, #68]	; (80029b8 <MX_ADC1_Init+0x158>)
 8002972:	4669      	mov	r1, sp
 8002974:	f7fe fc40 	bl	80011f8 <HAL_ADC_ConfigChannel>
 8002978:	b118      	cbz	r0, 8002982 <MX_ADC1_Init+0x122>
  {
    _Error_Handler(__FILE__, __LINE__);
 800297a:	219c      	movs	r1, #156	; 0x9c
 800297c:	4811      	ldr	r0, [pc, #68]	; (80029c4 <MX_ADC1_Init+0x164>)
 800297e:	f000 f9ab 	bl	8002cd8 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_4;
  sConfig.Rank = 10;
 8002982:	2204      	movs	r2, #4
 8002984:	230a      	movs	r3, #10
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002986:	4669      	mov	r1, sp
 8002988:	480b      	ldr	r0, [pc, #44]	; (80029b8 <MX_ADC1_Init+0x158>)
  sConfig.Rank = 10;
 800298a:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800298e:	f7fe fc33 	bl	80011f8 <HAL_ADC_ConfigChannel>
 8002992:	b118      	cbz	r0, 800299c <MX_ADC1_Init+0x13c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002994:	21a5      	movs	r1, #165	; 0xa5
 8002996:	480b      	ldr	r0, [pc, #44]	; (80029c4 <MX_ADC1_Init+0x164>)
 8002998:	f000 f99e 	bl	8002cd8 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_11;
 800299c:	230b      	movs	r3, #11
  sConfig.Rank = 11;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800299e:	4669      	mov	r1, sp
 80029a0:	4805      	ldr	r0, [pc, #20]	; (80029b8 <MX_ADC1_Init+0x158>)
  sConfig.Channel = ADC_CHANNEL_11;
 80029a2:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 11;
 80029a4:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029a6:	f7fe fc27 	bl	80011f8 <HAL_ADC_ConfigChannel>
 80029aa:	b118      	cbz	r0, 80029b4 <MX_ADC1_Init+0x154>
  {
    _Error_Handler(__FILE__, __LINE__);
 80029ac:	21ae      	movs	r1, #174	; 0xae
 80029ae:	4805      	ldr	r0, [pc, #20]	; (80029c4 <MX_ADC1_Init+0x164>)
 80029b0:	f000 f992 	bl	8002cd8 <_Error_Handler>
  }

}
 80029b4:	b004      	add	sp, #16
 80029b6:	bd10      	pop	{r4, pc}
 80029b8:	200006cc 	.word	0x200006cc
 80029bc:	40012000 	.word	0x40012000
 80029c0:	0f000001 	.word	0x0f000001
 80029c4:	08005ee8 	.word	0x08005ee8

080029c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80029c8:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 80029ca:	6802      	ldr	r2, [r0, #0]
 80029cc:	4b24      	ldr	r3, [pc, #144]	; (8002a60 <HAL_ADC_MspInit+0x98>)
 80029ce:	429a      	cmp	r2, r3
{
 80029d0:	b086      	sub	sp, #24
 80029d2:	4606      	mov	r6, r0
  if(adcHandle->Instance==ADC1)
 80029d4:	d142      	bne.n	8002a5c <HAL_ADC_MspInit+0x94>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029d6:	2500      	movs	r5, #0
 80029d8:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80029dc:	9500      	str	r5, [sp, #0]
 80029de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = B8_Pin|B10_Pin|B1_Pin|B3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029e0:	4820      	ldr	r0, [pc, #128]	; (8002a64 <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029e6:	645a      	str	r2, [r3, #68]	; 0x44
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ea:	9503      	str	r5, [sp, #12]
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f0:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029f2:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029f4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029f6:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pin = B8_Pin|B10_Pin|B1_Pin|B3_Pin;
 80029f8:	2333      	movs	r3, #51	; 0x33
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029fa:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = B8_Pin|B10_Pin|B1_Pin|B3_Pin;
 80029fc:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029fe:	f7fe fe97 	bl	8001730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B6_Pin|B4_Pin|B2_Pin|B0_Pin 
 8002a02:	231f      	movs	r3, #31
                          |B9_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a04:	a901      	add	r1, sp, #4
 8002a06:	4818      	ldr	r0, [pc, #96]	; (8002a68 <HAL_ADC_MspInit+0xa0>)
    GPIO_InitStruct.Pin = B6_Pin|B4_Pin|B2_Pin|B0_Pin 
 8002a08:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a0a:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0c:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a0e:	f7fe fe8f 	bl	8001730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|B7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a12:	4816      	ldr	r0, [pc, #88]	; (8002a6c <HAL_ADC_MspInit+0xa4>)
    GPIO_InitStruct.Pin = B5_Pin|B7_Pin;
 8002a14:	9401      	str	r4, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a16:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a18:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1a:	9503      	str	r5, [sp, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002a1c:	4c14      	ldr	r4, [pc, #80]	; (8002a70 <HAL_ADC_MspInit+0xa8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a1e:	f7fe fe87 	bl	8001730 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8002a22:	4b14      	ldr	r3, [pc, #80]	; (8002a74 <HAL_ADC_MspInit+0xac>)
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a24:	60a5      	str	r5, [r4, #8]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002a26:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002a2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a2e:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a34:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a3a:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002a3c:	4620      	mov	r0, r4
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002a3e:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a42:	60e5      	str	r5, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002a44:	61e3      	str	r3, [r4, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002a46:	6225      	str	r5, [r4, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a48:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002a4a:	f7fe fcfb 	bl	8001444 <HAL_DMA_Init>
 8002a4e:	b118      	cbz	r0, 8002a58 <HAL_ADC_MspInit+0x90>
    {
      _Error_Handler(__FILE__, __LINE__);
 8002a50:	21ea      	movs	r1, #234	; 0xea
 8002a52:	4809      	ldr	r0, [pc, #36]	; (8002a78 <HAL_ADC_MspInit+0xb0>)
 8002a54:	f000 f940 	bl	8002cd8 <_Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002a58:	63b4      	str	r4, [r6, #56]	; 0x38
 8002a5a:	63a6      	str	r6, [r4, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002a5c:	b006      	add	sp, #24
 8002a5e:	bd70      	pop	{r4, r5, r6, pc}
 8002a60:	40012000 	.word	0x40012000
 8002a64:	40020800 	.word	0x40020800
 8002a68:	40020000 	.word	0x40020000
 8002a6c:	40020400 	.word	0x40020400
 8002a70:	20000714 	.word	0x20000714
 8002a74:	40026410 	.word	0x40026410
 8002a78:	08005ee8 	.word	0x08005ee8

08002a7c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8002a7c:	b507      	push	{r0, r1, r2, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002a7e:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <MX_DMA_Init+0x30>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	9201      	str	r2, [sp, #4]
 8002a84:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a86:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8002a8a:	6319      	str	r1, [r3, #48]	; 0x30
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a92:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002a94:	4611      	mov	r1, r2
 8002a96:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002a98:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002a9a:	f7fe fc55 	bl	8001348 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002a9e:	2038      	movs	r0, #56	; 0x38
 8002aa0:	f7fe fc86 	bl	80013b0 <HAL_NVIC_EnableIRQ>

}
 8002aa4:	b003      	add	sp, #12
 8002aa6:	f85d fb04 	ldr.w	pc, [sp], #4
 8002aaa:	bf00      	nop
 8002aac:	40023800 	.word	0x40023800

08002ab0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002ab0:	b570      	push	{r4, r5, r6, lr}
 8002ab2:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ab4:	4b2c      	ldr	r3, [pc, #176]	; (8002b68 <MX_GPIO_Init+0xb8>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, D1_Pin|D2_Pin, GPIO_PIN_RESET);
 8002ab6:	4e2d      	ldr	r6, [pc, #180]	; (8002b6c <MX_GPIO_Init+0xbc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ab8:	2400      	movs	r4, #0
 8002aba:	9400      	str	r4, [sp, #0]
 8002abc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002abe:	f042 0204 	orr.w	r2, r2, #4
 8002ac2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ac6:	f002 0204 	and.w	r2, r2, #4
 8002aca:	9200      	str	r2, [sp, #0]
 8002acc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ace:	9401      	str	r4, [sp, #4]
 8002ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ad8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ada:	f002 0201 	and.w	r2, r2, #1
 8002ade:	9201      	str	r2, [sp, #4]
 8002ae0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae2:	9402      	str	r4, [sp, #8]
 8002ae4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ae6:	f042 0202 	orr.w	r2, r2, #2
 8002aea:	631a      	str	r2, [r3, #48]	; 0x30
 8002aec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aee:	f002 0202 	and.w	r2, r2, #2
 8002af2:	9202      	str	r2, [sp, #8]
 8002af4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002af6:	9403      	str	r4, [sp, #12]
 8002af8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002afa:	f042 0210 	orr.w	r2, r2, #16
 8002afe:	631a      	str	r2, [r3, #48]	; 0x30
 8002b00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b02:	f002 0210 	and.w	r2, r2, #16
 8002b06:	9203      	str	r2, [sp, #12]
 8002b08:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b0a:	9404      	str	r4, [sp, #16]
 8002b0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b0e:	f042 0208 	orr.w	r2, r2, #8
 8002b12:	631a      	str	r2, [r3, #48]	; 0x30
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOE, D1_Pin|D2_Pin, GPIO_PIN_RESET);
 8002b1a:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b1c:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOE, D1_Pin|D2_Pin, GPIO_PIN_RESET);
 8002b1e:	4630      	mov	r0, r6
 8002b20:	f44f 71c0 	mov.w	r1, #384	; 0x180

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b24:	2501      	movs	r5, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b26:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOE, D1_Pin|D2_Pin, GPIO_PIN_RESET);
 8002b28:	f7fe fee2 	bl	80018f0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SW1_Pin;
 8002b2c:	2304      	movs	r3, #4
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8002b2e:	a905      	add	r1, sp, #20
 8002b30:	480f      	ldr	r0, [pc, #60]	; (8002b70 <MX_GPIO_Init+0xc0>)
  GPIO_InitStruct.Pin = SW1_Pin;
 8002b32:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b34:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b36:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8002b38:	f7fe fdfa 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = D1_Pin|D2_Pin;
 8002b3c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002b40:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b42:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b44:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b46:	4630      	mov	r0, r6
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b48:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b4a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b4e:	f7fe fdef 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = SW4_Pin|SW3_Pin|SW2_Pin;
 8002b52:	2338      	movs	r3, #56	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b54:	a905      	add	r1, sp, #20
 8002b56:	4807      	ldr	r0, [pc, #28]	; (8002b74 <MX_GPIO_Init+0xc4>)
  GPIO_InitStruct.Pin = SW4_Pin|SW3_Pin|SW2_Pin;
 8002b58:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b5a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b5c:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b5e:	f7fe fde7 	bl	8001730 <HAL_GPIO_Init>

}
 8002b62:	b00a      	add	sp, #40	; 0x28
 8002b64:	bd70      	pop	{r4, r5, r6, pc}
 8002b66:	bf00      	nop
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	40020800 	.word	0x40020800
 8002b74:	40020c00 	.word	0x40020c00

08002b78 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002b78:	b510      	push	{r4, lr}
 8002b7a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	4a21      	ldr	r2, [pc, #132]	; (8002c04 <SystemClock_Config+0x8c>)
 8002b80:	9301      	str	r3, [sp, #4]
 8002b82:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002b84:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002b88:	6411      	str	r1, [r2, #64]	; 0x40
 8002b8a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b8c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002b90:	9201      	str	r2, [sp, #4]
 8002b92:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b94:	4a1c      	ldr	r2, [pc, #112]	; (8002c08 <SystemClock_Config+0x90>)
 8002b96:	9302      	str	r3, [sp, #8]
 8002b98:	6811      	ldr	r1, [r2, #0]
 8002b9a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002b9e:	6011      	str	r1, [r2, #0]
 8002ba0:	6812      	ldr	r2, [r2, #0]
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002ba2:	930e      	str	r3, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ba4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002ba8:	9202      	str	r2, [sp, #8]
 8002baa:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002bac:	2202      	movs	r2, #2
 8002bae:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bb4:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002bb6:	2210      	movs	r2, #16
 8002bb8:	920c      	str	r2, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bba:	f7fe fe9f 	bl	80018fc <HAL_RCC_OscConfig>
 8002bbe:	4601      	mov	r1, r0
 8002bc0:	b100      	cbz	r0, 8002bc4 <SystemClock_Config+0x4c>
 8002bc2:	e7fe      	b.n	8002bc2 <SystemClock_Config+0x4a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bc4:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002bc6:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bc8:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002bca:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bcc:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002bce:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bd0:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002bd2:	f7ff f837 	bl	8001c44 <HAL_RCC_ClockConfig>
 8002bd6:	4604      	mov	r4, r0
 8002bd8:	b100      	cbz	r0, 8002bdc <SystemClock_Config+0x64>
 8002bda:	e7fe      	b.n	8002bda <SystemClock_Config+0x62>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002bdc:	f7ff f8cc 	bl	8001d78 <HAL_RCC_GetHCLKFreq>
 8002be0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002be4:	fbb0 f0f3 	udiv	r0, r0, r3
 8002be8:	f7fe fbee 	bl	80013c8 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002bec:	2004      	movs	r0, #4
 8002bee:	f7fe fc01 	bl	80013f4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002bf2:	4622      	mov	r2, r4
 8002bf4:	4621      	mov	r1, r4
 8002bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8002bfa:	f7fe fba5 	bl	8001348 <HAL_NVIC_SetPriority>
}
 8002bfe:	b014      	add	sp, #80	; 0x50
 8002c00:	bd10      	pop	{r4, pc}
 8002c02:	bf00      	nop
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40007000 	.word	0x40007000

08002c0c <main>:
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b09e      	sub	sp, #120	; 0x78
  HAL_Init();
 8002c10:	f7fe f962 	bl	8000ed8 <HAL_Init>
  SystemClock_Config();
 8002c14:	f7ff ffb0 	bl	8002b78 <SystemClock_Config>
  MX_GPIO_Init();
 8002c18:	f7ff ff4a 	bl	8002ab0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002c1c:	f7ff ff2e 	bl	8002a7c <MX_DMA_Init>
  MX_ADC1_Init();
 8002c20:	f7ff fe1e 	bl	8002860 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002c24:	f000 f948 	bl	8002eb8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002c28:	f000 f8c8 	bl	8002dbc <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8002c2c:	f000 f9b6 	bl	8002f9c <MX_USART3_UART_Init>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)lectura_adc,11);
 8002c30:	220b      	movs	r2, #11
 8002c32:	4923      	ldr	r1, [pc, #140]	; (8002cc0 <main+0xb4>)
 8002c34:	4823      	ldr	r0, [pc, #140]	; (8002cc4 <main+0xb8>)
	   	 b[0]=(lectura_adc[0]);
 8002c36:	4d22      	ldr	r5, [pc, #136]	; (8002cc0 <main+0xb4>)
 8002c38:	4c23      	ldr	r4, [pc, #140]	; (8002cc8 <main+0xbc>)
	       sprintf(buffer,"%d %d  %d %d %d %d %d %d %d %d %d \n\n\n\r",b[10],b[8],b[6],b[4],b[2],b[0],b[1],b[3],b[5],b[7],b[9]);
 8002c3a:	4f24      	ldr	r7, [pc, #144]	; (8002ccc <main+0xc0>)
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)lectura_adc,11);
 8002c3c:	f7fe fa18 	bl	8001070 <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8002c40:	2104      	movs	r1, #4
 8002c42:	4823      	ldr	r0, [pc, #140]	; (8002cd0 <main+0xc4>)
 8002c44:	f7ff fbda 	bl	80023fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8002c48:	2108      	movs	r1, #8
 8002c4a:	4821      	ldr	r0, [pc, #132]	; (8002cd0 <main+0xc4>)
 8002c4c:	f7ff fbd6 	bl	80023fc <HAL_TIM_PWM_Start>
	   	 b[4]=(lectura_adc[4]);
 8002c50:	8929      	ldrh	r1, [r5, #8]
	   	 b[0]=(lectura_adc[0]);
 8002c52:	f8b5 e000 	ldrh.w	lr, [r5]
	   	 b[6]=(lectura_adc[6]);
 8002c56:	89a8      	ldrh	r0, [r5, #12]
	   	 b[2]=(lectura_adc[2]);
 8002c58:	88ae      	ldrh	r6, [r5, #4]
	   	 b[1]=(lectura_adc[1]);
 8002c5a:	f8b5 c002 	ldrh.w	ip, [r5, #2]
	   	 b[8]=(lectura_adc[8]);
 8002c5e:	8a2b      	ldrh	r3, [r5, #16]
	   	 b[10]=(lectura_adc[10]);
 8002c60:	8aaa      	ldrh	r2, [r5, #20]
	   	 b[3]=(lectura_adc[3]);
 8002c62:	f8b5 8006 	ldrh.w	r8, [r5, #6]
	   	 b[5]=(lectura_adc[5]);
 8002c66:	f8b5 900a 	ldrh.w	r9, [r5, #10]
	   	 b[7]=(lectura_adc[7]);
 8002c6a:	f8b5 a00e 	ldrh.w	sl, [r5, #14]
	   	 b[4]=(lectura_adc[4]);
 8002c6e:	6121      	str	r1, [r4, #16]
	       sprintf(buffer,"%d %d  %d %d %d %d %d %d %d %d %d \n\n\n\r",b[10],b[8],b[6],b[4],b[2],b[0],b[1],b[3],b[5],b[7],b[9]);
 8002c70:	e88d 4043 	stmia.w	sp, {r0, r1, r6, lr}
	   	 b[6]=(lectura_adc[6]);
 8002c74:	61a0      	str	r0, [r4, #24]
	   	 b[9]=(lectura_adc[4]);
 8002c76:	6261      	str	r1, [r4, #36]	; 0x24
	       sprintf(buffer,"%d %d  %d %d %d %d %d %d %d %d %d \n\n\n\r",b[10],b[8],b[6],b[4],b[2],b[0],b[1],b[3],b[5],b[7],b[9]);
 8002c78:	9108      	str	r1, [sp, #32]
 8002c7a:	a80a      	add	r0, sp, #40	; 0x28
 8002c7c:	4639      	mov	r1, r7
	   	 b[8]=(lectura_adc[8]);
 8002c7e:	6223      	str	r3, [r4, #32]
	   	 b[10]=(lectura_adc[10]);
 8002c80:	62a2      	str	r2, [r4, #40]	; 0x28
	   	 b[0]=(lectura_adc[0]);
 8002c82:	f8c4 e000 	str.w	lr, [r4]
	   	 b[1]=(lectura_adc[1]);
 8002c86:	f8c4 c004 	str.w	ip, [r4, #4]
	       sprintf(buffer,"%d %d  %d %d %d %d %d %d %d %d %d \n\n\n\r",b[10],b[8],b[6],b[4],b[2],b[0],b[1],b[3],b[5],b[7],b[9]);
 8002c8a:	f8cd c010 	str.w	ip, [sp, #16]
	   	 b[2]=(lectura_adc[2]);
 8002c8e:	60a6      	str	r6, [r4, #8]
	   	 b[3]=(lectura_adc[3]);
 8002c90:	f8c4 800c 	str.w	r8, [r4, #12]
	   	 b[5]=(lectura_adc[5]);
 8002c94:	f8c4 9014 	str.w	r9, [r4, #20]
	   	 b[7]=(lectura_adc[7]);
 8002c98:	f8c4 a01c 	str.w	sl, [r4, #28]
	       sprintf(buffer,"%d %d  %d %d %d %d %d %d %d %d %d \n\n\n\r",b[10],b[8],b[6],b[4],b[2],b[0],b[1],b[3],b[5],b[7],b[9]);
 8002c9c:	f8cd a01c 	str.w	sl, [sp, #28]
 8002ca0:	f8cd 9018 	str.w	r9, [sp, #24]
 8002ca4:	f8cd 8014 	str.w	r8, [sp, #20]
 8002ca8:	f000 fa10 	bl	80030cc <sprintf>
	       HAL_UART_Transmit(&huart3,(uint8_t*)buffer,(uint16_t)strlen(buffer),(uint32_t)100);
 8002cac:	a80a      	add	r0, sp, #40	; 0x28
 8002cae:	f7fd fa8f 	bl	80001d0 <strlen>
 8002cb2:	2364      	movs	r3, #100	; 0x64
 8002cb4:	b282      	uxth	r2, r0
 8002cb6:	a90a      	add	r1, sp, #40	; 0x28
 8002cb8:	4806      	ldr	r0, [pc, #24]	; (8002cd4 <main+0xc8>)
 8002cba:	f7ff fd73 	bl	80027a4 <HAL_UART_Transmit>
 8002cbe:	e7c7      	b.n	8002c50 <main+0x44>
 8002cc0:	200007a0 	.word	0x200007a0
 8002cc4:	200006cc 	.word	0x200006cc
 8002cc8:	20000774 	.word	0x20000774
 8002ccc:	08005ef5 	.word	0x08005ef5
 8002cd0:	200007b8 	.word	0x200007b8
 8002cd4:	20000830 	.word	0x20000830

08002cd8 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8002cd8:	e7fe      	b.n	8002cd8 <_Error_Handler>

08002cda <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cda:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cdc:	2003      	movs	r0, #3
 8002cde:	f7fe fb21 	bl	8001324 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	4611      	mov	r1, r2
 8002ce6:	f06f 000b 	mvn.w	r0, #11
 8002cea:	f7fe fb2d 	bl	8001348 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002cee:	2200      	movs	r2, #0
 8002cf0:	4611      	mov	r1, r2
 8002cf2:	f06f 000a 	mvn.w	r0, #10
 8002cf6:	f7fe fb27 	bl	8001348 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	f06f 0009 	mvn.w	r0, #9
 8002d02:	f7fe fb21 	bl	8001348 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002d06:	2200      	movs	r2, #0
 8002d08:	4611      	mov	r1, r2
 8002d0a:	f06f 0004 	mvn.w	r0, #4
 8002d0e:	f7fe fb1b 	bl	8001348 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002d12:	2200      	movs	r2, #0
 8002d14:	4611      	mov	r1, r2
 8002d16:	f06f 0003 	mvn.w	r0, #3
 8002d1a:	f7fe fb15 	bl	8001348 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002d1e:	2200      	movs	r2, #0
 8002d20:	4611      	mov	r1, r2
 8002d22:	f06f 0001 	mvn.w	r0, #1
 8002d26:	f7fe fb0f 	bl	8001348 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	4611      	mov	r1, r2
 8002d2e:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002d36:	f7fe bb07 	b.w	8001348 <HAL_NVIC_SetPriority>

08002d3a <NMI_Handler>:
 8002d3a:	4770      	bx	lr

08002d3c <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002d3c:	e7fe      	b.n	8002d3c <HardFault_Handler>

08002d3e <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002d3e:	e7fe      	b.n	8002d3e <MemManage_Handler>

08002d40 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002d40:	e7fe      	b.n	8002d40 <BusFault_Handler>

08002d42 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002d42:	e7fe      	b.n	8002d42 <UsageFault_Handler>

08002d44 <SVC_Handler>:
 8002d44:	4770      	bx	lr

08002d46 <DebugMon_Handler>:
 8002d46:	4770      	bx	lr

08002d48 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002d48:	4770      	bx	lr

08002d4a <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002d4a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d4c:	f7fe f8de 	bl	8000f0c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002d54:	f7fe bb5b 	b.w	800140e <HAL_SYSTICK_IRQHandler>

08002d58 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d58:	4801      	ldr	r0, [pc, #4]	; (8002d60 <TIM2_IRQHandler+0x8>)
 8002d5a:	f7ff b976 	b.w	800204a <HAL_TIM_IRQHandler>
 8002d5e:	bf00      	nop
 8002d60:	200007f4 	.word	0x200007f4

08002d64 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002d64:	4801      	ldr	r0, [pc, #4]	; (8002d6c <DMA2_Stream0_IRQHandler+0x8>)
 8002d66:	f7fe bc29 	b.w	80015bc <HAL_DMA_IRQHandler>
 8002d6a:	bf00      	nop
 8002d6c:	20000714 	.word	0x20000714

08002d70 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d70:	490f      	ldr	r1, [pc, #60]	; (8002db0 <SystemInit+0x40>)
 8002d72:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002d76:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002d7e:	4b0d      	ldr	r3, [pc, #52]	; (8002db4 <SystemInit+0x44>)
 8002d80:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002d82:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002d84:	f042 0201 	orr.w	r2, r2, #1
 8002d88:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002d8a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002d92:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d96:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002d98:	4a07      	ldr	r2, [pc, #28]	; (8002db8 <SystemInit+0x48>)
 8002d9a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002da2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002da4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002da6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002daa:	608b      	str	r3, [r1, #8]
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	e000ed00 	.word	0xe000ed00
 8002db4:	40023800 	.word	0x40023800
 8002db8:	24003010 	.word	0x24003010

08002dbc <MX_TIM2_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002dbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 8002dbe:	4817      	ldr	r0, [pc, #92]	; (8002e1c <MX_TIM2_Init+0x60>)
  htim2.Init.Prescaler = 15;
 8002dc0:	230f      	movs	r3, #15
 8002dc2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002dc6:	e880 000a 	stmia.w	r0, {r1, r3}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 499;
 8002dca:	f240 12f3 	movw	r2, #499	; 0x1f3
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 499;
 8002dd2:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dd4:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002dd6:	f7ff fa3f 	bl	8002258 <HAL_TIM_Base_Init>
 8002dda:	b118      	cbz	r0, 8002de4 <MX_TIM2_Init+0x28>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002ddc:	2184      	movs	r1, #132	; 0x84
 8002dde:	4810      	ldr	r0, [pc, #64]	; (8002e20 <MX_TIM2_Init+0x64>)
 8002de0:	f7ff ff7a 	bl	8002cd8 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002de4:	a906      	add	r1, sp, #24
 8002de6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dea:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002dee:	480b      	ldr	r0, [pc, #44]	; (8002e1c <MX_TIM2_Init+0x60>)
 8002df0:	f7ff f86d 	bl	8001ece <HAL_TIM_ConfigClockSource>
 8002df4:	b118      	cbz	r0, 8002dfe <MX_TIM2_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002df6:	218a      	movs	r1, #138	; 0x8a
 8002df8:	4809      	ldr	r0, [pc, #36]	; (8002e20 <MX_TIM2_Init+0x64>)
 8002dfa:	f7ff ff6d 	bl	8002cd8 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dfe:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e00:	4669      	mov	r1, sp
 8002e02:	4806      	ldr	r0, [pc, #24]	; (8002e1c <MX_TIM2_Init+0x60>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e04:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e06:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e08:	f7ff fb12 	bl	8002430 <HAL_TIMEx_MasterConfigSynchronization>
 8002e0c:	b118      	cbz	r0, 8002e16 <MX_TIM2_Init+0x5a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002e0e:	2191      	movs	r1, #145	; 0x91
 8002e10:	4803      	ldr	r0, [pc, #12]	; (8002e20 <MX_TIM2_Init+0x64>)
 8002e12:	f7ff ff61 	bl	8002cd8 <_Error_Handler>
  }

}
 8002e16:	b007      	add	sp, #28
 8002e18:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e1c:	200007f4 	.word	0x200007f4
 8002e20:	08005f34 	.word	0x08005f34

08002e24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e24:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM1)
 8002e26:	6803      	ldr	r3, [r0, #0]
 8002e28:	4a14      	ldr	r2, [pc, #80]	; (8002e7c <HAL_TIM_Base_MspInit+0x58>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d10e      	bne.n	8002e4c <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	4b13      	ldr	r3, [pc, #76]	; (8002e80 <HAL_TIM_Base_MspInit+0x5c>)
 8002e34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e36:	f042 0201 	orr.w	r2, r2, #1
 8002e3a:	645a      	str	r2, [r3, #68]	; 0x44
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002e46:	b003      	add	sp, #12
 8002e48:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM2)
 8002e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e50:	d1f9      	bne.n	8002e46 <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e52:	2200      	movs	r2, #0
 8002e54:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002e58:	9201      	str	r2, [sp, #4]
 8002e5a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002e5c:	f041 0101 	orr.w	r1, r1, #1
 8002e60:	6419      	str	r1, [r3, #64]	; 0x40
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e6e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e70:	f7fe fa6a 	bl	8001348 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e74:	201c      	movs	r0, #28
 8002e76:	f7fe fa9b 	bl	80013b0 <HAL_NVIC_EnableIRQ>
}
 8002e7a:	e7e4      	b.n	8002e46 <HAL_TIM_Base_MspInit+0x22>
 8002e7c:	40010000 	.word	0x40010000
 8002e80:	40023800 	.word	0x40023800

08002e84 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002e84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 8002e86:	6802      	ldr	r2, [r0, #0]
 8002e88:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <HAL_TIM_MspPostInit+0x2c>)
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d10d      	bne.n	8002eaa <HAL_TIM_MspPostInit+0x26>
  
    /**TIM1 GPIO Configuration    
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 8002e8e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002e92:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e94:	2302      	movs	r3, #2
 8002e96:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e9c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e9e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ea0:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ea2:	4804      	ldr	r0, [pc, #16]	; (8002eb4 <HAL_TIM_MspPostInit+0x30>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ea4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ea6:	f7fe fc43 	bl	8001730 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002eaa:	b007      	add	sp, #28
 8002eac:	f85d fb04 	ldr.w	pc, [sp], #4
 8002eb0:	40010000 	.word	0x40010000
 8002eb4:	40021000 	.word	0x40021000

08002eb8 <MX_TIM1_Init>:
{
 8002eb8:	b510      	push	{r4, lr}
  htim1.Instance = TIM1;
 8002eba:	4835      	ldr	r0, [pc, #212]	; (8002f90 <MX_TIM1_Init+0xd8>)
  htim1.Init.Prescaler = 15;
 8002ebc:	4a35      	ldr	r2, [pc, #212]	; (8002f94 <MX_TIM1_Init+0xdc>)
 8002ebe:	230f      	movs	r3, #15
 8002ec0:	e880 000c 	stmia.w	r0, {r2, r3}
{
 8002ec4:	b094      	sub	sp, #80	; 0x50
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ec6:	2300      	movs	r3, #0
  htim1.Init.Period = 1000;
 8002ec8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ecc:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 1000;
 8002ece:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ed0:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ed2:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002ed4:	f7ff f9c0 	bl	8002258 <HAL_TIM_Base_Init>
 8002ed8:	b118      	cbz	r0, 8002ee2 <MX_TIM1_Init+0x2a>
    _Error_Handler(__FILE__, __LINE__);
 8002eda:	2142      	movs	r1, #66	; 0x42
 8002edc:	482e      	ldr	r0, [pc, #184]	; (8002f98 <MX_TIM1_Init+0xe0>)
 8002ede:	f7ff fefb 	bl	8002cd8 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ee2:	a914      	add	r1, sp, #80	; 0x50
 8002ee4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ee8:	f841 3d48 	str.w	r3, [r1, #-72]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002eec:	4828      	ldr	r0, [pc, #160]	; (8002f90 <MX_TIM1_Init+0xd8>)
 8002eee:	f7fe ffee 	bl	8001ece <HAL_TIM_ConfigClockSource>
 8002ef2:	b118      	cbz	r0, 8002efc <MX_TIM1_Init+0x44>
    _Error_Handler(__FILE__, __LINE__);
 8002ef4:	2148      	movs	r1, #72	; 0x48
 8002ef6:	4828      	ldr	r0, [pc, #160]	; (8002f98 <MX_TIM1_Init+0xe0>)
 8002ef8:	f7ff feee 	bl	8002cd8 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002efc:	4824      	ldr	r0, [pc, #144]	; (8002f90 <MX_TIM1_Init+0xd8>)
 8002efe:	f7ff f9c5 	bl	800228c <HAL_TIM_PWM_Init>
 8002f02:	b118      	cbz	r0, 8002f0c <MX_TIM1_Init+0x54>
    _Error_Handler(__FILE__, __LINE__);
 8002f04:	214d      	movs	r1, #77	; 0x4d
 8002f06:	4824      	ldr	r0, [pc, #144]	; (8002f98 <MX_TIM1_Init+0xe0>)
 8002f08:	f7ff fee6 	bl	8002cd8 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f0c:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f0e:	4669      	mov	r1, sp
 8002f10:	481f      	ldr	r0, [pc, #124]	; (8002f90 <MX_TIM1_Init+0xd8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f12:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f14:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f16:	f7ff fa8b 	bl	8002430 <HAL_TIMEx_MasterConfigSynchronization>
 8002f1a:	b118      	cbz	r0, 8002f24 <MX_TIM1_Init+0x6c>
    _Error_Handler(__FILE__, __LINE__);
 8002f1c:	2154      	movs	r1, #84	; 0x54
 8002f1e:	481e      	ldr	r0, [pc, #120]	; (8002f98 <MX_TIM1_Init+0xe0>)
 8002f20:	f7ff feda 	bl	8002cd8 <_Error_Handler>
  sConfigOC.Pulse = 0;
 8002f24:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f26:	2460      	movs	r4, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f28:	2204      	movs	r2, #4
 8002f2a:	a906      	add	r1, sp, #24
 8002f2c:	4818      	ldr	r0, [pc, #96]	; (8002f90 <MX_TIM1_Init+0xd8>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f2e:	9406      	str	r4, [sp, #24]
  sConfigOC.Pulse = 0;
 8002f30:	9307      	str	r3, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f32:	9308      	str	r3, [sp, #32]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002f34:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f36:	930a      	str	r3, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f38:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f3a:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f3c:	f7ff f9f0 	bl	8002320 <HAL_TIM_PWM_ConfigChannel>
 8002f40:	b118      	cbz	r0, 8002f4a <MX_TIM1_Init+0x92>
    _Error_Handler(__FILE__, __LINE__);
 8002f42:	4621      	mov	r1, r4
 8002f44:	4814      	ldr	r0, [pc, #80]	; (8002f98 <MX_TIM1_Init+0xe0>)
 8002f46:	f7ff fec7 	bl	8002cd8 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f4a:	2208      	movs	r2, #8
 8002f4c:	a906      	add	r1, sp, #24
 8002f4e:	4810      	ldr	r0, [pc, #64]	; (8002f90 <MX_TIM1_Init+0xd8>)
 8002f50:	f7ff f9e6 	bl	8002320 <HAL_TIM_PWM_ConfigChannel>
 8002f54:	b118      	cbz	r0, 8002f5e <MX_TIM1_Init+0xa6>
    _Error_Handler(__FILE__, __LINE__);
 8002f56:	2165      	movs	r1, #101	; 0x65
 8002f58:	480f      	ldr	r0, [pc, #60]	; (8002f98 <MX_TIM1_Init+0xe0>)
 8002f5a:	f7ff febd 	bl	8002cd8 <_Error_Handler>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f5e:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002f60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002f64:	a90d      	add	r1, sp, #52	; 0x34
 8002f66:	480a      	ldr	r0, [pc, #40]	; (8002f90 <MX_TIM1_Init+0xd8>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f68:	930d      	str	r3, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f6a:	930e      	str	r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f6c:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 8002f6e:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002f70:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002f72:	9212      	str	r2, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f74:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002f76:	f7ff fa7d 	bl	8002474 <HAL_TIMEx_ConfigBreakDeadTime>
 8002f7a:	b118      	cbz	r0, 8002f84 <MX_TIM1_Init+0xcc>
    _Error_Handler(__FILE__, __LINE__);
 8002f7c:	2171      	movs	r1, #113	; 0x71
 8002f7e:	4806      	ldr	r0, [pc, #24]	; (8002f98 <MX_TIM1_Init+0xe0>)
 8002f80:	f7ff feaa 	bl	8002cd8 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8002f84:	4802      	ldr	r0, [pc, #8]	; (8002f90 <MX_TIM1_Init+0xd8>)
 8002f86:	f7ff ff7d 	bl	8002e84 <HAL_TIM_MspPostInit>
}
 8002f8a:	b014      	add	sp, #80	; 0x50
 8002f8c:	bd10      	pop	{r4, pc}
 8002f8e:	bf00      	nop
 8002f90:	200007b8 	.word	0x200007b8
 8002f94:	40010000 	.word	0x40010000
 8002f98:	08005f34 	.word	0x08005f34

08002f9c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002f9c:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 8002f9e:	480c      	ldr	r0, [pc, #48]	; (8002fd0 <MX_USART3_UART_Init+0x34>)
  huart3.Init.BaudRate = 115200;
 8002fa0:	4b0c      	ldr	r3, [pc, #48]	; (8002fd4 <MX_USART3_UART_Init+0x38>)
 8002fa2:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8002fa6:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002faa:	220c      	movs	r2, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002fac:	2300      	movs	r3, #0
 8002fae:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002fb0:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002fb2:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002fb4:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fb6:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fb8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002fba:	f7ff fbc5 	bl	8002748 <HAL_UART_Init>
 8002fbe:	b128      	cbz	r0, 8002fcc <MX_USART3_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002fc0:	2142      	movs	r1, #66	; 0x42
 8002fc2:	4805      	ldr	r0, [pc, #20]	; (8002fd8 <MX_USART3_UART_Init+0x3c>)
  }

}
 8002fc4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8002fc8:	f7ff be86 	b.w	8002cd8 <_Error_Handler>
 8002fcc:	bd08      	pop	{r3, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000830 	.word	0x20000830
 8002fd4:	40004800 	.word	0x40004800
 8002fd8:	08005f41 	.word	0x08005f41

08002fdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fdc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART3)
 8002fde:	6802      	ldr	r2, [r0, #0]
 8002fe0:	4b10      	ldr	r3, [pc, #64]	; (8003024 <HAL_UART_MspInit+0x48>)
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d11a      	bne.n	800301c <HAL_UART_MspInit+0x40>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	4b0f      	ldr	r3, [pc, #60]	; (8003028 <HAL_UART_MspInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fec:	480f      	ldr	r0, [pc, #60]	; (800302c <HAL_UART_MspInit+0x50>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8002fee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ff0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002ff4:	641a      	str	r2, [r3, #64]	; 0x40
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003000:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003004:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003006:	2302      	movs	r3, #2
 8003008:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800300a:	2301      	movs	r3, #1
 800300c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800300e:	2303      	movs	r3, #3
 8003010:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003012:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003014:	2307      	movs	r3, #7
 8003016:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003018:	f7fe fb8a 	bl	8001730 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800301c:	b007      	add	sp, #28
 800301e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003022:	bf00      	nop
 8003024:	40004800 	.word	0x40004800
 8003028:	40023800 	.word	0x40023800
 800302c:	40020400 	.word	0x40020400

08003030 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003030:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003068 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003034:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003036:	e003      	b.n	8003040 <LoopCopyDataInit>

08003038 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003038:	4b0c      	ldr	r3, [pc, #48]	; (800306c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800303a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800303c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800303e:	3104      	adds	r1, #4

08003040 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003040:	480b      	ldr	r0, [pc, #44]	; (8003070 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003042:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003044:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003046:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003048:	d3f6      	bcc.n	8003038 <CopyDataInit>
  ldr  r2, =_sbss
 800304a:	4a0b      	ldr	r2, [pc, #44]	; (8003078 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800304c:	e002      	b.n	8003054 <LoopFillZerobss>

0800304e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800304e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003050:	f842 3b04 	str.w	r3, [r2], #4

08003054 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003054:	4b09      	ldr	r3, [pc, #36]	; (800307c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003056:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003058:	d3f9      	bcc.n	800304e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800305a:	f7ff fe89 	bl	8002d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800305e:	f000 f811 	bl	8003084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003062:	f7ff fdd3 	bl	8002c0c <main>
  bx  lr    
 8003066:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003068:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800306c:	080061d0 	.word	0x080061d0
  ldr  r0, =_sdata
 8003070:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003074:	20000674 	.word	0x20000674
  ldr  r2, =_sbss
 8003078:	20000674 	.word	0x20000674
  ldr  r3, = _ebss
 800307c:	20000880 	.word	0x20000880

08003080 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003080:	e7fe      	b.n	8003080 <ADC_IRQHandler>
	...

08003084 <__libc_init_array>:
 8003084:	b570      	push	{r4, r5, r6, lr}
 8003086:	4e0d      	ldr	r6, [pc, #52]	; (80030bc <__libc_init_array+0x38>)
 8003088:	4c0d      	ldr	r4, [pc, #52]	; (80030c0 <__libc_init_array+0x3c>)
 800308a:	1ba4      	subs	r4, r4, r6
 800308c:	10a4      	asrs	r4, r4, #2
 800308e:	2500      	movs	r5, #0
 8003090:	42a5      	cmp	r5, r4
 8003092:	d109      	bne.n	80030a8 <__libc_init_array+0x24>
 8003094:	4e0b      	ldr	r6, [pc, #44]	; (80030c4 <__libc_init_array+0x40>)
 8003096:	4c0c      	ldr	r4, [pc, #48]	; (80030c8 <__libc_init_array+0x44>)
 8003098:	f002 ff14 	bl	8005ec4 <_init>
 800309c:	1ba4      	subs	r4, r4, r6
 800309e:	10a4      	asrs	r4, r4, #2
 80030a0:	2500      	movs	r5, #0
 80030a2:	42a5      	cmp	r5, r4
 80030a4:	d105      	bne.n	80030b2 <__libc_init_array+0x2e>
 80030a6:	bd70      	pop	{r4, r5, r6, pc}
 80030a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030ac:	4798      	blx	r3
 80030ae:	3501      	adds	r5, #1
 80030b0:	e7ee      	b.n	8003090 <__libc_init_array+0xc>
 80030b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030b6:	4798      	blx	r3
 80030b8:	3501      	adds	r5, #1
 80030ba:	e7f2      	b.n	80030a2 <__libc_init_array+0x1e>
 80030bc:	080061c8 	.word	0x080061c8
 80030c0:	080061c8 	.word	0x080061c8
 80030c4:	080061c8 	.word	0x080061c8
 80030c8:	080061cc 	.word	0x080061cc

080030cc <sprintf>:
 80030cc:	b40e      	push	{r1, r2, r3}
 80030ce:	b500      	push	{lr}
 80030d0:	b09c      	sub	sp, #112	; 0x70
 80030d2:	f44f 7102 	mov.w	r1, #520	; 0x208
 80030d6:	ab1d      	add	r3, sp, #116	; 0x74
 80030d8:	f8ad 1014 	strh.w	r1, [sp, #20]
 80030dc:	9002      	str	r0, [sp, #8]
 80030de:	9006      	str	r0, [sp, #24]
 80030e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80030e4:	480a      	ldr	r0, [pc, #40]	; (8003110 <sprintf+0x44>)
 80030e6:	9104      	str	r1, [sp, #16]
 80030e8:	9107      	str	r1, [sp, #28]
 80030ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80030f2:	f8ad 1016 	strh.w	r1, [sp, #22]
 80030f6:	6800      	ldr	r0, [r0, #0]
 80030f8:	9301      	str	r3, [sp, #4]
 80030fa:	a902      	add	r1, sp, #8
 80030fc:	f000 f80c 	bl	8003118 <_svfprintf_r>
 8003100:	9b02      	ldr	r3, [sp, #8]
 8003102:	2200      	movs	r2, #0
 8003104:	701a      	strb	r2, [r3, #0]
 8003106:	b01c      	add	sp, #112	; 0x70
 8003108:	f85d eb04 	ldr.w	lr, [sp], #4
 800310c:	b003      	add	sp, #12
 800310e:	4770      	bx	lr
 8003110:	20000004 	.word	0x20000004
 8003114:	00000000 	.word	0x00000000

08003118 <_svfprintf_r>:
 8003118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800311c:	b0bd      	sub	sp, #244	; 0xf4
 800311e:	468a      	mov	sl, r1
 8003120:	4615      	mov	r5, r2
 8003122:	461f      	mov	r7, r3
 8003124:	4683      	mov	fp, r0
 8003126:	f001 fe25 	bl	8004d74 <_localeconv_r>
 800312a:	6803      	ldr	r3, [r0, #0]
 800312c:	930d      	str	r3, [sp, #52]	; 0x34
 800312e:	4618      	mov	r0, r3
 8003130:	f7fd f84e 	bl	80001d0 <strlen>
 8003134:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003138:	9008      	str	r0, [sp, #32]
 800313a:	061b      	lsls	r3, r3, #24
 800313c:	d518      	bpl.n	8003170 <_svfprintf_r+0x58>
 800313e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8003142:	b9ab      	cbnz	r3, 8003170 <_svfprintf_r+0x58>
 8003144:	2140      	movs	r1, #64	; 0x40
 8003146:	4658      	mov	r0, fp
 8003148:	f001 fe2a 	bl	8004da0 <_malloc_r>
 800314c:	f8ca 0000 	str.w	r0, [sl]
 8003150:	f8ca 0010 	str.w	r0, [sl, #16]
 8003154:	b948      	cbnz	r0, 800316a <_svfprintf_r+0x52>
 8003156:	230c      	movs	r3, #12
 8003158:	f8cb 3000 	str.w	r3, [fp]
 800315c:	f04f 33ff 	mov.w	r3, #4294967295
 8003160:	9309      	str	r3, [sp, #36]	; 0x24
 8003162:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003164:	b03d      	add	sp, #244	; 0xf4
 8003166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800316a:	2340      	movs	r3, #64	; 0x40
 800316c:	f8ca 3014 	str.w	r3, [sl, #20]
 8003170:	ed9f 7b99 	vldr	d7, [pc, #612]	; 80033d8 <_svfprintf_r+0x2c0>
 8003174:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003178:	2300      	movs	r3, #0
 800317a:	ac2c      	add	r4, sp, #176	; 0xb0
 800317c:	941f      	str	r4, [sp, #124]	; 0x7c
 800317e:	9321      	str	r3, [sp, #132]	; 0x84
 8003180:	9320      	str	r3, [sp, #128]	; 0x80
 8003182:	9505      	str	r5, [sp, #20]
 8003184:	9303      	str	r3, [sp, #12]
 8003186:	9311      	str	r3, [sp, #68]	; 0x44
 8003188:	9310      	str	r3, [sp, #64]	; 0x40
 800318a:	9309      	str	r3, [sp, #36]	; 0x24
 800318c:	9d05      	ldr	r5, [sp, #20]
 800318e:	462b      	mov	r3, r5
 8003190:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003194:	b112      	cbz	r2, 800319c <_svfprintf_r+0x84>
 8003196:	2a25      	cmp	r2, #37	; 0x25
 8003198:	f040 8083 	bne.w	80032a2 <_svfprintf_r+0x18a>
 800319c:	9b05      	ldr	r3, [sp, #20]
 800319e:	1aee      	subs	r6, r5, r3
 80031a0:	d00d      	beq.n	80031be <_svfprintf_r+0xa6>
 80031a2:	e884 0048 	stmia.w	r4, {r3, r6}
 80031a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80031a8:	4433      	add	r3, r6
 80031aa:	9321      	str	r3, [sp, #132]	; 0x84
 80031ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80031ae:	3301      	adds	r3, #1
 80031b0:	2b07      	cmp	r3, #7
 80031b2:	9320      	str	r3, [sp, #128]	; 0x80
 80031b4:	dc77      	bgt.n	80032a6 <_svfprintf_r+0x18e>
 80031b6:	3408      	adds	r4, #8
 80031b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031ba:	4433      	add	r3, r6
 80031bc:	9309      	str	r3, [sp, #36]	; 0x24
 80031be:	782b      	ldrb	r3, [r5, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 8729 	beq.w	8004018 <_svfprintf_r+0xf00>
 80031c6:	2300      	movs	r3, #0
 80031c8:	1c69      	adds	r1, r5, #1
 80031ca:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80031ce:	461a      	mov	r2, r3
 80031d0:	f04f 39ff 	mov.w	r9, #4294967295
 80031d4:	930a      	str	r3, [sp, #40]	; 0x28
 80031d6:	461d      	mov	r5, r3
 80031d8:	200a      	movs	r0, #10
 80031da:	1c4e      	adds	r6, r1, #1
 80031dc:	7809      	ldrb	r1, [r1, #0]
 80031de:	9605      	str	r6, [sp, #20]
 80031e0:	9102      	str	r1, [sp, #8]
 80031e2:	9902      	ldr	r1, [sp, #8]
 80031e4:	3920      	subs	r1, #32
 80031e6:	2958      	cmp	r1, #88	; 0x58
 80031e8:	f200 8418 	bhi.w	8003a1c <_svfprintf_r+0x904>
 80031ec:	e8df f011 	tbh	[pc, r1, lsl #1]
 80031f0:	041600a6 	.word	0x041600a6
 80031f4:	00ab0416 	.word	0x00ab0416
 80031f8:	04160416 	.word	0x04160416
 80031fc:	04160416 	.word	0x04160416
 8003200:	04160416 	.word	0x04160416
 8003204:	006500ae 	.word	0x006500ae
 8003208:	00b70416 	.word	0x00b70416
 800320c:	041600ba 	.word	0x041600ba
 8003210:	00da00d7 	.word	0x00da00d7
 8003214:	00da00da 	.word	0x00da00da
 8003218:	00da00da 	.word	0x00da00da
 800321c:	00da00da 	.word	0x00da00da
 8003220:	00da00da 	.word	0x00da00da
 8003224:	04160416 	.word	0x04160416
 8003228:	04160416 	.word	0x04160416
 800322c:	04160416 	.word	0x04160416
 8003230:	04160416 	.word	0x04160416
 8003234:	04160416 	.word	0x04160416
 8003238:	012b0115 	.word	0x012b0115
 800323c:	012b0416 	.word	0x012b0416
 8003240:	04160416 	.word	0x04160416
 8003244:	04160416 	.word	0x04160416
 8003248:	041600ed 	.word	0x041600ed
 800324c:	03400416 	.word	0x03400416
 8003250:	04160416 	.word	0x04160416
 8003254:	04160416 	.word	0x04160416
 8003258:	03a80416 	.word	0x03a80416
 800325c:	04160416 	.word	0x04160416
 8003260:	04160086 	.word	0x04160086
 8003264:	04160416 	.word	0x04160416
 8003268:	04160416 	.word	0x04160416
 800326c:	04160416 	.word	0x04160416
 8003270:	04160416 	.word	0x04160416
 8003274:	01070416 	.word	0x01070416
 8003278:	012b006b 	.word	0x012b006b
 800327c:	012b012b 	.word	0x012b012b
 8003280:	006b00f0 	.word	0x006b00f0
 8003284:	04160416 	.word	0x04160416
 8003288:	041600fa 	.word	0x041600fa
 800328c:	03420322 	.word	0x03420322
 8003290:	01010376 	.word	0x01010376
 8003294:	03870416 	.word	0x03870416
 8003298:	03aa0416 	.word	0x03aa0416
 800329c:	04160416 	.word	0x04160416
 80032a0:	03c2      	.short	0x03c2
 80032a2:	461d      	mov	r5, r3
 80032a4:	e773      	b.n	800318e <_svfprintf_r+0x76>
 80032a6:	aa1f      	add	r2, sp, #124	; 0x7c
 80032a8:	4651      	mov	r1, sl
 80032aa:	4658      	mov	r0, fp
 80032ac:	f002 fa7e 	bl	80057ac <__ssprint_r>
 80032b0:	2800      	cmp	r0, #0
 80032b2:	f040 8692 	bne.w	8003fda <_svfprintf_r+0xec2>
 80032b6:	ac2c      	add	r4, sp, #176	; 0xb0
 80032b8:	e77e      	b.n	80031b8 <_svfprintf_r+0xa0>
 80032ba:	2301      	movs	r3, #1
 80032bc:	222b      	movs	r2, #43	; 0x2b
 80032be:	9905      	ldr	r1, [sp, #20]
 80032c0:	e78b      	b.n	80031da <_svfprintf_r+0xc2>
 80032c2:	460f      	mov	r7, r1
 80032c4:	e7fb      	b.n	80032be <_svfprintf_r+0x1a6>
 80032c6:	b10b      	cbz	r3, 80032cc <_svfprintf_r+0x1b4>
 80032c8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80032cc:	06ae      	lsls	r6, r5, #26
 80032ce:	f140 80aa 	bpl.w	8003426 <_svfprintf_r+0x30e>
 80032d2:	3707      	adds	r7, #7
 80032d4:	f027 0707 	bic.w	r7, r7, #7
 80032d8:	f107 0308 	add.w	r3, r7, #8
 80032dc:	e9d7 6700 	ldrd	r6, r7, [r7]
 80032e0:	9304      	str	r3, [sp, #16]
 80032e2:	2e00      	cmp	r6, #0
 80032e4:	f177 0300 	sbcs.w	r3, r7, #0
 80032e8:	da06      	bge.n	80032f8 <_svfprintf_r+0x1e0>
 80032ea:	4276      	negs	r6, r6
 80032ec:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80032f0:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80032f4:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80032f8:	2301      	movs	r3, #1
 80032fa:	e2ca      	b.n	8003892 <_svfprintf_r+0x77a>
 80032fc:	b10b      	cbz	r3, 8003302 <_svfprintf_r+0x1ea>
 80032fe:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003302:	4b37      	ldr	r3, [pc, #220]	; (80033e0 <_svfprintf_r+0x2c8>)
 8003304:	9311      	str	r3, [sp, #68]	; 0x44
 8003306:	06ab      	lsls	r3, r5, #26
 8003308:	f140 8339 	bpl.w	800397e <_svfprintf_r+0x866>
 800330c:	3707      	adds	r7, #7
 800330e:	f027 0707 	bic.w	r7, r7, #7
 8003312:	f107 0308 	add.w	r3, r7, #8
 8003316:	e9d7 6700 	ldrd	r6, r7, [r7]
 800331a:	9304      	str	r3, [sp, #16]
 800331c:	07e8      	lsls	r0, r5, #31
 800331e:	d50b      	bpl.n	8003338 <_svfprintf_r+0x220>
 8003320:	ea56 0307 	orrs.w	r3, r6, r7
 8003324:	d008      	beq.n	8003338 <_svfprintf_r+0x220>
 8003326:	2330      	movs	r3, #48	; 0x30
 8003328:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800332c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003330:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8003334:	f045 0502 	orr.w	r5, r5, #2
 8003338:	2302      	movs	r3, #2
 800333a:	e2a7      	b.n	800388c <_svfprintf_r+0x774>
 800333c:	2a00      	cmp	r2, #0
 800333e:	d1be      	bne.n	80032be <_svfprintf_r+0x1a6>
 8003340:	2301      	movs	r3, #1
 8003342:	2220      	movs	r2, #32
 8003344:	e7bb      	b.n	80032be <_svfprintf_r+0x1a6>
 8003346:	f045 0501 	orr.w	r5, r5, #1
 800334a:	e7b8      	b.n	80032be <_svfprintf_r+0x1a6>
 800334c:	683e      	ldr	r6, [r7, #0]
 800334e:	960a      	str	r6, [sp, #40]	; 0x28
 8003350:	2e00      	cmp	r6, #0
 8003352:	f107 0104 	add.w	r1, r7, #4
 8003356:	dab4      	bge.n	80032c2 <_svfprintf_r+0x1aa>
 8003358:	4276      	negs	r6, r6
 800335a:	960a      	str	r6, [sp, #40]	; 0x28
 800335c:	460f      	mov	r7, r1
 800335e:	f045 0504 	orr.w	r5, r5, #4
 8003362:	e7ac      	b.n	80032be <_svfprintf_r+0x1a6>
 8003364:	9905      	ldr	r1, [sp, #20]
 8003366:	1c4e      	adds	r6, r1, #1
 8003368:	7809      	ldrb	r1, [r1, #0]
 800336a:	9102      	str	r1, [sp, #8]
 800336c:	292a      	cmp	r1, #42	; 0x2a
 800336e:	d010      	beq.n	8003392 <_svfprintf_r+0x27a>
 8003370:	f04f 0900 	mov.w	r9, #0
 8003374:	9605      	str	r6, [sp, #20]
 8003376:	9902      	ldr	r1, [sp, #8]
 8003378:	3930      	subs	r1, #48	; 0x30
 800337a:	2909      	cmp	r1, #9
 800337c:	f63f af31 	bhi.w	80031e2 <_svfprintf_r+0xca>
 8003380:	fb00 1909 	mla	r9, r0, r9, r1
 8003384:	9905      	ldr	r1, [sp, #20]
 8003386:	460e      	mov	r6, r1
 8003388:	f816 1b01 	ldrb.w	r1, [r6], #1
 800338c:	9102      	str	r1, [sp, #8]
 800338e:	9605      	str	r6, [sp, #20]
 8003390:	e7f1      	b.n	8003376 <_svfprintf_r+0x25e>
 8003392:	6839      	ldr	r1, [r7, #0]
 8003394:	9605      	str	r6, [sp, #20]
 8003396:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 800339a:	3704      	adds	r7, #4
 800339c:	e78f      	b.n	80032be <_svfprintf_r+0x1a6>
 800339e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80033a2:	e78c      	b.n	80032be <_svfprintf_r+0x1a6>
 80033a4:	2100      	movs	r1, #0
 80033a6:	910a      	str	r1, [sp, #40]	; 0x28
 80033a8:	9902      	ldr	r1, [sp, #8]
 80033aa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80033ac:	3930      	subs	r1, #48	; 0x30
 80033ae:	fb00 1106 	mla	r1, r0, r6, r1
 80033b2:	910a      	str	r1, [sp, #40]	; 0x28
 80033b4:	9905      	ldr	r1, [sp, #20]
 80033b6:	460e      	mov	r6, r1
 80033b8:	f816 1b01 	ldrb.w	r1, [r6], #1
 80033bc:	9102      	str	r1, [sp, #8]
 80033be:	9902      	ldr	r1, [sp, #8]
 80033c0:	9605      	str	r6, [sp, #20]
 80033c2:	3930      	subs	r1, #48	; 0x30
 80033c4:	2909      	cmp	r1, #9
 80033c6:	d9ef      	bls.n	80033a8 <_svfprintf_r+0x290>
 80033c8:	e70b      	b.n	80031e2 <_svfprintf_r+0xca>
 80033ca:	f045 0508 	orr.w	r5, r5, #8
 80033ce:	e776      	b.n	80032be <_svfprintf_r+0x1a6>
 80033d0:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 80033d4:	e773      	b.n	80032be <_svfprintf_r+0x1a6>
 80033d6:	bf00      	nop
	...
 80033e0:	08005f60 	.word	0x08005f60
 80033e4:	9905      	ldr	r1, [sp, #20]
 80033e6:	7809      	ldrb	r1, [r1, #0]
 80033e8:	296c      	cmp	r1, #108	; 0x6c
 80033ea:	d105      	bne.n	80033f8 <_svfprintf_r+0x2e0>
 80033ec:	9905      	ldr	r1, [sp, #20]
 80033ee:	3101      	adds	r1, #1
 80033f0:	9105      	str	r1, [sp, #20]
 80033f2:	f045 0520 	orr.w	r5, r5, #32
 80033f6:	e762      	b.n	80032be <_svfprintf_r+0x1a6>
 80033f8:	f045 0510 	orr.w	r5, r5, #16
 80033fc:	e75f      	b.n	80032be <_svfprintf_r+0x1a6>
 80033fe:	1d3b      	adds	r3, r7, #4
 8003400:	9304      	str	r3, [sp, #16]
 8003402:	2600      	movs	r6, #0
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800340a:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800340e:	f04f 0901 	mov.w	r9, #1
 8003412:	4637      	mov	r7, r6
 8003414:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8003418:	e11b      	b.n	8003652 <_svfprintf_r+0x53a>
 800341a:	b10b      	cbz	r3, 8003420 <_svfprintf_r+0x308>
 800341c:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003420:	f045 0510 	orr.w	r5, r5, #16
 8003424:	e752      	b.n	80032cc <_svfprintf_r+0x1b4>
 8003426:	f015 0f10 	tst.w	r5, #16
 800342a:	f107 0304 	add.w	r3, r7, #4
 800342e:	d003      	beq.n	8003438 <_svfprintf_r+0x320>
 8003430:	683e      	ldr	r6, [r7, #0]
 8003432:	9304      	str	r3, [sp, #16]
 8003434:	17f7      	asrs	r7, r6, #31
 8003436:	e754      	b.n	80032e2 <_svfprintf_r+0x1ca>
 8003438:	683e      	ldr	r6, [r7, #0]
 800343a:	9304      	str	r3, [sp, #16]
 800343c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003440:	bf18      	it	ne
 8003442:	b236      	sxthne	r6, r6
 8003444:	e7f6      	b.n	8003434 <_svfprintf_r+0x31c>
 8003446:	b10b      	cbz	r3, 800344c <_svfprintf_r+0x334>
 8003448:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800344c:	3707      	adds	r7, #7
 800344e:	f027 0707 	bic.w	r7, r7, #7
 8003452:	f107 0308 	add.w	r3, r7, #8
 8003456:	9304      	str	r3, [sp, #16]
 8003458:	ed97 7b00 	vldr	d7, [r7]
 800345c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003460:	9b06      	ldr	r3, [sp, #24]
 8003462:	9312      	str	r3, [sp, #72]	; 0x48
 8003464:	9b07      	ldr	r3, [sp, #28]
 8003466:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800346a:	9313      	str	r3, [sp, #76]	; 0x4c
 800346c:	f04f 32ff 	mov.w	r2, #4294967295
 8003470:	4b4a      	ldr	r3, [pc, #296]	; (800359c <_svfprintf_r+0x484>)
 8003472:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8003476:	f7fd fb55 	bl	8000b24 <__aeabi_dcmpun>
 800347a:	2800      	cmp	r0, #0
 800347c:	f040 85d5 	bne.w	800402a <_svfprintf_r+0xf12>
 8003480:	f04f 32ff 	mov.w	r2, #4294967295
 8003484:	4b45      	ldr	r3, [pc, #276]	; (800359c <_svfprintf_r+0x484>)
 8003486:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800348a:	f7fd fb2d 	bl	8000ae8 <__aeabi_dcmple>
 800348e:	2800      	cmp	r0, #0
 8003490:	f040 85cb 	bne.w	800402a <_svfprintf_r+0xf12>
 8003494:	2200      	movs	r2, #0
 8003496:	2300      	movs	r3, #0
 8003498:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800349c:	f7fd fb1a 	bl	8000ad4 <__aeabi_dcmplt>
 80034a0:	b110      	cbz	r0, 80034a8 <_svfprintf_r+0x390>
 80034a2:	232d      	movs	r3, #45	; 0x2d
 80034a4:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80034a8:	4b3d      	ldr	r3, [pc, #244]	; (80035a0 <_svfprintf_r+0x488>)
 80034aa:	4a3e      	ldr	r2, [pc, #248]	; (80035a4 <_svfprintf_r+0x48c>)
 80034ac:	9902      	ldr	r1, [sp, #8]
 80034ae:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 80034b2:	2947      	cmp	r1, #71	; 0x47
 80034b4:	bfcc      	ite	gt
 80034b6:	4690      	movgt	r8, r2
 80034b8:	4698      	movle	r8, r3
 80034ba:	f04f 0903 	mov.w	r9, #3
 80034be:	2600      	movs	r6, #0
 80034c0:	4637      	mov	r7, r6
 80034c2:	e0c6      	b.n	8003652 <_svfprintf_r+0x53a>
 80034c4:	f1b9 3fff 	cmp.w	r9, #4294967295
 80034c8:	d022      	beq.n	8003510 <_svfprintf_r+0x3f8>
 80034ca:	9b02      	ldr	r3, [sp, #8]
 80034cc:	f023 0320 	bic.w	r3, r3, #32
 80034d0:	2b47      	cmp	r3, #71	; 0x47
 80034d2:	d104      	bne.n	80034de <_svfprintf_r+0x3c6>
 80034d4:	f1b9 0f00 	cmp.w	r9, #0
 80034d8:	bf08      	it	eq
 80034da:	f04f 0901 	moveq.w	r9, #1
 80034de:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 80034e2:	930c      	str	r3, [sp, #48]	; 0x30
 80034e4:	9b07      	ldr	r3, [sp, #28]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	da15      	bge.n	8003516 <_svfprintf_r+0x3fe>
 80034ea:	9b06      	ldr	r3, [sp, #24]
 80034ec:	930e      	str	r3, [sp, #56]	; 0x38
 80034ee:	9b07      	ldr	r3, [sp, #28]
 80034f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80034f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80034f6:	232d      	movs	r3, #45	; 0x2d
 80034f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80034fa:	9b02      	ldr	r3, [sp, #8]
 80034fc:	f023 0720 	bic.w	r7, r3, #32
 8003500:	2f46      	cmp	r7, #70	; 0x46
 8003502:	d00e      	beq.n	8003522 <_svfprintf_r+0x40a>
 8003504:	2f45      	cmp	r7, #69	; 0x45
 8003506:	d146      	bne.n	8003596 <_svfprintf_r+0x47e>
 8003508:	f109 0601 	add.w	r6, r9, #1
 800350c:	2102      	movs	r1, #2
 800350e:	e00a      	b.n	8003526 <_svfprintf_r+0x40e>
 8003510:	f04f 0906 	mov.w	r9, #6
 8003514:	e7e3      	b.n	80034de <_svfprintf_r+0x3c6>
 8003516:	ed9d 7b06 	vldr	d7, [sp, #24]
 800351a:	2300      	movs	r3, #0
 800351c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8003520:	e7ea      	b.n	80034f8 <_svfprintf_r+0x3e0>
 8003522:	464e      	mov	r6, r9
 8003524:	2103      	movs	r1, #3
 8003526:	ab1d      	add	r3, sp, #116	; 0x74
 8003528:	9301      	str	r3, [sp, #4]
 800352a:	ab1a      	add	r3, sp, #104	; 0x68
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	4632      	mov	r2, r6
 8003530:	ab19      	add	r3, sp, #100	; 0x64
 8003532:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8003536:	4658      	mov	r0, fp
 8003538:	f000 fe4e 	bl	80041d8 <_dtoa_r>
 800353c:	2f47      	cmp	r7, #71	; 0x47
 800353e:	4680      	mov	r8, r0
 8003540:	d102      	bne.n	8003548 <_svfprintf_r+0x430>
 8003542:	07e8      	lsls	r0, r5, #31
 8003544:	f140 857e 	bpl.w	8004044 <_svfprintf_r+0xf2c>
 8003548:	eb08 0306 	add.w	r3, r8, r6
 800354c:	2f46      	cmp	r7, #70	; 0x46
 800354e:	9303      	str	r3, [sp, #12]
 8003550:	d111      	bne.n	8003576 <_svfprintf_r+0x45e>
 8003552:	f898 3000 	ldrb.w	r3, [r8]
 8003556:	2b30      	cmp	r3, #48	; 0x30
 8003558:	d109      	bne.n	800356e <_svfprintf_r+0x456>
 800355a:	2200      	movs	r2, #0
 800355c:	2300      	movs	r3, #0
 800355e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003562:	f7fd faad 	bl	8000ac0 <__aeabi_dcmpeq>
 8003566:	b910      	cbnz	r0, 800356e <_svfprintf_r+0x456>
 8003568:	f1c6 0601 	rsb	r6, r6, #1
 800356c:	9619      	str	r6, [sp, #100]	; 0x64
 800356e:	9a03      	ldr	r2, [sp, #12]
 8003570:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003572:	441a      	add	r2, r3
 8003574:	9203      	str	r2, [sp, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	2300      	movs	r3, #0
 800357a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800357e:	f7fd fa9f 	bl	8000ac0 <__aeabi_dcmpeq>
 8003582:	b988      	cbnz	r0, 80035a8 <_svfprintf_r+0x490>
 8003584:	2230      	movs	r2, #48	; 0x30
 8003586:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003588:	9903      	ldr	r1, [sp, #12]
 800358a:	4299      	cmp	r1, r3
 800358c:	d90e      	bls.n	80035ac <_svfprintf_r+0x494>
 800358e:	1c59      	adds	r1, r3, #1
 8003590:	911d      	str	r1, [sp, #116]	; 0x74
 8003592:	701a      	strb	r2, [r3, #0]
 8003594:	e7f7      	b.n	8003586 <_svfprintf_r+0x46e>
 8003596:	464e      	mov	r6, r9
 8003598:	e7b8      	b.n	800350c <_svfprintf_r+0x3f4>
 800359a:	bf00      	nop
 800359c:	7fefffff 	.word	0x7fefffff
 80035a0:	08005f50 	.word	0x08005f50
 80035a4:	08005f54 	.word	0x08005f54
 80035a8:	9b03      	ldr	r3, [sp, #12]
 80035aa:	931d      	str	r3, [sp, #116]	; 0x74
 80035ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80035ae:	2f47      	cmp	r7, #71	; 0x47
 80035b0:	eba3 0308 	sub.w	r3, r3, r8
 80035b4:	9303      	str	r3, [sp, #12]
 80035b6:	f040 80fa 	bne.w	80037ae <_svfprintf_r+0x696>
 80035ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80035bc:	1cd9      	adds	r1, r3, #3
 80035be:	db02      	blt.n	80035c6 <_svfprintf_r+0x4ae>
 80035c0:	4599      	cmp	r9, r3
 80035c2:	f280 8120 	bge.w	8003806 <_svfprintf_r+0x6ee>
 80035c6:	9b02      	ldr	r3, [sp, #8]
 80035c8:	3b02      	subs	r3, #2
 80035ca:	9302      	str	r3, [sp, #8]
 80035cc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80035ce:	f89d 1008 	ldrb.w	r1, [sp, #8]
 80035d2:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 80035d6:	1e53      	subs	r3, r2, #1
 80035d8:	2b00      	cmp	r3, #0
 80035da:	9319      	str	r3, [sp, #100]	; 0x64
 80035dc:	bfb6      	itet	lt
 80035de:	f1c2 0301 	rsblt	r3, r2, #1
 80035e2:	222b      	movge	r2, #43	; 0x2b
 80035e4:	222d      	movlt	r2, #45	; 0x2d
 80035e6:	2b09      	cmp	r3, #9
 80035e8:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 80035ec:	f340 80fb 	ble.w	80037e6 <_svfprintf_r+0x6ce>
 80035f0:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 80035f4:	260a      	movs	r6, #10
 80035f6:	fb93 f0f6 	sdiv	r0, r3, r6
 80035fa:	fb06 3310 	mls	r3, r6, r0, r3
 80035fe:	3330      	adds	r3, #48	; 0x30
 8003600:	2809      	cmp	r0, #9
 8003602:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003606:	f102 31ff 	add.w	r1, r2, #4294967295
 800360a:	4603      	mov	r3, r0
 800360c:	f300 80e4 	bgt.w	80037d8 <_svfprintf_r+0x6c0>
 8003610:	3330      	adds	r3, #48	; 0x30
 8003612:	f801 3c01 	strb.w	r3, [r1, #-1]
 8003616:	3a02      	subs	r2, #2
 8003618:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 800361c:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8003620:	4282      	cmp	r2, r0
 8003622:	4619      	mov	r1, r3
 8003624:	f0c0 80da 	bcc.w	80037dc <_svfprintf_r+0x6c4>
 8003628:	9a03      	ldr	r2, [sp, #12]
 800362a:	ab1b      	add	r3, sp, #108	; 0x6c
 800362c:	1acb      	subs	r3, r1, r3
 800362e:	2a01      	cmp	r2, #1
 8003630:	9310      	str	r3, [sp, #64]	; 0x40
 8003632:	eb03 0902 	add.w	r9, r3, r2
 8003636:	dc02      	bgt.n	800363e <_svfprintf_r+0x526>
 8003638:	f015 0701 	ands.w	r7, r5, #1
 800363c:	d002      	beq.n	8003644 <_svfprintf_r+0x52c>
 800363e:	9b08      	ldr	r3, [sp, #32]
 8003640:	2700      	movs	r7, #0
 8003642:	4499      	add	r9, r3
 8003644:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003646:	b113      	cbz	r3, 800364e <_svfprintf_r+0x536>
 8003648:	232d      	movs	r3, #45	; 0x2d
 800364a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800364e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003650:	2600      	movs	r6, #0
 8003652:	454e      	cmp	r6, r9
 8003654:	4633      	mov	r3, r6
 8003656:	bfb8      	it	lt
 8003658:	464b      	movlt	r3, r9
 800365a:	930b      	str	r3, [sp, #44]	; 0x2c
 800365c:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8003660:	b113      	cbz	r3, 8003668 <_svfprintf_r+0x550>
 8003662:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003664:	3301      	adds	r3, #1
 8003666:	930b      	str	r3, [sp, #44]	; 0x2c
 8003668:	f015 0302 	ands.w	r3, r5, #2
 800366c:	9314      	str	r3, [sp, #80]	; 0x50
 800366e:	bf1e      	ittt	ne
 8003670:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8003672:	3302      	addne	r3, #2
 8003674:	930b      	strne	r3, [sp, #44]	; 0x2c
 8003676:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 800367a:	9315      	str	r3, [sp, #84]	; 0x54
 800367c:	d118      	bne.n	80036b0 <_svfprintf_r+0x598>
 800367e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003680:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003682:	1a9b      	subs	r3, r3, r2
 8003684:	2b00      	cmp	r3, #0
 8003686:	930c      	str	r3, [sp, #48]	; 0x30
 8003688:	dd12      	ble.n	80036b0 <_svfprintf_r+0x598>
 800368a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800368c:	2b10      	cmp	r3, #16
 800368e:	4ba9      	ldr	r3, [pc, #676]	; (8003934 <_svfprintf_r+0x81c>)
 8003690:	6023      	str	r3, [r4, #0]
 8003692:	f300 81d5 	bgt.w	8003a40 <_svfprintf_r+0x928>
 8003696:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003698:	6063      	str	r3, [r4, #4]
 800369a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800369c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800369e:	4413      	add	r3, r2
 80036a0:	9321      	str	r3, [sp, #132]	; 0x84
 80036a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80036a4:	3301      	adds	r3, #1
 80036a6:	2b07      	cmp	r3, #7
 80036a8:	9320      	str	r3, [sp, #128]	; 0x80
 80036aa:	f300 81e2 	bgt.w	8003a72 <_svfprintf_r+0x95a>
 80036ae:	3408      	adds	r4, #8
 80036b0:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80036b4:	b173      	cbz	r3, 80036d4 <_svfprintf_r+0x5bc>
 80036b6:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 80036ba:	6023      	str	r3, [r4, #0]
 80036bc:	2301      	movs	r3, #1
 80036be:	6063      	str	r3, [r4, #4]
 80036c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80036c2:	3301      	adds	r3, #1
 80036c4:	9321      	str	r3, [sp, #132]	; 0x84
 80036c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80036c8:	3301      	adds	r3, #1
 80036ca:	2b07      	cmp	r3, #7
 80036cc:	9320      	str	r3, [sp, #128]	; 0x80
 80036ce:	f300 81da 	bgt.w	8003a86 <_svfprintf_r+0x96e>
 80036d2:	3408      	adds	r4, #8
 80036d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80036d6:	b16b      	cbz	r3, 80036f4 <_svfprintf_r+0x5dc>
 80036d8:	ab18      	add	r3, sp, #96	; 0x60
 80036da:	6023      	str	r3, [r4, #0]
 80036dc:	2302      	movs	r3, #2
 80036de:	6063      	str	r3, [r4, #4]
 80036e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80036e2:	3302      	adds	r3, #2
 80036e4:	9321      	str	r3, [sp, #132]	; 0x84
 80036e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80036e8:	3301      	adds	r3, #1
 80036ea:	2b07      	cmp	r3, #7
 80036ec:	9320      	str	r3, [sp, #128]	; 0x80
 80036ee:	f300 81d4 	bgt.w	8003a9a <_svfprintf_r+0x982>
 80036f2:	3408      	adds	r4, #8
 80036f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80036f6:	2b80      	cmp	r3, #128	; 0x80
 80036f8:	d114      	bne.n	8003724 <_svfprintf_r+0x60c>
 80036fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80036fe:	1a9b      	subs	r3, r3, r2
 8003700:	2b00      	cmp	r3, #0
 8003702:	dd0f      	ble.n	8003724 <_svfprintf_r+0x60c>
 8003704:	4a8c      	ldr	r2, [pc, #560]	; (8003938 <_svfprintf_r+0x820>)
 8003706:	6022      	str	r2, [r4, #0]
 8003708:	2b10      	cmp	r3, #16
 800370a:	f300 81d0 	bgt.w	8003aae <_svfprintf_r+0x996>
 800370e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003710:	6063      	str	r3, [r4, #4]
 8003712:	4413      	add	r3, r2
 8003714:	9321      	str	r3, [sp, #132]	; 0x84
 8003716:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003718:	3301      	adds	r3, #1
 800371a:	2b07      	cmp	r3, #7
 800371c:	9320      	str	r3, [sp, #128]	; 0x80
 800371e:	f300 81df 	bgt.w	8003ae0 <_svfprintf_r+0x9c8>
 8003722:	3408      	adds	r4, #8
 8003724:	eba6 0609 	sub.w	r6, r6, r9
 8003728:	2e00      	cmp	r6, #0
 800372a:	dd0f      	ble.n	800374c <_svfprintf_r+0x634>
 800372c:	4b82      	ldr	r3, [pc, #520]	; (8003938 <_svfprintf_r+0x820>)
 800372e:	6023      	str	r3, [r4, #0]
 8003730:	2e10      	cmp	r6, #16
 8003732:	f300 81df 	bgt.w	8003af4 <_svfprintf_r+0x9dc>
 8003736:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003738:	9821      	ldr	r0, [sp, #132]	; 0x84
 800373a:	6066      	str	r6, [r4, #4]
 800373c:	3301      	adds	r3, #1
 800373e:	4406      	add	r6, r0
 8003740:	2b07      	cmp	r3, #7
 8003742:	9621      	str	r6, [sp, #132]	; 0x84
 8003744:	9320      	str	r3, [sp, #128]	; 0x80
 8003746:	f300 81ec 	bgt.w	8003b22 <_svfprintf_r+0xa0a>
 800374a:	3408      	adds	r4, #8
 800374c:	05eb      	lsls	r3, r5, #23
 800374e:	f100 81f2 	bmi.w	8003b36 <_svfprintf_r+0xa1e>
 8003752:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003754:	e884 0300 	stmia.w	r4, {r8, r9}
 8003758:	444b      	add	r3, r9
 800375a:	9321      	str	r3, [sp, #132]	; 0x84
 800375c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800375e:	3301      	adds	r3, #1
 8003760:	2b07      	cmp	r3, #7
 8003762:	9320      	str	r3, [sp, #128]	; 0x80
 8003764:	f340 8419 	ble.w	8003f9a <_svfprintf_r+0xe82>
 8003768:	aa1f      	add	r2, sp, #124	; 0x7c
 800376a:	4651      	mov	r1, sl
 800376c:	4658      	mov	r0, fp
 800376e:	f002 f81d 	bl	80057ac <__ssprint_r>
 8003772:	2800      	cmp	r0, #0
 8003774:	f040 8431 	bne.w	8003fda <_svfprintf_r+0xec2>
 8003778:	ac2c      	add	r4, sp, #176	; 0xb0
 800377a:	076b      	lsls	r3, r5, #29
 800377c:	f100 8410 	bmi.w	8003fa0 <_svfprintf_r+0xe88>
 8003780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003782:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003784:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003786:	428a      	cmp	r2, r1
 8003788:	bfac      	ite	ge
 800378a:	189b      	addge	r3, r3, r2
 800378c:	185b      	addlt	r3, r3, r1
 800378e:	9309      	str	r3, [sp, #36]	; 0x24
 8003790:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003792:	b13b      	cbz	r3, 80037a4 <_svfprintf_r+0x68c>
 8003794:	aa1f      	add	r2, sp, #124	; 0x7c
 8003796:	4651      	mov	r1, sl
 8003798:	4658      	mov	r0, fp
 800379a:	f002 f807 	bl	80057ac <__ssprint_r>
 800379e:	2800      	cmp	r0, #0
 80037a0:	f040 841b 	bne.w	8003fda <_svfprintf_r+0xec2>
 80037a4:	2300      	movs	r3, #0
 80037a6:	9320      	str	r3, [sp, #128]	; 0x80
 80037a8:	9f04      	ldr	r7, [sp, #16]
 80037aa:	ac2c      	add	r4, sp, #176	; 0xb0
 80037ac:	e4ee      	b.n	800318c <_svfprintf_r+0x74>
 80037ae:	9b02      	ldr	r3, [sp, #8]
 80037b0:	2b65      	cmp	r3, #101	; 0x65
 80037b2:	f77f af0b 	ble.w	80035cc <_svfprintf_r+0x4b4>
 80037b6:	9b02      	ldr	r3, [sp, #8]
 80037b8:	2b66      	cmp	r3, #102	; 0x66
 80037ba:	d124      	bne.n	8003806 <_svfprintf_r+0x6ee>
 80037bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80037be:	2b00      	cmp	r3, #0
 80037c0:	dd19      	ble.n	80037f6 <_svfprintf_r+0x6de>
 80037c2:	f1b9 0f00 	cmp.w	r9, #0
 80037c6:	d101      	bne.n	80037cc <_svfprintf_r+0x6b4>
 80037c8:	07ea      	lsls	r2, r5, #31
 80037ca:	d502      	bpl.n	80037d2 <_svfprintf_r+0x6ba>
 80037cc:	9a08      	ldr	r2, [sp, #32]
 80037ce:	4413      	add	r3, r2
 80037d0:	444b      	add	r3, r9
 80037d2:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80037d4:	4699      	mov	r9, r3
 80037d6:	e735      	b.n	8003644 <_svfprintf_r+0x52c>
 80037d8:	460a      	mov	r2, r1
 80037da:	e70c      	b.n	80035f6 <_svfprintf_r+0x4de>
 80037dc:	f812 1b01 	ldrb.w	r1, [r2], #1
 80037e0:	f803 1b01 	strb.w	r1, [r3], #1
 80037e4:	e71c      	b.n	8003620 <_svfprintf_r+0x508>
 80037e6:	2230      	movs	r2, #48	; 0x30
 80037e8:	4413      	add	r3, r2
 80037ea:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 80037ee:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80037f2:	a91c      	add	r1, sp, #112	; 0x70
 80037f4:	e718      	b.n	8003628 <_svfprintf_r+0x510>
 80037f6:	f1b9 0f00 	cmp.w	r9, #0
 80037fa:	d101      	bne.n	8003800 <_svfprintf_r+0x6e8>
 80037fc:	07eb      	lsls	r3, r5, #31
 80037fe:	d515      	bpl.n	800382c <_svfprintf_r+0x714>
 8003800:	9b08      	ldr	r3, [sp, #32]
 8003802:	3301      	adds	r3, #1
 8003804:	e7e4      	b.n	80037d0 <_svfprintf_r+0x6b8>
 8003806:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003808:	9b03      	ldr	r3, [sp, #12]
 800380a:	429a      	cmp	r2, r3
 800380c:	db06      	blt.n	800381c <_svfprintf_r+0x704>
 800380e:	07ef      	lsls	r7, r5, #31
 8003810:	d50e      	bpl.n	8003830 <_svfprintf_r+0x718>
 8003812:	9b08      	ldr	r3, [sp, #32]
 8003814:	4413      	add	r3, r2
 8003816:	2267      	movs	r2, #103	; 0x67
 8003818:	9202      	str	r2, [sp, #8]
 800381a:	e7da      	b.n	80037d2 <_svfprintf_r+0x6ba>
 800381c:	9b03      	ldr	r3, [sp, #12]
 800381e:	9908      	ldr	r1, [sp, #32]
 8003820:	2a00      	cmp	r2, #0
 8003822:	440b      	add	r3, r1
 8003824:	dcf7      	bgt.n	8003816 <_svfprintf_r+0x6fe>
 8003826:	f1c2 0201 	rsb	r2, r2, #1
 800382a:	e7f3      	b.n	8003814 <_svfprintf_r+0x6fc>
 800382c:	2301      	movs	r3, #1
 800382e:	e7d0      	b.n	80037d2 <_svfprintf_r+0x6ba>
 8003830:	4613      	mov	r3, r2
 8003832:	e7f0      	b.n	8003816 <_svfprintf_r+0x6fe>
 8003834:	b10b      	cbz	r3, 800383a <_svfprintf_r+0x722>
 8003836:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800383a:	f015 0f20 	tst.w	r5, #32
 800383e:	f107 0304 	add.w	r3, r7, #4
 8003842:	d008      	beq.n	8003856 <_svfprintf_r+0x73e>
 8003844:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	17ce      	asrs	r6, r1, #31
 800384a:	4608      	mov	r0, r1
 800384c:	4631      	mov	r1, r6
 800384e:	e9c2 0100 	strd	r0, r1, [r2]
 8003852:	461f      	mov	r7, r3
 8003854:	e49a      	b.n	800318c <_svfprintf_r+0x74>
 8003856:	06ee      	lsls	r6, r5, #27
 8003858:	d503      	bpl.n	8003862 <_svfprintf_r+0x74a>
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800385e:	6011      	str	r1, [r2, #0]
 8003860:	e7f7      	b.n	8003852 <_svfprintf_r+0x73a>
 8003862:	0668      	lsls	r0, r5, #25
 8003864:	d5f9      	bpl.n	800385a <_svfprintf_r+0x742>
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800386c:	8011      	strh	r1, [r2, #0]
 800386e:	e7f0      	b.n	8003852 <_svfprintf_r+0x73a>
 8003870:	f045 0510 	orr.w	r5, r5, #16
 8003874:	f015 0320 	ands.w	r3, r5, #32
 8003878:	d022      	beq.n	80038c0 <_svfprintf_r+0x7a8>
 800387a:	3707      	adds	r7, #7
 800387c:	f027 0707 	bic.w	r7, r7, #7
 8003880:	f107 0308 	add.w	r3, r7, #8
 8003884:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003888:	9304      	str	r3, [sp, #16]
 800388a:	2300      	movs	r3, #0
 800388c:	2200      	movs	r2, #0
 800388e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003892:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003896:	f000 83db 	beq.w	8004050 <_svfprintf_r+0xf38>
 800389a:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 800389e:	920b      	str	r2, [sp, #44]	; 0x2c
 80038a0:	ea56 0207 	orrs.w	r2, r6, r7
 80038a4:	f040 83d9 	bne.w	800405a <_svfprintf_r+0xf42>
 80038a8:	f1b9 0f00 	cmp.w	r9, #0
 80038ac:	f000 80aa 	beq.w	8003a04 <_svfprintf_r+0x8ec>
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d076      	beq.n	80039a2 <_svfprintf_r+0x88a>
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	f000 8091 	beq.w	80039dc <_svfprintf_r+0x8c4>
 80038ba:	2600      	movs	r6, #0
 80038bc:	2700      	movs	r7, #0
 80038be:	e3d2      	b.n	8004066 <_svfprintf_r+0xf4e>
 80038c0:	1d3a      	adds	r2, r7, #4
 80038c2:	f015 0110 	ands.w	r1, r5, #16
 80038c6:	9204      	str	r2, [sp, #16]
 80038c8:	d002      	beq.n	80038d0 <_svfprintf_r+0x7b8>
 80038ca:	683e      	ldr	r6, [r7, #0]
 80038cc:	2700      	movs	r7, #0
 80038ce:	e7dd      	b.n	800388c <_svfprintf_r+0x774>
 80038d0:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 80038d4:	d0f9      	beq.n	80038ca <_svfprintf_r+0x7b2>
 80038d6:	883e      	ldrh	r6, [r7, #0]
 80038d8:	2700      	movs	r7, #0
 80038da:	e7d6      	b.n	800388a <_svfprintf_r+0x772>
 80038dc:	1d3b      	adds	r3, r7, #4
 80038de:	9304      	str	r3, [sp, #16]
 80038e0:	2330      	movs	r3, #48	; 0x30
 80038e2:	2278      	movs	r2, #120	; 0x78
 80038e4:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80038e8:	4b14      	ldr	r3, [pc, #80]	; (800393c <_svfprintf_r+0x824>)
 80038ea:	683e      	ldr	r6, [r7, #0]
 80038ec:	9311      	str	r3, [sp, #68]	; 0x44
 80038ee:	2700      	movs	r7, #0
 80038f0:	f045 0502 	orr.w	r5, r5, #2
 80038f4:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 80038f8:	2302      	movs	r3, #2
 80038fa:	9202      	str	r2, [sp, #8]
 80038fc:	e7c6      	b.n	800388c <_svfprintf_r+0x774>
 80038fe:	1d3b      	adds	r3, r7, #4
 8003900:	2600      	movs	r6, #0
 8003902:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003906:	9304      	str	r3, [sp, #16]
 8003908:	f8d7 8000 	ldr.w	r8, [r7]
 800390c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003910:	d00a      	beq.n	8003928 <_svfprintf_r+0x810>
 8003912:	464a      	mov	r2, r9
 8003914:	4631      	mov	r1, r6
 8003916:	4640      	mov	r0, r8
 8003918:	f7fc fc62 	bl	80001e0 <memchr>
 800391c:	2800      	cmp	r0, #0
 800391e:	f000 808d 	beq.w	8003a3c <_svfprintf_r+0x924>
 8003922:	eba0 0908 	sub.w	r9, r0, r8
 8003926:	e5cb      	b.n	80034c0 <_svfprintf_r+0x3a8>
 8003928:	4640      	mov	r0, r8
 800392a:	f7fc fc51 	bl	80001d0 <strlen>
 800392e:	4681      	mov	r9, r0
 8003930:	e5c6      	b.n	80034c0 <_svfprintf_r+0x3a8>
 8003932:	bf00      	nop
 8003934:	08005f84 	.word	0x08005f84
 8003938:	08005f94 	.word	0x08005f94
 800393c:	08005f71 	.word	0x08005f71
 8003940:	f045 0510 	orr.w	r5, r5, #16
 8003944:	06a9      	lsls	r1, r5, #26
 8003946:	d509      	bpl.n	800395c <_svfprintf_r+0x844>
 8003948:	3707      	adds	r7, #7
 800394a:	f027 0707 	bic.w	r7, r7, #7
 800394e:	f107 0308 	add.w	r3, r7, #8
 8003952:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003956:	9304      	str	r3, [sp, #16]
 8003958:	2301      	movs	r3, #1
 800395a:	e797      	b.n	800388c <_svfprintf_r+0x774>
 800395c:	1d3b      	adds	r3, r7, #4
 800395e:	f015 0f10 	tst.w	r5, #16
 8003962:	9304      	str	r3, [sp, #16]
 8003964:	d001      	beq.n	800396a <_svfprintf_r+0x852>
 8003966:	683e      	ldr	r6, [r7, #0]
 8003968:	e002      	b.n	8003970 <_svfprintf_r+0x858>
 800396a:	066a      	lsls	r2, r5, #25
 800396c:	d5fb      	bpl.n	8003966 <_svfprintf_r+0x84e>
 800396e:	883e      	ldrh	r6, [r7, #0]
 8003970:	2700      	movs	r7, #0
 8003972:	e7f1      	b.n	8003958 <_svfprintf_r+0x840>
 8003974:	b10b      	cbz	r3, 800397a <_svfprintf_r+0x862>
 8003976:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800397a:	4ba3      	ldr	r3, [pc, #652]	; (8003c08 <_svfprintf_r+0xaf0>)
 800397c:	e4c2      	b.n	8003304 <_svfprintf_r+0x1ec>
 800397e:	1d3b      	adds	r3, r7, #4
 8003980:	f015 0f10 	tst.w	r5, #16
 8003984:	9304      	str	r3, [sp, #16]
 8003986:	d001      	beq.n	800398c <_svfprintf_r+0x874>
 8003988:	683e      	ldr	r6, [r7, #0]
 800398a:	e002      	b.n	8003992 <_svfprintf_r+0x87a>
 800398c:	066e      	lsls	r6, r5, #25
 800398e:	d5fb      	bpl.n	8003988 <_svfprintf_r+0x870>
 8003990:	883e      	ldrh	r6, [r7, #0]
 8003992:	2700      	movs	r7, #0
 8003994:	e4c2      	b.n	800331c <_svfprintf_r+0x204>
 8003996:	4643      	mov	r3, r8
 8003998:	e366      	b.n	8004068 <_svfprintf_r+0xf50>
 800399a:	2f00      	cmp	r7, #0
 800399c:	bf08      	it	eq
 800399e:	2e0a      	cmpeq	r6, #10
 80039a0:	d205      	bcs.n	80039ae <_svfprintf_r+0x896>
 80039a2:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 80039a6:	3630      	adds	r6, #48	; 0x30
 80039a8:	f808 6d41 	strb.w	r6, [r8, #-65]!
 80039ac:	e377      	b.n	800409e <_svfprintf_r+0xf86>
 80039ae:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80039b2:	4630      	mov	r0, r6
 80039b4:	4639      	mov	r1, r7
 80039b6:	220a      	movs	r2, #10
 80039b8:	2300      	movs	r3, #0
 80039ba:	f7fd f8f1 	bl	8000ba0 <__aeabi_uldivmod>
 80039be:	3230      	adds	r2, #48	; 0x30
 80039c0:	f808 2d01 	strb.w	r2, [r8, #-1]!
 80039c4:	2300      	movs	r3, #0
 80039c6:	4630      	mov	r0, r6
 80039c8:	4639      	mov	r1, r7
 80039ca:	220a      	movs	r2, #10
 80039cc:	f7fd f8e8 	bl	8000ba0 <__aeabi_uldivmod>
 80039d0:	4606      	mov	r6, r0
 80039d2:	460f      	mov	r7, r1
 80039d4:	ea56 0307 	orrs.w	r3, r6, r7
 80039d8:	d1eb      	bne.n	80039b2 <_svfprintf_r+0x89a>
 80039da:	e360      	b.n	800409e <_svfprintf_r+0xf86>
 80039dc:	2600      	movs	r6, #0
 80039de:	2700      	movs	r7, #0
 80039e0:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80039e4:	f006 030f 	and.w	r3, r6, #15
 80039e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80039ea:	5cd3      	ldrb	r3, [r2, r3]
 80039ec:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80039f0:	0933      	lsrs	r3, r6, #4
 80039f2:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80039f6:	093a      	lsrs	r2, r7, #4
 80039f8:	461e      	mov	r6, r3
 80039fa:	4617      	mov	r7, r2
 80039fc:	ea56 0307 	orrs.w	r3, r6, r7
 8003a00:	d1f0      	bne.n	80039e4 <_svfprintf_r+0x8cc>
 8003a02:	e34c      	b.n	800409e <_svfprintf_r+0xf86>
 8003a04:	b93b      	cbnz	r3, 8003a16 <_svfprintf_r+0x8fe>
 8003a06:	07ea      	lsls	r2, r5, #31
 8003a08:	d505      	bpl.n	8003a16 <_svfprintf_r+0x8fe>
 8003a0a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8003a0e:	2330      	movs	r3, #48	; 0x30
 8003a10:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8003a14:	e343      	b.n	800409e <_svfprintf_r+0xf86>
 8003a16:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8003a1a:	e340      	b.n	800409e <_svfprintf_r+0xf86>
 8003a1c:	b10b      	cbz	r3, 8003a22 <_svfprintf_r+0x90a>
 8003a1e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003a22:	9b02      	ldr	r3, [sp, #8]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 82f7 	beq.w	8004018 <_svfprintf_r+0xf00>
 8003a2a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003a2e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8003a32:	2600      	movs	r6, #0
 8003a34:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003a38:	9704      	str	r7, [sp, #16]
 8003a3a:	e4e8      	b.n	800340e <_svfprintf_r+0x2f6>
 8003a3c:	4606      	mov	r6, r0
 8003a3e:	e53f      	b.n	80034c0 <_svfprintf_r+0x3a8>
 8003a40:	2310      	movs	r3, #16
 8003a42:	6063      	str	r3, [r4, #4]
 8003a44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003a46:	3310      	adds	r3, #16
 8003a48:	9321      	str	r3, [sp, #132]	; 0x84
 8003a4a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	2b07      	cmp	r3, #7
 8003a50:	9320      	str	r3, [sp, #128]	; 0x80
 8003a52:	dc04      	bgt.n	8003a5e <_svfprintf_r+0x946>
 8003a54:	3408      	adds	r4, #8
 8003a56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a58:	3b10      	subs	r3, #16
 8003a5a:	930c      	str	r3, [sp, #48]	; 0x30
 8003a5c:	e615      	b.n	800368a <_svfprintf_r+0x572>
 8003a5e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003a60:	4651      	mov	r1, sl
 8003a62:	4658      	mov	r0, fp
 8003a64:	f001 fea2 	bl	80057ac <__ssprint_r>
 8003a68:	2800      	cmp	r0, #0
 8003a6a:	f040 82b6 	bne.w	8003fda <_svfprintf_r+0xec2>
 8003a6e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003a70:	e7f1      	b.n	8003a56 <_svfprintf_r+0x93e>
 8003a72:	aa1f      	add	r2, sp, #124	; 0x7c
 8003a74:	4651      	mov	r1, sl
 8003a76:	4658      	mov	r0, fp
 8003a78:	f001 fe98 	bl	80057ac <__ssprint_r>
 8003a7c:	2800      	cmp	r0, #0
 8003a7e:	f040 82ac 	bne.w	8003fda <_svfprintf_r+0xec2>
 8003a82:	ac2c      	add	r4, sp, #176	; 0xb0
 8003a84:	e614      	b.n	80036b0 <_svfprintf_r+0x598>
 8003a86:	aa1f      	add	r2, sp, #124	; 0x7c
 8003a88:	4651      	mov	r1, sl
 8003a8a:	4658      	mov	r0, fp
 8003a8c:	f001 fe8e 	bl	80057ac <__ssprint_r>
 8003a90:	2800      	cmp	r0, #0
 8003a92:	f040 82a2 	bne.w	8003fda <_svfprintf_r+0xec2>
 8003a96:	ac2c      	add	r4, sp, #176	; 0xb0
 8003a98:	e61c      	b.n	80036d4 <_svfprintf_r+0x5bc>
 8003a9a:	aa1f      	add	r2, sp, #124	; 0x7c
 8003a9c:	4651      	mov	r1, sl
 8003a9e:	4658      	mov	r0, fp
 8003aa0:	f001 fe84 	bl	80057ac <__ssprint_r>
 8003aa4:	2800      	cmp	r0, #0
 8003aa6:	f040 8298 	bne.w	8003fda <_svfprintf_r+0xec2>
 8003aaa:	ac2c      	add	r4, sp, #176	; 0xb0
 8003aac:	e622      	b.n	80036f4 <_svfprintf_r+0x5dc>
 8003aae:	2210      	movs	r2, #16
 8003ab0:	6062      	str	r2, [r4, #4]
 8003ab2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003ab4:	3210      	adds	r2, #16
 8003ab6:	9221      	str	r2, [sp, #132]	; 0x84
 8003ab8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003aba:	3201      	adds	r2, #1
 8003abc:	2a07      	cmp	r2, #7
 8003abe:	9220      	str	r2, [sp, #128]	; 0x80
 8003ac0:	dc02      	bgt.n	8003ac8 <_svfprintf_r+0x9b0>
 8003ac2:	3408      	adds	r4, #8
 8003ac4:	3b10      	subs	r3, #16
 8003ac6:	e61d      	b.n	8003704 <_svfprintf_r+0x5ec>
 8003ac8:	aa1f      	add	r2, sp, #124	; 0x7c
 8003aca:	4651      	mov	r1, sl
 8003acc:	4658      	mov	r0, fp
 8003ace:	930c      	str	r3, [sp, #48]	; 0x30
 8003ad0:	f001 fe6c 	bl	80057ac <__ssprint_r>
 8003ad4:	2800      	cmp	r0, #0
 8003ad6:	f040 8280 	bne.w	8003fda <_svfprintf_r+0xec2>
 8003ada:	ac2c      	add	r4, sp, #176	; 0xb0
 8003adc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003ade:	e7f1      	b.n	8003ac4 <_svfprintf_r+0x9ac>
 8003ae0:	aa1f      	add	r2, sp, #124	; 0x7c
 8003ae2:	4651      	mov	r1, sl
 8003ae4:	4658      	mov	r0, fp
 8003ae6:	f001 fe61 	bl	80057ac <__ssprint_r>
 8003aea:	2800      	cmp	r0, #0
 8003aec:	f040 8275 	bne.w	8003fda <_svfprintf_r+0xec2>
 8003af0:	ac2c      	add	r4, sp, #176	; 0xb0
 8003af2:	e617      	b.n	8003724 <_svfprintf_r+0x60c>
 8003af4:	2310      	movs	r3, #16
 8003af6:	6063      	str	r3, [r4, #4]
 8003af8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003afa:	3310      	adds	r3, #16
 8003afc:	9321      	str	r3, [sp, #132]	; 0x84
 8003afe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003b00:	3301      	adds	r3, #1
 8003b02:	2b07      	cmp	r3, #7
 8003b04:	9320      	str	r3, [sp, #128]	; 0x80
 8003b06:	dc02      	bgt.n	8003b0e <_svfprintf_r+0x9f6>
 8003b08:	3408      	adds	r4, #8
 8003b0a:	3e10      	subs	r6, #16
 8003b0c:	e60e      	b.n	800372c <_svfprintf_r+0x614>
 8003b0e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003b10:	4651      	mov	r1, sl
 8003b12:	4658      	mov	r0, fp
 8003b14:	f001 fe4a 	bl	80057ac <__ssprint_r>
 8003b18:	2800      	cmp	r0, #0
 8003b1a:	f040 825e 	bne.w	8003fda <_svfprintf_r+0xec2>
 8003b1e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003b20:	e7f3      	b.n	8003b0a <_svfprintf_r+0x9f2>
 8003b22:	aa1f      	add	r2, sp, #124	; 0x7c
 8003b24:	4651      	mov	r1, sl
 8003b26:	4658      	mov	r0, fp
 8003b28:	f001 fe40 	bl	80057ac <__ssprint_r>
 8003b2c:	2800      	cmp	r0, #0
 8003b2e:	f040 8254 	bne.w	8003fda <_svfprintf_r+0xec2>
 8003b32:	ac2c      	add	r4, sp, #176	; 0xb0
 8003b34:	e60a      	b.n	800374c <_svfprintf_r+0x634>
 8003b36:	9b02      	ldr	r3, [sp, #8]
 8003b38:	2b65      	cmp	r3, #101	; 0x65
 8003b3a:	f340 81a9 	ble.w	8003e90 <_svfprintf_r+0xd78>
 8003b3e:	2200      	movs	r2, #0
 8003b40:	2300      	movs	r3, #0
 8003b42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003b46:	f7fc ffbb 	bl	8000ac0 <__aeabi_dcmpeq>
 8003b4a:	2800      	cmp	r0, #0
 8003b4c:	d062      	beq.n	8003c14 <_svfprintf_r+0xafc>
 8003b4e:	4b2f      	ldr	r3, [pc, #188]	; (8003c0c <_svfprintf_r+0xaf4>)
 8003b50:	6023      	str	r3, [r4, #0]
 8003b52:	2301      	movs	r3, #1
 8003b54:	6063      	str	r3, [r4, #4]
 8003b56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003b58:	3301      	adds	r3, #1
 8003b5a:	9321      	str	r3, [sp, #132]	; 0x84
 8003b5c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003b5e:	3301      	adds	r3, #1
 8003b60:	2b07      	cmp	r3, #7
 8003b62:	9320      	str	r3, [sp, #128]	; 0x80
 8003b64:	dc25      	bgt.n	8003bb2 <_svfprintf_r+0xa9a>
 8003b66:	3408      	adds	r4, #8
 8003b68:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003b6a:	9a03      	ldr	r2, [sp, #12]
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	db02      	blt.n	8003b76 <_svfprintf_r+0xa5e>
 8003b70:	07ee      	lsls	r6, r5, #31
 8003b72:	f57f ae02 	bpl.w	800377a <_svfprintf_r+0x662>
 8003b76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b78:	6023      	str	r3, [r4, #0]
 8003b7a:	9b08      	ldr	r3, [sp, #32]
 8003b7c:	6063      	str	r3, [r4, #4]
 8003b7e:	9a08      	ldr	r2, [sp, #32]
 8003b80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003b82:	4413      	add	r3, r2
 8003b84:	9321      	str	r3, [sp, #132]	; 0x84
 8003b86:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003b88:	3301      	adds	r3, #1
 8003b8a:	2b07      	cmp	r3, #7
 8003b8c:	9320      	str	r3, [sp, #128]	; 0x80
 8003b8e:	dc1a      	bgt.n	8003bc6 <_svfprintf_r+0xaae>
 8003b90:	3408      	adds	r4, #8
 8003b92:	9b03      	ldr	r3, [sp, #12]
 8003b94:	1e5e      	subs	r6, r3, #1
 8003b96:	2e00      	cmp	r6, #0
 8003b98:	f77f adef 	ble.w	800377a <_svfprintf_r+0x662>
 8003b9c:	4f1c      	ldr	r7, [pc, #112]	; (8003c10 <_svfprintf_r+0xaf8>)
 8003b9e:	f04f 0810 	mov.w	r8, #16
 8003ba2:	2e10      	cmp	r6, #16
 8003ba4:	6027      	str	r7, [r4, #0]
 8003ba6:	dc18      	bgt.n	8003bda <_svfprintf_r+0xac2>
 8003ba8:	6066      	str	r6, [r4, #4]
 8003baa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003bac:	441e      	add	r6, r3
 8003bae:	9621      	str	r6, [sp, #132]	; 0x84
 8003bb0:	e5d4      	b.n	800375c <_svfprintf_r+0x644>
 8003bb2:	aa1f      	add	r2, sp, #124	; 0x7c
 8003bb4:	4651      	mov	r1, sl
 8003bb6:	4658      	mov	r0, fp
 8003bb8:	f001 fdf8 	bl	80057ac <__ssprint_r>
 8003bbc:	2800      	cmp	r0, #0
 8003bbe:	f040 820c 	bne.w	8003fda <_svfprintf_r+0xec2>
 8003bc2:	ac2c      	add	r4, sp, #176	; 0xb0
 8003bc4:	e7d0      	b.n	8003b68 <_svfprintf_r+0xa50>
 8003bc6:	aa1f      	add	r2, sp, #124	; 0x7c
 8003bc8:	4651      	mov	r1, sl
 8003bca:	4658      	mov	r0, fp
 8003bcc:	f001 fdee 	bl	80057ac <__ssprint_r>
 8003bd0:	2800      	cmp	r0, #0
 8003bd2:	f040 8202 	bne.w	8003fda <_svfprintf_r+0xec2>
 8003bd6:	ac2c      	add	r4, sp, #176	; 0xb0
 8003bd8:	e7db      	b.n	8003b92 <_svfprintf_r+0xa7a>
 8003bda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003bdc:	f8c4 8004 	str.w	r8, [r4, #4]
 8003be0:	3310      	adds	r3, #16
 8003be2:	9321      	str	r3, [sp, #132]	; 0x84
 8003be4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003be6:	3301      	adds	r3, #1
 8003be8:	2b07      	cmp	r3, #7
 8003bea:	9320      	str	r3, [sp, #128]	; 0x80
 8003bec:	dc02      	bgt.n	8003bf4 <_svfprintf_r+0xadc>
 8003bee:	3408      	adds	r4, #8
 8003bf0:	3e10      	subs	r6, #16
 8003bf2:	e7d6      	b.n	8003ba2 <_svfprintf_r+0xa8a>
 8003bf4:	aa1f      	add	r2, sp, #124	; 0x7c
 8003bf6:	4651      	mov	r1, sl
 8003bf8:	4658      	mov	r0, fp
 8003bfa:	f001 fdd7 	bl	80057ac <__ssprint_r>
 8003bfe:	2800      	cmp	r0, #0
 8003c00:	f040 81eb 	bne.w	8003fda <_svfprintf_r+0xec2>
 8003c04:	ac2c      	add	r4, sp, #176	; 0xb0
 8003c06:	e7f3      	b.n	8003bf0 <_svfprintf_r+0xad8>
 8003c08:	08005f71 	.word	0x08005f71
 8003c0c:	08005f82 	.word	0x08005f82
 8003c10:	08005f94 	.word	0x08005f94
 8003c14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	dc7a      	bgt.n	8003d10 <_svfprintf_r+0xbf8>
 8003c1a:	4b9b      	ldr	r3, [pc, #620]	; (8003e88 <_svfprintf_r+0xd70>)
 8003c1c:	6023      	str	r3, [r4, #0]
 8003c1e:	2301      	movs	r3, #1
 8003c20:	6063      	str	r3, [r4, #4]
 8003c22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003c24:	3301      	adds	r3, #1
 8003c26:	9321      	str	r3, [sp, #132]	; 0x84
 8003c28:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	2b07      	cmp	r3, #7
 8003c2e:	9320      	str	r3, [sp, #128]	; 0x80
 8003c30:	dc44      	bgt.n	8003cbc <_svfprintf_r+0xba4>
 8003c32:	3408      	adds	r4, #8
 8003c34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003c36:	b923      	cbnz	r3, 8003c42 <_svfprintf_r+0xb2a>
 8003c38:	9b03      	ldr	r3, [sp, #12]
 8003c3a:	b913      	cbnz	r3, 8003c42 <_svfprintf_r+0xb2a>
 8003c3c:	07e8      	lsls	r0, r5, #31
 8003c3e:	f57f ad9c 	bpl.w	800377a <_svfprintf_r+0x662>
 8003c42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c44:	6023      	str	r3, [r4, #0]
 8003c46:	9b08      	ldr	r3, [sp, #32]
 8003c48:	6063      	str	r3, [r4, #4]
 8003c4a:	9a08      	ldr	r2, [sp, #32]
 8003c4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003c4e:	4413      	add	r3, r2
 8003c50:	9321      	str	r3, [sp, #132]	; 0x84
 8003c52:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003c54:	3301      	adds	r3, #1
 8003c56:	2b07      	cmp	r3, #7
 8003c58:	9320      	str	r3, [sp, #128]	; 0x80
 8003c5a:	dc39      	bgt.n	8003cd0 <_svfprintf_r+0xbb8>
 8003c5c:	f104 0308 	add.w	r3, r4, #8
 8003c60:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8003c62:	2e00      	cmp	r6, #0
 8003c64:	da19      	bge.n	8003c9a <_svfprintf_r+0xb82>
 8003c66:	4f89      	ldr	r7, [pc, #548]	; (8003e8c <_svfprintf_r+0xd74>)
 8003c68:	4276      	negs	r6, r6
 8003c6a:	2410      	movs	r4, #16
 8003c6c:	2e10      	cmp	r6, #16
 8003c6e:	601f      	str	r7, [r3, #0]
 8003c70:	dc38      	bgt.n	8003ce4 <_svfprintf_r+0xbcc>
 8003c72:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003c74:	605e      	str	r6, [r3, #4]
 8003c76:	4416      	add	r6, r2
 8003c78:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003c7a:	9621      	str	r6, [sp, #132]	; 0x84
 8003c7c:	3201      	adds	r2, #1
 8003c7e:	2a07      	cmp	r2, #7
 8003c80:	f103 0308 	add.w	r3, r3, #8
 8003c84:	9220      	str	r2, [sp, #128]	; 0x80
 8003c86:	dd08      	ble.n	8003c9a <_svfprintf_r+0xb82>
 8003c88:	aa1f      	add	r2, sp, #124	; 0x7c
 8003c8a:	4651      	mov	r1, sl
 8003c8c:	4658      	mov	r0, fp
 8003c8e:	f001 fd8d 	bl	80057ac <__ssprint_r>
 8003c92:	2800      	cmp	r0, #0
 8003c94:	f040 81a1 	bne.w	8003fda <_svfprintf_r+0xec2>
 8003c98:	ab2c      	add	r3, sp, #176	; 0xb0
 8003c9a:	9a03      	ldr	r2, [sp, #12]
 8003c9c:	605a      	str	r2, [r3, #4]
 8003c9e:	9903      	ldr	r1, [sp, #12]
 8003ca0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003ca2:	f8c3 8000 	str.w	r8, [r3]
 8003ca6:	440a      	add	r2, r1
 8003ca8:	9221      	str	r2, [sp, #132]	; 0x84
 8003caa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003cac:	3201      	adds	r2, #1
 8003cae:	2a07      	cmp	r2, #7
 8003cb0:	9220      	str	r2, [sp, #128]	; 0x80
 8003cb2:	f73f ad59 	bgt.w	8003768 <_svfprintf_r+0x650>
 8003cb6:	f103 0408 	add.w	r4, r3, #8
 8003cba:	e55e      	b.n	800377a <_svfprintf_r+0x662>
 8003cbc:	aa1f      	add	r2, sp, #124	; 0x7c
 8003cbe:	4651      	mov	r1, sl
 8003cc0:	4658      	mov	r0, fp
 8003cc2:	f001 fd73 	bl	80057ac <__ssprint_r>
 8003cc6:	2800      	cmp	r0, #0
 8003cc8:	f040 8187 	bne.w	8003fda <_svfprintf_r+0xec2>
 8003ccc:	ac2c      	add	r4, sp, #176	; 0xb0
 8003cce:	e7b1      	b.n	8003c34 <_svfprintf_r+0xb1c>
 8003cd0:	aa1f      	add	r2, sp, #124	; 0x7c
 8003cd2:	4651      	mov	r1, sl
 8003cd4:	4658      	mov	r0, fp
 8003cd6:	f001 fd69 	bl	80057ac <__ssprint_r>
 8003cda:	2800      	cmp	r0, #0
 8003cdc:	f040 817d 	bne.w	8003fda <_svfprintf_r+0xec2>
 8003ce0:	ab2c      	add	r3, sp, #176	; 0xb0
 8003ce2:	e7bd      	b.n	8003c60 <_svfprintf_r+0xb48>
 8003ce4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003ce6:	605c      	str	r4, [r3, #4]
 8003ce8:	3210      	adds	r2, #16
 8003cea:	9221      	str	r2, [sp, #132]	; 0x84
 8003cec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003cee:	3201      	adds	r2, #1
 8003cf0:	2a07      	cmp	r2, #7
 8003cf2:	9220      	str	r2, [sp, #128]	; 0x80
 8003cf4:	dc02      	bgt.n	8003cfc <_svfprintf_r+0xbe4>
 8003cf6:	3308      	adds	r3, #8
 8003cf8:	3e10      	subs	r6, #16
 8003cfa:	e7b7      	b.n	8003c6c <_svfprintf_r+0xb54>
 8003cfc:	aa1f      	add	r2, sp, #124	; 0x7c
 8003cfe:	4651      	mov	r1, sl
 8003d00:	4658      	mov	r0, fp
 8003d02:	f001 fd53 	bl	80057ac <__ssprint_r>
 8003d06:	2800      	cmp	r0, #0
 8003d08:	f040 8167 	bne.w	8003fda <_svfprintf_r+0xec2>
 8003d0c:	ab2c      	add	r3, sp, #176	; 0xb0
 8003d0e:	e7f3      	b.n	8003cf8 <_svfprintf_r+0xbe0>
 8003d10:	9b03      	ldr	r3, [sp, #12]
 8003d12:	42bb      	cmp	r3, r7
 8003d14:	bfa8      	it	ge
 8003d16:	463b      	movge	r3, r7
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	461e      	mov	r6, r3
 8003d1c:	dd0b      	ble.n	8003d36 <_svfprintf_r+0xc1e>
 8003d1e:	6063      	str	r3, [r4, #4]
 8003d20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d22:	f8c4 8000 	str.w	r8, [r4]
 8003d26:	4433      	add	r3, r6
 8003d28:	9321      	str	r3, [sp, #132]	; 0x84
 8003d2a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	2b07      	cmp	r3, #7
 8003d30:	9320      	str	r3, [sp, #128]	; 0x80
 8003d32:	dc5f      	bgt.n	8003df4 <_svfprintf_r+0xcdc>
 8003d34:	3408      	adds	r4, #8
 8003d36:	2e00      	cmp	r6, #0
 8003d38:	bfac      	ite	ge
 8003d3a:	1bbe      	subge	r6, r7, r6
 8003d3c:	463e      	movlt	r6, r7
 8003d3e:	2e00      	cmp	r6, #0
 8003d40:	dd0f      	ble.n	8003d62 <_svfprintf_r+0xc4a>
 8003d42:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8003e8c <_svfprintf_r+0xd74>
 8003d46:	f8c4 9000 	str.w	r9, [r4]
 8003d4a:	2e10      	cmp	r6, #16
 8003d4c:	dc5c      	bgt.n	8003e08 <_svfprintf_r+0xcf0>
 8003d4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d50:	6066      	str	r6, [r4, #4]
 8003d52:	441e      	add	r6, r3
 8003d54:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003d56:	9621      	str	r6, [sp, #132]	; 0x84
 8003d58:	3301      	adds	r3, #1
 8003d5a:	2b07      	cmp	r3, #7
 8003d5c:	9320      	str	r3, [sp, #128]	; 0x80
 8003d5e:	dc6a      	bgt.n	8003e36 <_svfprintf_r+0xd1e>
 8003d60:	3408      	adds	r4, #8
 8003d62:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003d64:	9a03      	ldr	r2, [sp, #12]
 8003d66:	4293      	cmp	r3, r2
 8003d68:	db01      	blt.n	8003d6e <_svfprintf_r+0xc56>
 8003d6a:	07e9      	lsls	r1, r5, #31
 8003d6c:	d50d      	bpl.n	8003d8a <_svfprintf_r+0xc72>
 8003d6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d70:	6023      	str	r3, [r4, #0]
 8003d72:	9b08      	ldr	r3, [sp, #32]
 8003d74:	6063      	str	r3, [r4, #4]
 8003d76:	9a08      	ldr	r2, [sp, #32]
 8003d78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d7a:	4413      	add	r3, r2
 8003d7c:	9321      	str	r3, [sp, #132]	; 0x84
 8003d7e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003d80:	3301      	adds	r3, #1
 8003d82:	2b07      	cmp	r3, #7
 8003d84:	9320      	str	r3, [sp, #128]	; 0x80
 8003d86:	dc60      	bgt.n	8003e4a <_svfprintf_r+0xd32>
 8003d88:	3408      	adds	r4, #8
 8003d8a:	9b03      	ldr	r3, [sp, #12]
 8003d8c:	9a03      	ldr	r2, [sp, #12]
 8003d8e:	1bde      	subs	r6, r3, r7
 8003d90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	429e      	cmp	r6, r3
 8003d96:	bfa8      	it	ge
 8003d98:	461e      	movge	r6, r3
 8003d9a:	2e00      	cmp	r6, #0
 8003d9c:	dd0b      	ble.n	8003db6 <_svfprintf_r+0xc9e>
 8003d9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003da0:	6066      	str	r6, [r4, #4]
 8003da2:	4433      	add	r3, r6
 8003da4:	9321      	str	r3, [sp, #132]	; 0x84
 8003da6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003da8:	3301      	adds	r3, #1
 8003daa:	4447      	add	r7, r8
 8003dac:	2b07      	cmp	r3, #7
 8003dae:	6027      	str	r7, [r4, #0]
 8003db0:	9320      	str	r3, [sp, #128]	; 0x80
 8003db2:	dc54      	bgt.n	8003e5e <_svfprintf_r+0xd46>
 8003db4:	3408      	adds	r4, #8
 8003db6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003db8:	9a03      	ldr	r2, [sp, #12]
 8003dba:	2e00      	cmp	r6, #0
 8003dbc:	eba2 0303 	sub.w	r3, r2, r3
 8003dc0:	bfac      	ite	ge
 8003dc2:	1b9e      	subge	r6, r3, r6
 8003dc4:	461e      	movlt	r6, r3
 8003dc6:	2e00      	cmp	r6, #0
 8003dc8:	f77f acd7 	ble.w	800377a <_svfprintf_r+0x662>
 8003dcc:	4f2f      	ldr	r7, [pc, #188]	; (8003e8c <_svfprintf_r+0xd74>)
 8003dce:	f04f 0810 	mov.w	r8, #16
 8003dd2:	2e10      	cmp	r6, #16
 8003dd4:	6027      	str	r7, [r4, #0]
 8003dd6:	f77f aee7 	ble.w	8003ba8 <_svfprintf_r+0xa90>
 8003dda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ddc:	f8c4 8004 	str.w	r8, [r4, #4]
 8003de0:	3310      	adds	r3, #16
 8003de2:	9321      	str	r3, [sp, #132]	; 0x84
 8003de4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003de6:	3301      	adds	r3, #1
 8003de8:	2b07      	cmp	r3, #7
 8003dea:	9320      	str	r3, [sp, #128]	; 0x80
 8003dec:	dc41      	bgt.n	8003e72 <_svfprintf_r+0xd5a>
 8003dee:	3408      	adds	r4, #8
 8003df0:	3e10      	subs	r6, #16
 8003df2:	e7ee      	b.n	8003dd2 <_svfprintf_r+0xcba>
 8003df4:	aa1f      	add	r2, sp, #124	; 0x7c
 8003df6:	4651      	mov	r1, sl
 8003df8:	4658      	mov	r0, fp
 8003dfa:	f001 fcd7 	bl	80057ac <__ssprint_r>
 8003dfe:	2800      	cmp	r0, #0
 8003e00:	f040 80eb 	bne.w	8003fda <_svfprintf_r+0xec2>
 8003e04:	ac2c      	add	r4, sp, #176	; 0xb0
 8003e06:	e796      	b.n	8003d36 <_svfprintf_r+0xc1e>
 8003e08:	2310      	movs	r3, #16
 8003e0a:	6063      	str	r3, [r4, #4]
 8003e0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003e0e:	3310      	adds	r3, #16
 8003e10:	9321      	str	r3, [sp, #132]	; 0x84
 8003e12:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003e14:	3301      	adds	r3, #1
 8003e16:	2b07      	cmp	r3, #7
 8003e18:	9320      	str	r3, [sp, #128]	; 0x80
 8003e1a:	dc02      	bgt.n	8003e22 <_svfprintf_r+0xd0a>
 8003e1c:	3408      	adds	r4, #8
 8003e1e:	3e10      	subs	r6, #16
 8003e20:	e791      	b.n	8003d46 <_svfprintf_r+0xc2e>
 8003e22:	aa1f      	add	r2, sp, #124	; 0x7c
 8003e24:	4651      	mov	r1, sl
 8003e26:	4658      	mov	r0, fp
 8003e28:	f001 fcc0 	bl	80057ac <__ssprint_r>
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	f040 80d4 	bne.w	8003fda <_svfprintf_r+0xec2>
 8003e32:	ac2c      	add	r4, sp, #176	; 0xb0
 8003e34:	e7f3      	b.n	8003e1e <_svfprintf_r+0xd06>
 8003e36:	aa1f      	add	r2, sp, #124	; 0x7c
 8003e38:	4651      	mov	r1, sl
 8003e3a:	4658      	mov	r0, fp
 8003e3c:	f001 fcb6 	bl	80057ac <__ssprint_r>
 8003e40:	2800      	cmp	r0, #0
 8003e42:	f040 80ca 	bne.w	8003fda <_svfprintf_r+0xec2>
 8003e46:	ac2c      	add	r4, sp, #176	; 0xb0
 8003e48:	e78b      	b.n	8003d62 <_svfprintf_r+0xc4a>
 8003e4a:	aa1f      	add	r2, sp, #124	; 0x7c
 8003e4c:	4651      	mov	r1, sl
 8003e4e:	4658      	mov	r0, fp
 8003e50:	f001 fcac 	bl	80057ac <__ssprint_r>
 8003e54:	2800      	cmp	r0, #0
 8003e56:	f040 80c0 	bne.w	8003fda <_svfprintf_r+0xec2>
 8003e5a:	ac2c      	add	r4, sp, #176	; 0xb0
 8003e5c:	e795      	b.n	8003d8a <_svfprintf_r+0xc72>
 8003e5e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003e60:	4651      	mov	r1, sl
 8003e62:	4658      	mov	r0, fp
 8003e64:	f001 fca2 	bl	80057ac <__ssprint_r>
 8003e68:	2800      	cmp	r0, #0
 8003e6a:	f040 80b6 	bne.w	8003fda <_svfprintf_r+0xec2>
 8003e6e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003e70:	e7a1      	b.n	8003db6 <_svfprintf_r+0xc9e>
 8003e72:	aa1f      	add	r2, sp, #124	; 0x7c
 8003e74:	4651      	mov	r1, sl
 8003e76:	4658      	mov	r0, fp
 8003e78:	f001 fc98 	bl	80057ac <__ssprint_r>
 8003e7c:	2800      	cmp	r0, #0
 8003e7e:	f040 80ac 	bne.w	8003fda <_svfprintf_r+0xec2>
 8003e82:	ac2c      	add	r4, sp, #176	; 0xb0
 8003e84:	e7b4      	b.n	8003df0 <_svfprintf_r+0xcd8>
 8003e86:	bf00      	nop
 8003e88:	08005f82 	.word	0x08005f82
 8003e8c:	08005f94 	.word	0x08005f94
 8003e90:	9b03      	ldr	r3, [sp, #12]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	dc01      	bgt.n	8003e9a <_svfprintf_r+0xd82>
 8003e96:	07ea      	lsls	r2, r5, #31
 8003e98:	d576      	bpl.n	8003f88 <_svfprintf_r+0xe70>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	6063      	str	r3, [r4, #4]
 8003e9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ea0:	f8c4 8000 	str.w	r8, [r4]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	9321      	str	r3, [sp, #132]	; 0x84
 8003ea8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003eaa:	3301      	adds	r3, #1
 8003eac:	2b07      	cmp	r3, #7
 8003eae:	9320      	str	r3, [sp, #128]	; 0x80
 8003eb0:	dc36      	bgt.n	8003f20 <_svfprintf_r+0xe08>
 8003eb2:	3408      	adds	r4, #8
 8003eb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003eb6:	6023      	str	r3, [r4, #0]
 8003eb8:	9b08      	ldr	r3, [sp, #32]
 8003eba:	6063      	str	r3, [r4, #4]
 8003ebc:	9a08      	ldr	r2, [sp, #32]
 8003ebe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ec0:	4413      	add	r3, r2
 8003ec2:	9321      	str	r3, [sp, #132]	; 0x84
 8003ec4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	2b07      	cmp	r3, #7
 8003eca:	9320      	str	r3, [sp, #128]	; 0x80
 8003ecc:	dc31      	bgt.n	8003f32 <_svfprintf_r+0xe1a>
 8003ece:	3408      	adds	r4, #8
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ed8:	f7fc fdf2 	bl	8000ac0 <__aeabi_dcmpeq>
 8003edc:	9b03      	ldr	r3, [sp, #12]
 8003ede:	1e5e      	subs	r6, r3, #1
 8003ee0:	2800      	cmp	r0, #0
 8003ee2:	d12f      	bne.n	8003f44 <_svfprintf_r+0xe2c>
 8003ee4:	f108 0301 	add.w	r3, r8, #1
 8003ee8:	e884 0048 	stmia.w	r4, {r3, r6}
 8003eec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003eee:	9a03      	ldr	r2, [sp, #12]
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	4413      	add	r3, r2
 8003ef4:	9321      	str	r3, [sp, #132]	; 0x84
 8003ef6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003ef8:	3301      	adds	r3, #1
 8003efa:	2b07      	cmp	r3, #7
 8003efc:	9320      	str	r3, [sp, #128]	; 0x80
 8003efe:	dd4a      	ble.n	8003f96 <_svfprintf_r+0xe7e>
 8003f00:	aa1f      	add	r2, sp, #124	; 0x7c
 8003f02:	4651      	mov	r1, sl
 8003f04:	4658      	mov	r0, fp
 8003f06:	f001 fc51 	bl	80057ac <__ssprint_r>
 8003f0a:	2800      	cmp	r0, #0
 8003f0c:	d165      	bne.n	8003fda <_svfprintf_r+0xec2>
 8003f0e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003f10:	ab1b      	add	r3, sp, #108	; 0x6c
 8003f12:	6023      	str	r3, [r4, #0]
 8003f14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003f16:	6063      	str	r3, [r4, #4]
 8003f18:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003f1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f1c:	4413      	add	r3, r2
 8003f1e:	e41c      	b.n	800375a <_svfprintf_r+0x642>
 8003f20:	aa1f      	add	r2, sp, #124	; 0x7c
 8003f22:	4651      	mov	r1, sl
 8003f24:	4658      	mov	r0, fp
 8003f26:	f001 fc41 	bl	80057ac <__ssprint_r>
 8003f2a:	2800      	cmp	r0, #0
 8003f2c:	d155      	bne.n	8003fda <_svfprintf_r+0xec2>
 8003f2e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003f30:	e7c0      	b.n	8003eb4 <_svfprintf_r+0xd9c>
 8003f32:	aa1f      	add	r2, sp, #124	; 0x7c
 8003f34:	4651      	mov	r1, sl
 8003f36:	4658      	mov	r0, fp
 8003f38:	f001 fc38 	bl	80057ac <__ssprint_r>
 8003f3c:	2800      	cmp	r0, #0
 8003f3e:	d14c      	bne.n	8003fda <_svfprintf_r+0xec2>
 8003f40:	ac2c      	add	r4, sp, #176	; 0xb0
 8003f42:	e7c5      	b.n	8003ed0 <_svfprintf_r+0xdb8>
 8003f44:	2e00      	cmp	r6, #0
 8003f46:	dde3      	ble.n	8003f10 <_svfprintf_r+0xdf8>
 8003f48:	4f59      	ldr	r7, [pc, #356]	; (80040b0 <_svfprintf_r+0xf98>)
 8003f4a:	f04f 0810 	mov.w	r8, #16
 8003f4e:	2e10      	cmp	r6, #16
 8003f50:	6027      	str	r7, [r4, #0]
 8003f52:	dc04      	bgt.n	8003f5e <_svfprintf_r+0xe46>
 8003f54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f56:	6066      	str	r6, [r4, #4]
 8003f58:	441e      	add	r6, r3
 8003f5a:	9621      	str	r6, [sp, #132]	; 0x84
 8003f5c:	e7cb      	b.n	8003ef6 <_svfprintf_r+0xdde>
 8003f5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f60:	f8c4 8004 	str.w	r8, [r4, #4]
 8003f64:	3310      	adds	r3, #16
 8003f66:	9321      	str	r3, [sp, #132]	; 0x84
 8003f68:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	2b07      	cmp	r3, #7
 8003f6e:	9320      	str	r3, [sp, #128]	; 0x80
 8003f70:	dc02      	bgt.n	8003f78 <_svfprintf_r+0xe60>
 8003f72:	3408      	adds	r4, #8
 8003f74:	3e10      	subs	r6, #16
 8003f76:	e7ea      	b.n	8003f4e <_svfprintf_r+0xe36>
 8003f78:	aa1f      	add	r2, sp, #124	; 0x7c
 8003f7a:	4651      	mov	r1, sl
 8003f7c:	4658      	mov	r0, fp
 8003f7e:	f001 fc15 	bl	80057ac <__ssprint_r>
 8003f82:	bb50      	cbnz	r0, 8003fda <_svfprintf_r+0xec2>
 8003f84:	ac2c      	add	r4, sp, #176	; 0xb0
 8003f86:	e7f5      	b.n	8003f74 <_svfprintf_r+0xe5c>
 8003f88:	2301      	movs	r3, #1
 8003f8a:	6063      	str	r3, [r4, #4]
 8003f8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f8e:	f8c4 8000 	str.w	r8, [r4]
 8003f92:	3301      	adds	r3, #1
 8003f94:	e7ae      	b.n	8003ef4 <_svfprintf_r+0xddc>
 8003f96:	3408      	adds	r4, #8
 8003f98:	e7ba      	b.n	8003f10 <_svfprintf_r+0xdf8>
 8003f9a:	3408      	adds	r4, #8
 8003f9c:	f7ff bbed 	b.w	800377a <_svfprintf_r+0x662>
 8003fa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fa2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003fa4:	1a9d      	subs	r5, r3, r2
 8003fa6:	2d00      	cmp	r5, #0
 8003fa8:	f77f abea 	ble.w	8003780 <_svfprintf_r+0x668>
 8003fac:	2610      	movs	r6, #16
 8003fae:	4b41      	ldr	r3, [pc, #260]	; (80040b4 <_svfprintf_r+0xf9c>)
 8003fb0:	6023      	str	r3, [r4, #0]
 8003fb2:	2d10      	cmp	r5, #16
 8003fb4:	dc1b      	bgt.n	8003fee <_svfprintf_r+0xed6>
 8003fb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003fb8:	6065      	str	r5, [r4, #4]
 8003fba:	441d      	add	r5, r3
 8003fbc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003fbe:	9521      	str	r5, [sp, #132]	; 0x84
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	2b07      	cmp	r3, #7
 8003fc4:	9320      	str	r3, [sp, #128]	; 0x80
 8003fc6:	f77f abdb 	ble.w	8003780 <_svfprintf_r+0x668>
 8003fca:	aa1f      	add	r2, sp, #124	; 0x7c
 8003fcc:	4651      	mov	r1, sl
 8003fce:	4658      	mov	r0, fp
 8003fd0:	f001 fbec 	bl	80057ac <__ssprint_r>
 8003fd4:	2800      	cmp	r0, #0
 8003fd6:	f43f abd3 	beq.w	8003780 <_svfprintf_r+0x668>
 8003fda:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003fde:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fe4:	bf18      	it	ne
 8003fe6:	f04f 33ff 	movne.w	r3, #4294967295
 8003fea:	f7ff b8b9 	b.w	8003160 <_svfprintf_r+0x48>
 8003fee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ff0:	6066      	str	r6, [r4, #4]
 8003ff2:	3310      	adds	r3, #16
 8003ff4:	9321      	str	r3, [sp, #132]	; 0x84
 8003ff6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	2b07      	cmp	r3, #7
 8003ffc:	9320      	str	r3, [sp, #128]	; 0x80
 8003ffe:	dc02      	bgt.n	8004006 <_svfprintf_r+0xeee>
 8004000:	3408      	adds	r4, #8
 8004002:	3d10      	subs	r5, #16
 8004004:	e7d3      	b.n	8003fae <_svfprintf_r+0xe96>
 8004006:	aa1f      	add	r2, sp, #124	; 0x7c
 8004008:	4651      	mov	r1, sl
 800400a:	4658      	mov	r0, fp
 800400c:	f001 fbce 	bl	80057ac <__ssprint_r>
 8004010:	2800      	cmp	r0, #0
 8004012:	d1e2      	bne.n	8003fda <_svfprintf_r+0xec2>
 8004014:	ac2c      	add	r4, sp, #176	; 0xb0
 8004016:	e7f4      	b.n	8004002 <_svfprintf_r+0xeea>
 8004018:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0dd      	beq.n	8003fda <_svfprintf_r+0xec2>
 800401e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004020:	4651      	mov	r1, sl
 8004022:	4658      	mov	r0, fp
 8004024:	f001 fbc2 	bl	80057ac <__ssprint_r>
 8004028:	e7d7      	b.n	8003fda <_svfprintf_r+0xec2>
 800402a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800402e:	4610      	mov	r0, r2
 8004030:	4619      	mov	r1, r3
 8004032:	f7fc fd77 	bl	8000b24 <__aeabi_dcmpun>
 8004036:	2800      	cmp	r0, #0
 8004038:	f43f aa44 	beq.w	80034c4 <_svfprintf_r+0x3ac>
 800403c:	4b1e      	ldr	r3, [pc, #120]	; (80040b8 <_svfprintf_r+0xfa0>)
 800403e:	4a1f      	ldr	r2, [pc, #124]	; (80040bc <_svfprintf_r+0xfa4>)
 8004040:	f7ff ba34 	b.w	80034ac <_svfprintf_r+0x394>
 8004044:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004046:	eba3 0308 	sub.w	r3, r3, r8
 800404a:	9303      	str	r3, [sp, #12]
 800404c:	f7ff bab5 	b.w	80035ba <_svfprintf_r+0x4a2>
 8004050:	ea56 0207 	orrs.w	r2, r6, r7
 8004054:	950b      	str	r5, [sp, #44]	; 0x2c
 8004056:	f43f ac2b 	beq.w	80038b0 <_svfprintf_r+0x798>
 800405a:	2b01      	cmp	r3, #1
 800405c:	f43f ac9d 	beq.w	800399a <_svfprintf_r+0x882>
 8004060:	2b02      	cmp	r3, #2
 8004062:	f43f acbd 	beq.w	80039e0 <_svfprintf_r+0x8c8>
 8004066:	ab2c      	add	r3, sp, #176	; 0xb0
 8004068:	08f1      	lsrs	r1, r6, #3
 800406a:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800406e:	08f8      	lsrs	r0, r7, #3
 8004070:	f006 0207 	and.w	r2, r6, #7
 8004074:	4607      	mov	r7, r0
 8004076:	460e      	mov	r6, r1
 8004078:	3230      	adds	r2, #48	; 0x30
 800407a:	ea56 0107 	orrs.w	r1, r6, r7
 800407e:	f103 38ff 	add.w	r8, r3, #4294967295
 8004082:	f803 2c01 	strb.w	r2, [r3, #-1]
 8004086:	f47f ac86 	bne.w	8003996 <_svfprintf_r+0x87e>
 800408a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800408c:	07c9      	lsls	r1, r1, #31
 800408e:	d506      	bpl.n	800409e <_svfprintf_r+0xf86>
 8004090:	2a30      	cmp	r2, #48	; 0x30
 8004092:	d004      	beq.n	800409e <_svfprintf_r+0xf86>
 8004094:	2230      	movs	r2, #48	; 0x30
 8004096:	f808 2c01 	strb.w	r2, [r8, #-1]
 800409a:	f1a3 0802 	sub.w	r8, r3, #2
 800409e:	464e      	mov	r6, r9
 80040a0:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80040a4:	eba9 0908 	sub.w	r9, r9, r8
 80040a8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80040aa:	2700      	movs	r7, #0
 80040ac:	f7ff bad1 	b.w	8003652 <_svfprintf_r+0x53a>
 80040b0:	08005f94 	.word	0x08005f94
 80040b4:	08005f84 	.word	0x08005f84
 80040b8:	08005f58 	.word	0x08005f58
 80040bc:	08005f5c 	.word	0x08005f5c

080040c0 <quorem>:
 80040c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040c4:	6903      	ldr	r3, [r0, #16]
 80040c6:	690c      	ldr	r4, [r1, #16]
 80040c8:	429c      	cmp	r4, r3
 80040ca:	4680      	mov	r8, r0
 80040cc:	f300 8082 	bgt.w	80041d4 <quorem+0x114>
 80040d0:	3c01      	subs	r4, #1
 80040d2:	f101 0714 	add.w	r7, r1, #20
 80040d6:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80040da:	f100 0614 	add.w	r6, r0, #20
 80040de:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80040e2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80040e6:	eb06 030e 	add.w	r3, r6, lr
 80040ea:	3501      	adds	r5, #1
 80040ec:	eb07 090e 	add.w	r9, r7, lr
 80040f0:	9301      	str	r3, [sp, #4]
 80040f2:	fbb0 f5f5 	udiv	r5, r0, r5
 80040f6:	b395      	cbz	r5, 800415e <quorem+0x9e>
 80040f8:	f04f 0a00 	mov.w	sl, #0
 80040fc:	4638      	mov	r0, r7
 80040fe:	46b4      	mov	ip, r6
 8004100:	46d3      	mov	fp, sl
 8004102:	f850 2b04 	ldr.w	r2, [r0], #4
 8004106:	b293      	uxth	r3, r2
 8004108:	fb05 a303 	mla	r3, r5, r3, sl
 800410c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004110:	b29b      	uxth	r3, r3
 8004112:	ebab 0303 	sub.w	r3, fp, r3
 8004116:	0c12      	lsrs	r2, r2, #16
 8004118:	f8bc b000 	ldrh.w	fp, [ip]
 800411c:	fb05 a202 	mla	r2, r5, r2, sl
 8004120:	fa13 f38b 	uxtah	r3, r3, fp
 8004124:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004128:	fa1f fb82 	uxth.w	fp, r2
 800412c:	f8dc 2000 	ldr.w	r2, [ip]
 8004130:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004134:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004138:	b29b      	uxth	r3, r3
 800413a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800413e:	4581      	cmp	r9, r0
 8004140:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004144:	f84c 3b04 	str.w	r3, [ip], #4
 8004148:	d2db      	bcs.n	8004102 <quorem+0x42>
 800414a:	f856 300e 	ldr.w	r3, [r6, lr]
 800414e:	b933      	cbnz	r3, 800415e <quorem+0x9e>
 8004150:	9b01      	ldr	r3, [sp, #4]
 8004152:	3b04      	subs	r3, #4
 8004154:	429e      	cmp	r6, r3
 8004156:	461a      	mov	r2, r3
 8004158:	d330      	bcc.n	80041bc <quorem+0xfc>
 800415a:	f8c8 4010 	str.w	r4, [r8, #16]
 800415e:	4640      	mov	r0, r8
 8004160:	f001 fa4d 	bl	80055fe <__mcmp>
 8004164:	2800      	cmp	r0, #0
 8004166:	db25      	blt.n	80041b4 <quorem+0xf4>
 8004168:	3501      	adds	r5, #1
 800416a:	4630      	mov	r0, r6
 800416c:	f04f 0e00 	mov.w	lr, #0
 8004170:	f857 2b04 	ldr.w	r2, [r7], #4
 8004174:	f8d0 c000 	ldr.w	ip, [r0]
 8004178:	b293      	uxth	r3, r2
 800417a:	ebae 0303 	sub.w	r3, lr, r3
 800417e:	0c12      	lsrs	r2, r2, #16
 8004180:	fa13 f38c 	uxtah	r3, r3, ip
 8004184:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004188:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800418c:	b29b      	uxth	r3, r3
 800418e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004192:	45b9      	cmp	r9, r7
 8004194:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8004198:	f840 3b04 	str.w	r3, [r0], #4
 800419c:	d2e8      	bcs.n	8004170 <quorem+0xb0>
 800419e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80041a2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80041a6:	b92a      	cbnz	r2, 80041b4 <quorem+0xf4>
 80041a8:	3b04      	subs	r3, #4
 80041aa:	429e      	cmp	r6, r3
 80041ac:	461a      	mov	r2, r3
 80041ae:	d30b      	bcc.n	80041c8 <quorem+0x108>
 80041b0:	f8c8 4010 	str.w	r4, [r8, #16]
 80041b4:	4628      	mov	r0, r5
 80041b6:	b003      	add	sp, #12
 80041b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041bc:	6812      	ldr	r2, [r2, #0]
 80041be:	3b04      	subs	r3, #4
 80041c0:	2a00      	cmp	r2, #0
 80041c2:	d1ca      	bne.n	800415a <quorem+0x9a>
 80041c4:	3c01      	subs	r4, #1
 80041c6:	e7c5      	b.n	8004154 <quorem+0x94>
 80041c8:	6812      	ldr	r2, [r2, #0]
 80041ca:	3b04      	subs	r3, #4
 80041cc:	2a00      	cmp	r2, #0
 80041ce:	d1ef      	bne.n	80041b0 <quorem+0xf0>
 80041d0:	3c01      	subs	r4, #1
 80041d2:	e7ea      	b.n	80041aa <quorem+0xea>
 80041d4:	2000      	movs	r0, #0
 80041d6:	e7ee      	b.n	80041b6 <quorem+0xf6>

080041d8 <_dtoa_r>:
 80041d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041dc:	ec57 6b10 	vmov	r6, r7, d0
 80041e0:	b097      	sub	sp, #92	; 0x5c
 80041e2:	e9cd 6700 	strd	r6, r7, [sp]
 80041e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80041e8:	9107      	str	r1, [sp, #28]
 80041ea:	4604      	mov	r4, r0
 80041ec:	920a      	str	r2, [sp, #40]	; 0x28
 80041ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80041f0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80041f2:	b93e      	cbnz	r6, 8004204 <_dtoa_r+0x2c>
 80041f4:	2010      	movs	r0, #16
 80041f6:	f000 fdcb 	bl	8004d90 <malloc>
 80041fa:	6260      	str	r0, [r4, #36]	; 0x24
 80041fc:	6046      	str	r6, [r0, #4]
 80041fe:	6086      	str	r6, [r0, #8]
 8004200:	6006      	str	r6, [r0, #0]
 8004202:	60c6      	str	r6, [r0, #12]
 8004204:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004206:	6819      	ldr	r1, [r3, #0]
 8004208:	b151      	cbz	r1, 8004220 <_dtoa_r+0x48>
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	604a      	str	r2, [r1, #4]
 800420e:	2301      	movs	r3, #1
 8004210:	4093      	lsls	r3, r2
 8004212:	608b      	str	r3, [r1, #8]
 8004214:	4620      	mov	r0, r4
 8004216:	f001 f81d 	bl	8005254 <_Bfree>
 800421a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	9b01      	ldr	r3, [sp, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	bfbf      	itttt	lt
 8004226:	2301      	movlt	r3, #1
 8004228:	602b      	strlt	r3, [r5, #0]
 800422a:	9b01      	ldrlt	r3, [sp, #4]
 800422c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004230:	bfb2      	itee	lt
 8004232:	9301      	strlt	r3, [sp, #4]
 8004234:	2300      	movge	r3, #0
 8004236:	602b      	strge	r3, [r5, #0]
 8004238:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800423c:	4ba8      	ldr	r3, [pc, #672]	; (80044e0 <_dtoa_r+0x308>)
 800423e:	ea33 0308 	bics.w	r3, r3, r8
 8004242:	d11b      	bne.n	800427c <_dtoa_r+0xa4>
 8004244:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004246:	f242 730f 	movw	r3, #9999	; 0x270f
 800424a:	6013      	str	r3, [r2, #0]
 800424c:	9b00      	ldr	r3, [sp, #0]
 800424e:	b923      	cbnz	r3, 800425a <_dtoa_r+0x82>
 8004250:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004254:	2800      	cmp	r0, #0
 8004256:	f000 8578 	beq.w	8004d4a <_dtoa_r+0xb72>
 800425a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800425c:	b953      	cbnz	r3, 8004274 <_dtoa_r+0x9c>
 800425e:	4ba1      	ldr	r3, [pc, #644]	; (80044e4 <_dtoa_r+0x30c>)
 8004260:	e021      	b.n	80042a6 <_dtoa_r+0xce>
 8004262:	4ba1      	ldr	r3, [pc, #644]	; (80044e8 <_dtoa_r+0x310>)
 8004264:	9302      	str	r3, [sp, #8]
 8004266:	3308      	adds	r3, #8
 8004268:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800426a:	6013      	str	r3, [r2, #0]
 800426c:	9802      	ldr	r0, [sp, #8]
 800426e:	b017      	add	sp, #92	; 0x5c
 8004270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004274:	4b9b      	ldr	r3, [pc, #620]	; (80044e4 <_dtoa_r+0x30c>)
 8004276:	9302      	str	r3, [sp, #8]
 8004278:	3303      	adds	r3, #3
 800427a:	e7f5      	b.n	8004268 <_dtoa_r+0x90>
 800427c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004280:	2200      	movs	r2, #0
 8004282:	2300      	movs	r3, #0
 8004284:	4630      	mov	r0, r6
 8004286:	4639      	mov	r1, r7
 8004288:	f7fc fc1a 	bl	8000ac0 <__aeabi_dcmpeq>
 800428c:	4681      	mov	r9, r0
 800428e:	b160      	cbz	r0, 80042aa <_dtoa_r+0xd2>
 8004290:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004292:	2301      	movs	r3, #1
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 8553 	beq.w	8004d44 <_dtoa_r+0xb6c>
 800429e:	4b93      	ldr	r3, [pc, #588]	; (80044ec <_dtoa_r+0x314>)
 80042a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80042a2:	6013      	str	r3, [r2, #0]
 80042a4:	3b01      	subs	r3, #1
 80042a6:	9302      	str	r3, [sp, #8]
 80042a8:	e7e0      	b.n	800426c <_dtoa_r+0x94>
 80042aa:	aa14      	add	r2, sp, #80	; 0x50
 80042ac:	a915      	add	r1, sp, #84	; 0x54
 80042ae:	ec47 6b10 	vmov	d0, r6, r7
 80042b2:	4620      	mov	r0, r4
 80042b4:	f001 fa1b 	bl	80056ee <__d2b>
 80042b8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80042bc:	4682      	mov	sl, r0
 80042be:	2d00      	cmp	r5, #0
 80042c0:	d07e      	beq.n	80043c0 <_dtoa_r+0x1e8>
 80042c2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80042c6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80042ca:	4630      	mov	r0, r6
 80042cc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80042d0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80042d4:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 80042d8:	2200      	movs	r2, #0
 80042da:	4b85      	ldr	r3, [pc, #532]	; (80044f0 <_dtoa_r+0x318>)
 80042dc:	f7fb ffd4 	bl	8000288 <__aeabi_dsub>
 80042e0:	a379      	add	r3, pc, #484	; (adr r3, 80044c8 <_dtoa_r+0x2f0>)
 80042e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e6:	f7fc f983 	bl	80005f0 <__aeabi_dmul>
 80042ea:	a379      	add	r3, pc, #484	; (adr r3, 80044d0 <_dtoa_r+0x2f8>)
 80042ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f0:	f7fb ffcc 	bl	800028c <__adddf3>
 80042f4:	4606      	mov	r6, r0
 80042f6:	4628      	mov	r0, r5
 80042f8:	460f      	mov	r7, r1
 80042fa:	f7fc f913 	bl	8000524 <__aeabi_i2d>
 80042fe:	a376      	add	r3, pc, #472	; (adr r3, 80044d8 <_dtoa_r+0x300>)
 8004300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004304:	f7fc f974 	bl	80005f0 <__aeabi_dmul>
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	4630      	mov	r0, r6
 800430e:	4639      	mov	r1, r7
 8004310:	f7fb ffbc 	bl	800028c <__adddf3>
 8004314:	4606      	mov	r6, r0
 8004316:	460f      	mov	r7, r1
 8004318:	f7fc fc1a 	bl	8000b50 <__aeabi_d2iz>
 800431c:	2200      	movs	r2, #0
 800431e:	4683      	mov	fp, r0
 8004320:	2300      	movs	r3, #0
 8004322:	4630      	mov	r0, r6
 8004324:	4639      	mov	r1, r7
 8004326:	f7fc fbd5 	bl	8000ad4 <__aeabi_dcmplt>
 800432a:	b158      	cbz	r0, 8004344 <_dtoa_r+0x16c>
 800432c:	4658      	mov	r0, fp
 800432e:	f7fc f8f9 	bl	8000524 <__aeabi_i2d>
 8004332:	4602      	mov	r2, r0
 8004334:	460b      	mov	r3, r1
 8004336:	4630      	mov	r0, r6
 8004338:	4639      	mov	r1, r7
 800433a:	f7fc fbc1 	bl	8000ac0 <__aeabi_dcmpeq>
 800433e:	b908      	cbnz	r0, 8004344 <_dtoa_r+0x16c>
 8004340:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004344:	f1bb 0f16 	cmp.w	fp, #22
 8004348:	d859      	bhi.n	80043fe <_dtoa_r+0x226>
 800434a:	496a      	ldr	r1, [pc, #424]	; (80044f4 <_dtoa_r+0x31c>)
 800434c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8004350:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004354:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004358:	f7fc fbda 	bl	8000b10 <__aeabi_dcmpgt>
 800435c:	2800      	cmp	r0, #0
 800435e:	d050      	beq.n	8004402 <_dtoa_r+0x22a>
 8004360:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004364:	2300      	movs	r3, #0
 8004366:	930e      	str	r3, [sp, #56]	; 0x38
 8004368:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800436a:	1b5d      	subs	r5, r3, r5
 800436c:	1e6b      	subs	r3, r5, #1
 800436e:	9306      	str	r3, [sp, #24]
 8004370:	bf45      	ittet	mi
 8004372:	f1c5 0301 	rsbmi	r3, r5, #1
 8004376:	9305      	strmi	r3, [sp, #20]
 8004378:	2300      	movpl	r3, #0
 800437a:	2300      	movmi	r3, #0
 800437c:	bf4c      	ite	mi
 800437e:	9306      	strmi	r3, [sp, #24]
 8004380:	9305      	strpl	r3, [sp, #20]
 8004382:	f1bb 0f00 	cmp.w	fp, #0
 8004386:	db3e      	blt.n	8004406 <_dtoa_r+0x22e>
 8004388:	9b06      	ldr	r3, [sp, #24]
 800438a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800438e:	445b      	add	r3, fp
 8004390:	9306      	str	r3, [sp, #24]
 8004392:	2300      	movs	r3, #0
 8004394:	9308      	str	r3, [sp, #32]
 8004396:	9b07      	ldr	r3, [sp, #28]
 8004398:	2b09      	cmp	r3, #9
 800439a:	f200 80af 	bhi.w	80044fc <_dtoa_r+0x324>
 800439e:	2b05      	cmp	r3, #5
 80043a0:	bfc4      	itt	gt
 80043a2:	3b04      	subgt	r3, #4
 80043a4:	9307      	strgt	r3, [sp, #28]
 80043a6:	9b07      	ldr	r3, [sp, #28]
 80043a8:	f1a3 0302 	sub.w	r3, r3, #2
 80043ac:	bfcc      	ite	gt
 80043ae:	2600      	movgt	r6, #0
 80043b0:	2601      	movle	r6, #1
 80043b2:	2b03      	cmp	r3, #3
 80043b4:	f200 80ae 	bhi.w	8004514 <_dtoa_r+0x33c>
 80043b8:	e8df f003 	tbb	[pc, r3]
 80043bc:	772f8482 	.word	0x772f8482
 80043c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80043c2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80043c4:	441d      	add	r5, r3
 80043c6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80043ca:	2b20      	cmp	r3, #32
 80043cc:	dd11      	ble.n	80043f2 <_dtoa_r+0x21a>
 80043ce:	9a00      	ldr	r2, [sp, #0]
 80043d0:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80043d4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80043d8:	fa22 f000 	lsr.w	r0, r2, r0
 80043dc:	fa08 f303 	lsl.w	r3, r8, r3
 80043e0:	4318      	orrs	r0, r3
 80043e2:	f7fc f88f 	bl	8000504 <__aeabi_ui2d>
 80043e6:	2301      	movs	r3, #1
 80043e8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80043ec:	3d01      	subs	r5, #1
 80043ee:	9312      	str	r3, [sp, #72]	; 0x48
 80043f0:	e772      	b.n	80042d8 <_dtoa_r+0x100>
 80043f2:	f1c3 0020 	rsb	r0, r3, #32
 80043f6:	9b00      	ldr	r3, [sp, #0]
 80043f8:	fa03 f000 	lsl.w	r0, r3, r0
 80043fc:	e7f1      	b.n	80043e2 <_dtoa_r+0x20a>
 80043fe:	2301      	movs	r3, #1
 8004400:	e7b1      	b.n	8004366 <_dtoa_r+0x18e>
 8004402:	900e      	str	r0, [sp, #56]	; 0x38
 8004404:	e7b0      	b.n	8004368 <_dtoa_r+0x190>
 8004406:	9b05      	ldr	r3, [sp, #20]
 8004408:	eba3 030b 	sub.w	r3, r3, fp
 800440c:	9305      	str	r3, [sp, #20]
 800440e:	f1cb 0300 	rsb	r3, fp, #0
 8004412:	9308      	str	r3, [sp, #32]
 8004414:	2300      	movs	r3, #0
 8004416:	930b      	str	r3, [sp, #44]	; 0x2c
 8004418:	e7bd      	b.n	8004396 <_dtoa_r+0x1be>
 800441a:	2301      	movs	r3, #1
 800441c:	9309      	str	r3, [sp, #36]	; 0x24
 800441e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004420:	2b00      	cmp	r3, #0
 8004422:	dd7a      	ble.n	800451a <_dtoa_r+0x342>
 8004424:	9304      	str	r3, [sp, #16]
 8004426:	9303      	str	r3, [sp, #12]
 8004428:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800442a:	2200      	movs	r2, #0
 800442c:	606a      	str	r2, [r5, #4]
 800442e:	2104      	movs	r1, #4
 8004430:	f101 0214 	add.w	r2, r1, #20
 8004434:	429a      	cmp	r2, r3
 8004436:	d975      	bls.n	8004524 <_dtoa_r+0x34c>
 8004438:	6869      	ldr	r1, [r5, #4]
 800443a:	4620      	mov	r0, r4
 800443c:	f000 fed6 	bl	80051ec <_Balloc>
 8004440:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004442:	6028      	str	r0, [r5, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	9302      	str	r3, [sp, #8]
 8004448:	9b03      	ldr	r3, [sp, #12]
 800444a:	2b0e      	cmp	r3, #14
 800444c:	f200 80e5 	bhi.w	800461a <_dtoa_r+0x442>
 8004450:	2e00      	cmp	r6, #0
 8004452:	f000 80e2 	beq.w	800461a <_dtoa_r+0x442>
 8004456:	ed9d 7b00 	vldr	d7, [sp]
 800445a:	f1bb 0f00 	cmp.w	fp, #0
 800445e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8004462:	dd74      	ble.n	800454e <_dtoa_r+0x376>
 8004464:	4a23      	ldr	r2, [pc, #140]	; (80044f4 <_dtoa_r+0x31c>)
 8004466:	f00b 030f 	and.w	r3, fp, #15
 800446a:	ea4f 162b 	mov.w	r6, fp, asr #4
 800446e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004472:	06f0      	lsls	r0, r6, #27
 8004474:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004478:	d559      	bpl.n	800452e <_dtoa_r+0x356>
 800447a:	4b1f      	ldr	r3, [pc, #124]	; (80044f8 <_dtoa_r+0x320>)
 800447c:	ec51 0b17 	vmov	r0, r1, d7
 8004480:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004484:	f7fc f9de 	bl	8000844 <__aeabi_ddiv>
 8004488:	e9cd 0100 	strd	r0, r1, [sp]
 800448c:	f006 060f 	and.w	r6, r6, #15
 8004490:	2503      	movs	r5, #3
 8004492:	4f19      	ldr	r7, [pc, #100]	; (80044f8 <_dtoa_r+0x320>)
 8004494:	2e00      	cmp	r6, #0
 8004496:	d14c      	bne.n	8004532 <_dtoa_r+0x35a>
 8004498:	4642      	mov	r2, r8
 800449a:	464b      	mov	r3, r9
 800449c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80044a0:	f7fc f9d0 	bl	8000844 <__aeabi_ddiv>
 80044a4:	e9cd 0100 	strd	r0, r1, [sp]
 80044a8:	e06a      	b.n	8004580 <_dtoa_r+0x3a8>
 80044aa:	2301      	movs	r3, #1
 80044ac:	9309      	str	r3, [sp, #36]	; 0x24
 80044ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044b0:	445b      	add	r3, fp
 80044b2:	9304      	str	r3, [sp, #16]
 80044b4:	3301      	adds	r3, #1
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	9303      	str	r3, [sp, #12]
 80044ba:	bfb8      	it	lt
 80044bc:	2301      	movlt	r3, #1
 80044be:	e7b3      	b.n	8004428 <_dtoa_r+0x250>
 80044c0:	2300      	movs	r3, #0
 80044c2:	e7ab      	b.n	800441c <_dtoa_r+0x244>
 80044c4:	2300      	movs	r3, #0
 80044c6:	e7f1      	b.n	80044ac <_dtoa_r+0x2d4>
 80044c8:	636f4361 	.word	0x636f4361
 80044cc:	3fd287a7 	.word	0x3fd287a7
 80044d0:	8b60c8b3 	.word	0x8b60c8b3
 80044d4:	3fc68a28 	.word	0x3fc68a28
 80044d8:	509f79fb 	.word	0x509f79fb
 80044dc:	3fd34413 	.word	0x3fd34413
 80044e0:	7ff00000 	.word	0x7ff00000
 80044e4:	08005fad 	.word	0x08005fad
 80044e8:	08005fa4 	.word	0x08005fa4
 80044ec:	08005f83 	.word	0x08005f83
 80044f0:	3ff80000 	.word	0x3ff80000
 80044f4:	08005fe0 	.word	0x08005fe0
 80044f8:	08005fb8 	.word	0x08005fb8
 80044fc:	2601      	movs	r6, #1
 80044fe:	2300      	movs	r3, #0
 8004500:	9307      	str	r3, [sp, #28]
 8004502:	9609      	str	r6, [sp, #36]	; 0x24
 8004504:	f04f 33ff 	mov.w	r3, #4294967295
 8004508:	9304      	str	r3, [sp, #16]
 800450a:	9303      	str	r3, [sp, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	2312      	movs	r3, #18
 8004510:	920a      	str	r2, [sp, #40]	; 0x28
 8004512:	e789      	b.n	8004428 <_dtoa_r+0x250>
 8004514:	2301      	movs	r3, #1
 8004516:	9309      	str	r3, [sp, #36]	; 0x24
 8004518:	e7f4      	b.n	8004504 <_dtoa_r+0x32c>
 800451a:	2301      	movs	r3, #1
 800451c:	9304      	str	r3, [sp, #16]
 800451e:	9303      	str	r3, [sp, #12]
 8004520:	461a      	mov	r2, r3
 8004522:	e7f5      	b.n	8004510 <_dtoa_r+0x338>
 8004524:	686a      	ldr	r2, [r5, #4]
 8004526:	3201      	adds	r2, #1
 8004528:	606a      	str	r2, [r5, #4]
 800452a:	0049      	lsls	r1, r1, #1
 800452c:	e780      	b.n	8004430 <_dtoa_r+0x258>
 800452e:	2502      	movs	r5, #2
 8004530:	e7af      	b.n	8004492 <_dtoa_r+0x2ba>
 8004532:	07f1      	lsls	r1, r6, #31
 8004534:	d508      	bpl.n	8004548 <_dtoa_r+0x370>
 8004536:	4640      	mov	r0, r8
 8004538:	4649      	mov	r1, r9
 800453a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800453e:	f7fc f857 	bl	80005f0 <__aeabi_dmul>
 8004542:	3501      	adds	r5, #1
 8004544:	4680      	mov	r8, r0
 8004546:	4689      	mov	r9, r1
 8004548:	1076      	asrs	r6, r6, #1
 800454a:	3708      	adds	r7, #8
 800454c:	e7a2      	b.n	8004494 <_dtoa_r+0x2bc>
 800454e:	f000 809d 	beq.w	800468c <_dtoa_r+0x4b4>
 8004552:	f1cb 0600 	rsb	r6, fp, #0
 8004556:	4b9f      	ldr	r3, [pc, #636]	; (80047d4 <_dtoa_r+0x5fc>)
 8004558:	4f9f      	ldr	r7, [pc, #636]	; (80047d8 <_dtoa_r+0x600>)
 800455a:	f006 020f 	and.w	r2, r6, #15
 800455e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004566:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800456a:	f7fc f841 	bl	80005f0 <__aeabi_dmul>
 800456e:	e9cd 0100 	strd	r0, r1, [sp]
 8004572:	1136      	asrs	r6, r6, #4
 8004574:	2300      	movs	r3, #0
 8004576:	2502      	movs	r5, #2
 8004578:	2e00      	cmp	r6, #0
 800457a:	d17c      	bne.n	8004676 <_dtoa_r+0x49e>
 800457c:	2b00      	cmp	r3, #0
 800457e:	d191      	bne.n	80044a4 <_dtoa_r+0x2cc>
 8004580:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 8084 	beq.w	8004690 <_dtoa_r+0x4b8>
 8004588:	e9dd 8900 	ldrd	r8, r9, [sp]
 800458c:	2200      	movs	r2, #0
 800458e:	4b93      	ldr	r3, [pc, #588]	; (80047dc <_dtoa_r+0x604>)
 8004590:	4640      	mov	r0, r8
 8004592:	4649      	mov	r1, r9
 8004594:	f7fc fa9e 	bl	8000ad4 <__aeabi_dcmplt>
 8004598:	2800      	cmp	r0, #0
 800459a:	d079      	beq.n	8004690 <_dtoa_r+0x4b8>
 800459c:	9b03      	ldr	r3, [sp, #12]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d076      	beq.n	8004690 <_dtoa_r+0x4b8>
 80045a2:	9b04      	ldr	r3, [sp, #16]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	dd34      	ble.n	8004612 <_dtoa_r+0x43a>
 80045a8:	2200      	movs	r2, #0
 80045aa:	4b8d      	ldr	r3, [pc, #564]	; (80047e0 <_dtoa_r+0x608>)
 80045ac:	4640      	mov	r0, r8
 80045ae:	4649      	mov	r1, r9
 80045b0:	f7fc f81e 	bl	80005f0 <__aeabi_dmul>
 80045b4:	e9cd 0100 	strd	r0, r1, [sp]
 80045b8:	9e04      	ldr	r6, [sp, #16]
 80045ba:	f10b 37ff 	add.w	r7, fp, #4294967295
 80045be:	3501      	adds	r5, #1
 80045c0:	4628      	mov	r0, r5
 80045c2:	f7fb ffaf 	bl	8000524 <__aeabi_i2d>
 80045c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80045ca:	f7fc f811 	bl	80005f0 <__aeabi_dmul>
 80045ce:	2200      	movs	r2, #0
 80045d0:	4b84      	ldr	r3, [pc, #528]	; (80047e4 <_dtoa_r+0x60c>)
 80045d2:	f7fb fe5b 	bl	800028c <__adddf3>
 80045d6:	4680      	mov	r8, r0
 80045d8:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 80045dc:	2e00      	cmp	r6, #0
 80045de:	d15a      	bne.n	8004696 <_dtoa_r+0x4be>
 80045e0:	2200      	movs	r2, #0
 80045e2:	4b81      	ldr	r3, [pc, #516]	; (80047e8 <_dtoa_r+0x610>)
 80045e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80045e8:	f7fb fe4e 	bl	8000288 <__aeabi_dsub>
 80045ec:	4642      	mov	r2, r8
 80045ee:	464b      	mov	r3, r9
 80045f0:	e9cd 0100 	strd	r0, r1, [sp]
 80045f4:	f7fc fa8c 	bl	8000b10 <__aeabi_dcmpgt>
 80045f8:	2800      	cmp	r0, #0
 80045fa:	f040 829b 	bne.w	8004b34 <_dtoa_r+0x95c>
 80045fe:	4642      	mov	r2, r8
 8004600:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004604:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004608:	f7fc fa64 	bl	8000ad4 <__aeabi_dcmplt>
 800460c:	2800      	cmp	r0, #0
 800460e:	f040 828f 	bne.w	8004b30 <_dtoa_r+0x958>
 8004612:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004616:	e9cd 2300 	strd	r2, r3, [sp]
 800461a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800461c:	2b00      	cmp	r3, #0
 800461e:	f2c0 8150 	blt.w	80048c2 <_dtoa_r+0x6ea>
 8004622:	f1bb 0f0e 	cmp.w	fp, #14
 8004626:	f300 814c 	bgt.w	80048c2 <_dtoa_r+0x6ea>
 800462a:	4b6a      	ldr	r3, [pc, #424]	; (80047d4 <_dtoa_r+0x5fc>)
 800462c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004630:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004636:	2b00      	cmp	r3, #0
 8004638:	f280 80da 	bge.w	80047f0 <_dtoa_r+0x618>
 800463c:	9b03      	ldr	r3, [sp, #12]
 800463e:	2b00      	cmp	r3, #0
 8004640:	f300 80d6 	bgt.w	80047f0 <_dtoa_r+0x618>
 8004644:	f040 8273 	bne.w	8004b2e <_dtoa_r+0x956>
 8004648:	2200      	movs	r2, #0
 800464a:	4b67      	ldr	r3, [pc, #412]	; (80047e8 <_dtoa_r+0x610>)
 800464c:	4640      	mov	r0, r8
 800464e:	4649      	mov	r1, r9
 8004650:	f7fb ffce 	bl	80005f0 <__aeabi_dmul>
 8004654:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004658:	f7fc fa50 	bl	8000afc <__aeabi_dcmpge>
 800465c:	9e03      	ldr	r6, [sp, #12]
 800465e:	4637      	mov	r7, r6
 8004660:	2800      	cmp	r0, #0
 8004662:	f040 824a 	bne.w	8004afa <_dtoa_r+0x922>
 8004666:	9b02      	ldr	r3, [sp, #8]
 8004668:	9a02      	ldr	r2, [sp, #8]
 800466a:	1c5d      	adds	r5, r3, #1
 800466c:	2331      	movs	r3, #49	; 0x31
 800466e:	7013      	strb	r3, [r2, #0]
 8004670:	f10b 0b01 	add.w	fp, fp, #1
 8004674:	e245      	b.n	8004b02 <_dtoa_r+0x92a>
 8004676:	07f2      	lsls	r2, r6, #31
 8004678:	d505      	bpl.n	8004686 <_dtoa_r+0x4ae>
 800467a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800467e:	f7fb ffb7 	bl	80005f0 <__aeabi_dmul>
 8004682:	3501      	adds	r5, #1
 8004684:	2301      	movs	r3, #1
 8004686:	1076      	asrs	r6, r6, #1
 8004688:	3708      	adds	r7, #8
 800468a:	e775      	b.n	8004578 <_dtoa_r+0x3a0>
 800468c:	2502      	movs	r5, #2
 800468e:	e777      	b.n	8004580 <_dtoa_r+0x3a8>
 8004690:	465f      	mov	r7, fp
 8004692:	9e03      	ldr	r6, [sp, #12]
 8004694:	e794      	b.n	80045c0 <_dtoa_r+0x3e8>
 8004696:	9a02      	ldr	r2, [sp, #8]
 8004698:	4b4e      	ldr	r3, [pc, #312]	; (80047d4 <_dtoa_r+0x5fc>)
 800469a:	4432      	add	r2, r6
 800469c:	9213      	str	r2, [sp, #76]	; 0x4c
 800469e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046a0:	1e71      	subs	r1, r6, #1
 80046a2:	2a00      	cmp	r2, #0
 80046a4:	d048      	beq.n	8004738 <_dtoa_r+0x560>
 80046a6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80046aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ae:	2000      	movs	r0, #0
 80046b0:	494e      	ldr	r1, [pc, #312]	; (80047ec <_dtoa_r+0x614>)
 80046b2:	f7fc f8c7 	bl	8000844 <__aeabi_ddiv>
 80046b6:	4642      	mov	r2, r8
 80046b8:	464b      	mov	r3, r9
 80046ba:	f7fb fde5 	bl	8000288 <__aeabi_dsub>
 80046be:	9d02      	ldr	r5, [sp, #8]
 80046c0:	4680      	mov	r8, r0
 80046c2:	4689      	mov	r9, r1
 80046c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80046c8:	f7fc fa42 	bl	8000b50 <__aeabi_d2iz>
 80046cc:	4606      	mov	r6, r0
 80046ce:	f7fb ff29 	bl	8000524 <__aeabi_i2d>
 80046d2:	4602      	mov	r2, r0
 80046d4:	460b      	mov	r3, r1
 80046d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80046da:	f7fb fdd5 	bl	8000288 <__aeabi_dsub>
 80046de:	3630      	adds	r6, #48	; 0x30
 80046e0:	f805 6b01 	strb.w	r6, [r5], #1
 80046e4:	4642      	mov	r2, r8
 80046e6:	464b      	mov	r3, r9
 80046e8:	e9cd 0100 	strd	r0, r1, [sp]
 80046ec:	f7fc f9f2 	bl	8000ad4 <__aeabi_dcmplt>
 80046f0:	2800      	cmp	r0, #0
 80046f2:	d165      	bne.n	80047c0 <_dtoa_r+0x5e8>
 80046f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80046f8:	2000      	movs	r0, #0
 80046fa:	4938      	ldr	r1, [pc, #224]	; (80047dc <_dtoa_r+0x604>)
 80046fc:	f7fb fdc4 	bl	8000288 <__aeabi_dsub>
 8004700:	4642      	mov	r2, r8
 8004702:	464b      	mov	r3, r9
 8004704:	f7fc f9e6 	bl	8000ad4 <__aeabi_dcmplt>
 8004708:	2800      	cmp	r0, #0
 800470a:	f040 80ba 	bne.w	8004882 <_dtoa_r+0x6aa>
 800470e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004710:	429d      	cmp	r5, r3
 8004712:	f43f af7e 	beq.w	8004612 <_dtoa_r+0x43a>
 8004716:	2200      	movs	r2, #0
 8004718:	4b31      	ldr	r3, [pc, #196]	; (80047e0 <_dtoa_r+0x608>)
 800471a:	4640      	mov	r0, r8
 800471c:	4649      	mov	r1, r9
 800471e:	f7fb ff67 	bl	80005f0 <__aeabi_dmul>
 8004722:	2200      	movs	r2, #0
 8004724:	4680      	mov	r8, r0
 8004726:	4689      	mov	r9, r1
 8004728:	4b2d      	ldr	r3, [pc, #180]	; (80047e0 <_dtoa_r+0x608>)
 800472a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800472e:	f7fb ff5f 	bl	80005f0 <__aeabi_dmul>
 8004732:	e9cd 0100 	strd	r0, r1, [sp]
 8004736:	e7c5      	b.n	80046c4 <_dtoa_r+0x4ec>
 8004738:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800473c:	4642      	mov	r2, r8
 800473e:	464b      	mov	r3, r9
 8004740:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004744:	f7fb ff54 	bl	80005f0 <__aeabi_dmul>
 8004748:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800474c:	9d02      	ldr	r5, [sp, #8]
 800474e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004752:	f7fc f9fd 	bl	8000b50 <__aeabi_d2iz>
 8004756:	4606      	mov	r6, r0
 8004758:	f7fb fee4 	bl	8000524 <__aeabi_i2d>
 800475c:	3630      	adds	r6, #48	; 0x30
 800475e:	4602      	mov	r2, r0
 8004760:	460b      	mov	r3, r1
 8004762:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004766:	f7fb fd8f 	bl	8000288 <__aeabi_dsub>
 800476a:	f805 6b01 	strb.w	r6, [r5], #1
 800476e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004770:	42ab      	cmp	r3, r5
 8004772:	4680      	mov	r8, r0
 8004774:	4689      	mov	r9, r1
 8004776:	f04f 0200 	mov.w	r2, #0
 800477a:	d125      	bne.n	80047c8 <_dtoa_r+0x5f0>
 800477c:	4b1b      	ldr	r3, [pc, #108]	; (80047ec <_dtoa_r+0x614>)
 800477e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004782:	f7fb fd83 	bl	800028c <__adddf3>
 8004786:	4602      	mov	r2, r0
 8004788:	460b      	mov	r3, r1
 800478a:	4640      	mov	r0, r8
 800478c:	4649      	mov	r1, r9
 800478e:	f7fc f9bf 	bl	8000b10 <__aeabi_dcmpgt>
 8004792:	2800      	cmp	r0, #0
 8004794:	d175      	bne.n	8004882 <_dtoa_r+0x6aa>
 8004796:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800479a:	2000      	movs	r0, #0
 800479c:	4913      	ldr	r1, [pc, #76]	; (80047ec <_dtoa_r+0x614>)
 800479e:	f7fb fd73 	bl	8000288 <__aeabi_dsub>
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	4640      	mov	r0, r8
 80047a8:	4649      	mov	r1, r9
 80047aa:	f7fc f993 	bl	8000ad4 <__aeabi_dcmplt>
 80047ae:	2800      	cmp	r0, #0
 80047b0:	f43f af2f 	beq.w	8004612 <_dtoa_r+0x43a>
 80047b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80047b8:	2b30      	cmp	r3, #48	; 0x30
 80047ba:	f105 32ff 	add.w	r2, r5, #4294967295
 80047be:	d001      	beq.n	80047c4 <_dtoa_r+0x5ec>
 80047c0:	46bb      	mov	fp, r7
 80047c2:	e04d      	b.n	8004860 <_dtoa_r+0x688>
 80047c4:	4615      	mov	r5, r2
 80047c6:	e7f5      	b.n	80047b4 <_dtoa_r+0x5dc>
 80047c8:	4b05      	ldr	r3, [pc, #20]	; (80047e0 <_dtoa_r+0x608>)
 80047ca:	f7fb ff11 	bl	80005f0 <__aeabi_dmul>
 80047ce:	e9cd 0100 	strd	r0, r1, [sp]
 80047d2:	e7bc      	b.n	800474e <_dtoa_r+0x576>
 80047d4:	08005fe0 	.word	0x08005fe0
 80047d8:	08005fb8 	.word	0x08005fb8
 80047dc:	3ff00000 	.word	0x3ff00000
 80047e0:	40240000 	.word	0x40240000
 80047e4:	401c0000 	.word	0x401c0000
 80047e8:	40140000 	.word	0x40140000
 80047ec:	3fe00000 	.word	0x3fe00000
 80047f0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80047f4:	9d02      	ldr	r5, [sp, #8]
 80047f6:	4642      	mov	r2, r8
 80047f8:	464b      	mov	r3, r9
 80047fa:	4630      	mov	r0, r6
 80047fc:	4639      	mov	r1, r7
 80047fe:	f7fc f821 	bl	8000844 <__aeabi_ddiv>
 8004802:	f7fc f9a5 	bl	8000b50 <__aeabi_d2iz>
 8004806:	9000      	str	r0, [sp, #0]
 8004808:	f7fb fe8c 	bl	8000524 <__aeabi_i2d>
 800480c:	4642      	mov	r2, r8
 800480e:	464b      	mov	r3, r9
 8004810:	f7fb feee 	bl	80005f0 <__aeabi_dmul>
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	4630      	mov	r0, r6
 800481a:	4639      	mov	r1, r7
 800481c:	f7fb fd34 	bl	8000288 <__aeabi_dsub>
 8004820:	9e00      	ldr	r6, [sp, #0]
 8004822:	9f03      	ldr	r7, [sp, #12]
 8004824:	3630      	adds	r6, #48	; 0x30
 8004826:	f805 6b01 	strb.w	r6, [r5], #1
 800482a:	9e02      	ldr	r6, [sp, #8]
 800482c:	1bae      	subs	r6, r5, r6
 800482e:	42b7      	cmp	r7, r6
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	d138      	bne.n	80048a8 <_dtoa_r+0x6d0>
 8004836:	f7fb fd29 	bl	800028c <__adddf3>
 800483a:	4606      	mov	r6, r0
 800483c:	460f      	mov	r7, r1
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	4640      	mov	r0, r8
 8004844:	4649      	mov	r1, r9
 8004846:	f7fc f945 	bl	8000ad4 <__aeabi_dcmplt>
 800484a:	b9c8      	cbnz	r0, 8004880 <_dtoa_r+0x6a8>
 800484c:	4632      	mov	r2, r6
 800484e:	463b      	mov	r3, r7
 8004850:	4640      	mov	r0, r8
 8004852:	4649      	mov	r1, r9
 8004854:	f7fc f934 	bl	8000ac0 <__aeabi_dcmpeq>
 8004858:	b110      	cbz	r0, 8004860 <_dtoa_r+0x688>
 800485a:	9b00      	ldr	r3, [sp, #0]
 800485c:	07db      	lsls	r3, r3, #31
 800485e:	d40f      	bmi.n	8004880 <_dtoa_r+0x6a8>
 8004860:	4651      	mov	r1, sl
 8004862:	4620      	mov	r0, r4
 8004864:	f000 fcf6 	bl	8005254 <_Bfree>
 8004868:	2300      	movs	r3, #0
 800486a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800486c:	702b      	strb	r3, [r5, #0]
 800486e:	f10b 0301 	add.w	r3, fp, #1
 8004872:	6013      	str	r3, [r2, #0]
 8004874:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004876:	2b00      	cmp	r3, #0
 8004878:	f43f acf8 	beq.w	800426c <_dtoa_r+0x94>
 800487c:	601d      	str	r5, [r3, #0]
 800487e:	e4f5      	b.n	800426c <_dtoa_r+0x94>
 8004880:	465f      	mov	r7, fp
 8004882:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004886:	2a39      	cmp	r2, #57	; 0x39
 8004888:	f105 33ff 	add.w	r3, r5, #4294967295
 800488c:	d106      	bne.n	800489c <_dtoa_r+0x6c4>
 800488e:	9a02      	ldr	r2, [sp, #8]
 8004890:	429a      	cmp	r2, r3
 8004892:	d107      	bne.n	80048a4 <_dtoa_r+0x6cc>
 8004894:	2330      	movs	r3, #48	; 0x30
 8004896:	7013      	strb	r3, [r2, #0]
 8004898:	3701      	adds	r7, #1
 800489a:	4613      	mov	r3, r2
 800489c:	781a      	ldrb	r2, [r3, #0]
 800489e:	3201      	adds	r2, #1
 80048a0:	701a      	strb	r2, [r3, #0]
 80048a2:	e78d      	b.n	80047c0 <_dtoa_r+0x5e8>
 80048a4:	461d      	mov	r5, r3
 80048a6:	e7ec      	b.n	8004882 <_dtoa_r+0x6aa>
 80048a8:	2200      	movs	r2, #0
 80048aa:	4ba4      	ldr	r3, [pc, #656]	; (8004b3c <_dtoa_r+0x964>)
 80048ac:	f7fb fea0 	bl	80005f0 <__aeabi_dmul>
 80048b0:	2200      	movs	r2, #0
 80048b2:	2300      	movs	r3, #0
 80048b4:	4606      	mov	r6, r0
 80048b6:	460f      	mov	r7, r1
 80048b8:	f7fc f902 	bl	8000ac0 <__aeabi_dcmpeq>
 80048bc:	2800      	cmp	r0, #0
 80048be:	d09a      	beq.n	80047f6 <_dtoa_r+0x61e>
 80048c0:	e7ce      	b.n	8004860 <_dtoa_r+0x688>
 80048c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048c4:	2a00      	cmp	r2, #0
 80048c6:	f000 80cd 	beq.w	8004a64 <_dtoa_r+0x88c>
 80048ca:	9a07      	ldr	r2, [sp, #28]
 80048cc:	2a01      	cmp	r2, #1
 80048ce:	f300 80af 	bgt.w	8004a30 <_dtoa_r+0x858>
 80048d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80048d4:	2a00      	cmp	r2, #0
 80048d6:	f000 80a7 	beq.w	8004a28 <_dtoa_r+0x850>
 80048da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80048de:	9e08      	ldr	r6, [sp, #32]
 80048e0:	9d05      	ldr	r5, [sp, #20]
 80048e2:	9a05      	ldr	r2, [sp, #20]
 80048e4:	441a      	add	r2, r3
 80048e6:	9205      	str	r2, [sp, #20]
 80048e8:	9a06      	ldr	r2, [sp, #24]
 80048ea:	2101      	movs	r1, #1
 80048ec:	441a      	add	r2, r3
 80048ee:	4620      	mov	r0, r4
 80048f0:	9206      	str	r2, [sp, #24]
 80048f2:	f000 fd4f 	bl	8005394 <__i2b>
 80048f6:	4607      	mov	r7, r0
 80048f8:	2d00      	cmp	r5, #0
 80048fa:	dd0c      	ble.n	8004916 <_dtoa_r+0x73e>
 80048fc:	9b06      	ldr	r3, [sp, #24]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	dd09      	ble.n	8004916 <_dtoa_r+0x73e>
 8004902:	42ab      	cmp	r3, r5
 8004904:	9a05      	ldr	r2, [sp, #20]
 8004906:	bfa8      	it	ge
 8004908:	462b      	movge	r3, r5
 800490a:	1ad2      	subs	r2, r2, r3
 800490c:	9205      	str	r2, [sp, #20]
 800490e:	9a06      	ldr	r2, [sp, #24]
 8004910:	1aed      	subs	r5, r5, r3
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	9306      	str	r3, [sp, #24]
 8004916:	9b08      	ldr	r3, [sp, #32]
 8004918:	b1f3      	cbz	r3, 8004958 <_dtoa_r+0x780>
 800491a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 80a5 	beq.w	8004a6c <_dtoa_r+0x894>
 8004922:	2e00      	cmp	r6, #0
 8004924:	dd10      	ble.n	8004948 <_dtoa_r+0x770>
 8004926:	4639      	mov	r1, r7
 8004928:	4632      	mov	r2, r6
 800492a:	4620      	mov	r0, r4
 800492c:	f000 fdc8 	bl	80054c0 <__pow5mult>
 8004930:	4652      	mov	r2, sl
 8004932:	4601      	mov	r1, r0
 8004934:	4607      	mov	r7, r0
 8004936:	4620      	mov	r0, r4
 8004938:	f000 fd35 	bl	80053a6 <__multiply>
 800493c:	4651      	mov	r1, sl
 800493e:	4680      	mov	r8, r0
 8004940:	4620      	mov	r0, r4
 8004942:	f000 fc87 	bl	8005254 <_Bfree>
 8004946:	46c2      	mov	sl, r8
 8004948:	9b08      	ldr	r3, [sp, #32]
 800494a:	1b9a      	subs	r2, r3, r6
 800494c:	d004      	beq.n	8004958 <_dtoa_r+0x780>
 800494e:	4651      	mov	r1, sl
 8004950:	4620      	mov	r0, r4
 8004952:	f000 fdb5 	bl	80054c0 <__pow5mult>
 8004956:	4682      	mov	sl, r0
 8004958:	2101      	movs	r1, #1
 800495a:	4620      	mov	r0, r4
 800495c:	f000 fd1a 	bl	8005394 <__i2b>
 8004960:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004962:	2b00      	cmp	r3, #0
 8004964:	4606      	mov	r6, r0
 8004966:	f340 8083 	ble.w	8004a70 <_dtoa_r+0x898>
 800496a:	461a      	mov	r2, r3
 800496c:	4601      	mov	r1, r0
 800496e:	4620      	mov	r0, r4
 8004970:	f000 fda6 	bl	80054c0 <__pow5mult>
 8004974:	9b07      	ldr	r3, [sp, #28]
 8004976:	2b01      	cmp	r3, #1
 8004978:	4606      	mov	r6, r0
 800497a:	dd7c      	ble.n	8004a76 <_dtoa_r+0x89e>
 800497c:	f04f 0800 	mov.w	r8, #0
 8004980:	6933      	ldr	r3, [r6, #16]
 8004982:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004986:	6918      	ldr	r0, [r3, #16]
 8004988:	f000 fcb6 	bl	80052f8 <__hi0bits>
 800498c:	f1c0 0020 	rsb	r0, r0, #32
 8004990:	9b06      	ldr	r3, [sp, #24]
 8004992:	4418      	add	r0, r3
 8004994:	f010 001f 	ands.w	r0, r0, #31
 8004998:	f000 8096 	beq.w	8004ac8 <_dtoa_r+0x8f0>
 800499c:	f1c0 0320 	rsb	r3, r0, #32
 80049a0:	2b04      	cmp	r3, #4
 80049a2:	f340 8087 	ble.w	8004ab4 <_dtoa_r+0x8dc>
 80049a6:	9b05      	ldr	r3, [sp, #20]
 80049a8:	f1c0 001c 	rsb	r0, r0, #28
 80049ac:	4403      	add	r3, r0
 80049ae:	9305      	str	r3, [sp, #20]
 80049b0:	9b06      	ldr	r3, [sp, #24]
 80049b2:	4405      	add	r5, r0
 80049b4:	4403      	add	r3, r0
 80049b6:	9306      	str	r3, [sp, #24]
 80049b8:	9b05      	ldr	r3, [sp, #20]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	dd05      	ble.n	80049ca <_dtoa_r+0x7f2>
 80049be:	4651      	mov	r1, sl
 80049c0:	461a      	mov	r2, r3
 80049c2:	4620      	mov	r0, r4
 80049c4:	f000 fdca 	bl	800555c <__lshift>
 80049c8:	4682      	mov	sl, r0
 80049ca:	9b06      	ldr	r3, [sp, #24]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	dd05      	ble.n	80049dc <_dtoa_r+0x804>
 80049d0:	4631      	mov	r1, r6
 80049d2:	461a      	mov	r2, r3
 80049d4:	4620      	mov	r0, r4
 80049d6:	f000 fdc1 	bl	800555c <__lshift>
 80049da:	4606      	mov	r6, r0
 80049dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d074      	beq.n	8004acc <_dtoa_r+0x8f4>
 80049e2:	4631      	mov	r1, r6
 80049e4:	4650      	mov	r0, sl
 80049e6:	f000 fe0a 	bl	80055fe <__mcmp>
 80049ea:	2800      	cmp	r0, #0
 80049ec:	da6e      	bge.n	8004acc <_dtoa_r+0x8f4>
 80049ee:	2300      	movs	r3, #0
 80049f0:	4651      	mov	r1, sl
 80049f2:	220a      	movs	r2, #10
 80049f4:	4620      	mov	r0, r4
 80049f6:	f000 fc44 	bl	8005282 <__multadd>
 80049fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004a00:	4682      	mov	sl, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 81a8 	beq.w	8004d58 <_dtoa_r+0xb80>
 8004a08:	2300      	movs	r3, #0
 8004a0a:	4639      	mov	r1, r7
 8004a0c:	220a      	movs	r2, #10
 8004a0e:	4620      	mov	r0, r4
 8004a10:	f000 fc37 	bl	8005282 <__multadd>
 8004a14:	9b04      	ldr	r3, [sp, #16]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	4607      	mov	r7, r0
 8004a1a:	f300 80c8 	bgt.w	8004bae <_dtoa_r+0x9d6>
 8004a1e:	9b07      	ldr	r3, [sp, #28]
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	f340 80c4 	ble.w	8004bae <_dtoa_r+0x9d6>
 8004a26:	e059      	b.n	8004adc <_dtoa_r+0x904>
 8004a28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004a2a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004a2e:	e756      	b.n	80048de <_dtoa_r+0x706>
 8004a30:	9b03      	ldr	r3, [sp, #12]
 8004a32:	1e5e      	subs	r6, r3, #1
 8004a34:	9b08      	ldr	r3, [sp, #32]
 8004a36:	42b3      	cmp	r3, r6
 8004a38:	bfbf      	itttt	lt
 8004a3a:	9b08      	ldrlt	r3, [sp, #32]
 8004a3c:	9608      	strlt	r6, [sp, #32]
 8004a3e:	1af2      	sublt	r2, r6, r3
 8004a40:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8004a42:	bfb6      	itet	lt
 8004a44:	189b      	addlt	r3, r3, r2
 8004a46:	1b9e      	subge	r6, r3, r6
 8004a48:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8004a4a:	9b03      	ldr	r3, [sp, #12]
 8004a4c:	bfb8      	it	lt
 8004a4e:	2600      	movlt	r6, #0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	bfb9      	ittee	lt
 8004a54:	9b05      	ldrlt	r3, [sp, #20]
 8004a56:	9a03      	ldrlt	r2, [sp, #12]
 8004a58:	9d05      	ldrge	r5, [sp, #20]
 8004a5a:	9b03      	ldrge	r3, [sp, #12]
 8004a5c:	bfbc      	itt	lt
 8004a5e:	1a9d      	sublt	r5, r3, r2
 8004a60:	2300      	movlt	r3, #0
 8004a62:	e73e      	b.n	80048e2 <_dtoa_r+0x70a>
 8004a64:	9e08      	ldr	r6, [sp, #32]
 8004a66:	9d05      	ldr	r5, [sp, #20]
 8004a68:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004a6a:	e745      	b.n	80048f8 <_dtoa_r+0x720>
 8004a6c:	9a08      	ldr	r2, [sp, #32]
 8004a6e:	e76e      	b.n	800494e <_dtoa_r+0x776>
 8004a70:	9b07      	ldr	r3, [sp, #28]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	dc19      	bgt.n	8004aaa <_dtoa_r+0x8d2>
 8004a76:	9b00      	ldr	r3, [sp, #0]
 8004a78:	b9bb      	cbnz	r3, 8004aaa <_dtoa_r+0x8d2>
 8004a7a:	9b01      	ldr	r3, [sp, #4]
 8004a7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a80:	b99b      	cbnz	r3, 8004aaa <_dtoa_r+0x8d2>
 8004a82:	9b01      	ldr	r3, [sp, #4]
 8004a84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a88:	0d1b      	lsrs	r3, r3, #20
 8004a8a:	051b      	lsls	r3, r3, #20
 8004a8c:	b183      	cbz	r3, 8004ab0 <_dtoa_r+0x8d8>
 8004a8e:	9b05      	ldr	r3, [sp, #20]
 8004a90:	3301      	adds	r3, #1
 8004a92:	9305      	str	r3, [sp, #20]
 8004a94:	9b06      	ldr	r3, [sp, #24]
 8004a96:	3301      	adds	r3, #1
 8004a98:	9306      	str	r3, [sp, #24]
 8004a9a:	f04f 0801 	mov.w	r8, #1
 8004a9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f47f af6d 	bne.w	8004980 <_dtoa_r+0x7a8>
 8004aa6:	2001      	movs	r0, #1
 8004aa8:	e772      	b.n	8004990 <_dtoa_r+0x7b8>
 8004aaa:	f04f 0800 	mov.w	r8, #0
 8004aae:	e7f6      	b.n	8004a9e <_dtoa_r+0x8c6>
 8004ab0:	4698      	mov	r8, r3
 8004ab2:	e7f4      	b.n	8004a9e <_dtoa_r+0x8c6>
 8004ab4:	d080      	beq.n	80049b8 <_dtoa_r+0x7e0>
 8004ab6:	9a05      	ldr	r2, [sp, #20]
 8004ab8:	331c      	adds	r3, #28
 8004aba:	441a      	add	r2, r3
 8004abc:	9205      	str	r2, [sp, #20]
 8004abe:	9a06      	ldr	r2, [sp, #24]
 8004ac0:	441a      	add	r2, r3
 8004ac2:	441d      	add	r5, r3
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	e776      	b.n	80049b6 <_dtoa_r+0x7de>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	e7f4      	b.n	8004ab6 <_dtoa_r+0x8de>
 8004acc:	9b03      	ldr	r3, [sp, #12]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	dc36      	bgt.n	8004b40 <_dtoa_r+0x968>
 8004ad2:	9b07      	ldr	r3, [sp, #28]
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	dd33      	ble.n	8004b40 <_dtoa_r+0x968>
 8004ad8:	9b03      	ldr	r3, [sp, #12]
 8004ada:	9304      	str	r3, [sp, #16]
 8004adc:	9b04      	ldr	r3, [sp, #16]
 8004ade:	b963      	cbnz	r3, 8004afa <_dtoa_r+0x922>
 8004ae0:	4631      	mov	r1, r6
 8004ae2:	2205      	movs	r2, #5
 8004ae4:	4620      	mov	r0, r4
 8004ae6:	f000 fbcc 	bl	8005282 <__multadd>
 8004aea:	4601      	mov	r1, r0
 8004aec:	4606      	mov	r6, r0
 8004aee:	4650      	mov	r0, sl
 8004af0:	f000 fd85 	bl	80055fe <__mcmp>
 8004af4:	2800      	cmp	r0, #0
 8004af6:	f73f adb6 	bgt.w	8004666 <_dtoa_r+0x48e>
 8004afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004afc:	9d02      	ldr	r5, [sp, #8]
 8004afe:	ea6f 0b03 	mvn.w	fp, r3
 8004b02:	2300      	movs	r3, #0
 8004b04:	9303      	str	r3, [sp, #12]
 8004b06:	4631      	mov	r1, r6
 8004b08:	4620      	mov	r0, r4
 8004b0a:	f000 fba3 	bl	8005254 <_Bfree>
 8004b0e:	2f00      	cmp	r7, #0
 8004b10:	f43f aea6 	beq.w	8004860 <_dtoa_r+0x688>
 8004b14:	9b03      	ldr	r3, [sp, #12]
 8004b16:	b12b      	cbz	r3, 8004b24 <_dtoa_r+0x94c>
 8004b18:	42bb      	cmp	r3, r7
 8004b1a:	d003      	beq.n	8004b24 <_dtoa_r+0x94c>
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	4620      	mov	r0, r4
 8004b20:	f000 fb98 	bl	8005254 <_Bfree>
 8004b24:	4639      	mov	r1, r7
 8004b26:	4620      	mov	r0, r4
 8004b28:	f000 fb94 	bl	8005254 <_Bfree>
 8004b2c:	e698      	b.n	8004860 <_dtoa_r+0x688>
 8004b2e:	2600      	movs	r6, #0
 8004b30:	4637      	mov	r7, r6
 8004b32:	e7e2      	b.n	8004afa <_dtoa_r+0x922>
 8004b34:	46bb      	mov	fp, r7
 8004b36:	4637      	mov	r7, r6
 8004b38:	e595      	b.n	8004666 <_dtoa_r+0x48e>
 8004b3a:	bf00      	nop
 8004b3c:	40240000 	.word	0x40240000
 8004b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b42:	bb93      	cbnz	r3, 8004baa <_dtoa_r+0x9d2>
 8004b44:	9b03      	ldr	r3, [sp, #12]
 8004b46:	9304      	str	r3, [sp, #16]
 8004b48:	9d02      	ldr	r5, [sp, #8]
 8004b4a:	4631      	mov	r1, r6
 8004b4c:	4650      	mov	r0, sl
 8004b4e:	f7ff fab7 	bl	80040c0 <quorem>
 8004b52:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004b56:	f805 9b01 	strb.w	r9, [r5], #1
 8004b5a:	9b02      	ldr	r3, [sp, #8]
 8004b5c:	9a04      	ldr	r2, [sp, #16]
 8004b5e:	1aeb      	subs	r3, r5, r3
 8004b60:	429a      	cmp	r2, r3
 8004b62:	f300 80dc 	bgt.w	8004d1e <_dtoa_r+0xb46>
 8004b66:	9b02      	ldr	r3, [sp, #8]
 8004b68:	2a01      	cmp	r2, #1
 8004b6a:	bfac      	ite	ge
 8004b6c:	189b      	addge	r3, r3, r2
 8004b6e:	3301      	addlt	r3, #1
 8004b70:	4698      	mov	r8, r3
 8004b72:	2300      	movs	r3, #0
 8004b74:	9303      	str	r3, [sp, #12]
 8004b76:	4651      	mov	r1, sl
 8004b78:	2201      	movs	r2, #1
 8004b7a:	4620      	mov	r0, r4
 8004b7c:	f000 fcee 	bl	800555c <__lshift>
 8004b80:	4631      	mov	r1, r6
 8004b82:	4682      	mov	sl, r0
 8004b84:	f000 fd3b 	bl	80055fe <__mcmp>
 8004b88:	2800      	cmp	r0, #0
 8004b8a:	f300 808d 	bgt.w	8004ca8 <_dtoa_r+0xad0>
 8004b8e:	d103      	bne.n	8004b98 <_dtoa_r+0x9c0>
 8004b90:	f019 0f01 	tst.w	r9, #1
 8004b94:	f040 8088 	bne.w	8004ca8 <_dtoa_r+0xad0>
 8004b98:	4645      	mov	r5, r8
 8004b9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004b9e:	2b30      	cmp	r3, #48	; 0x30
 8004ba0:	f105 32ff 	add.w	r2, r5, #4294967295
 8004ba4:	d1af      	bne.n	8004b06 <_dtoa_r+0x92e>
 8004ba6:	4615      	mov	r5, r2
 8004ba8:	e7f7      	b.n	8004b9a <_dtoa_r+0x9c2>
 8004baa:	9b03      	ldr	r3, [sp, #12]
 8004bac:	9304      	str	r3, [sp, #16]
 8004bae:	2d00      	cmp	r5, #0
 8004bb0:	dd05      	ble.n	8004bbe <_dtoa_r+0x9e6>
 8004bb2:	4639      	mov	r1, r7
 8004bb4:	462a      	mov	r2, r5
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	f000 fcd0 	bl	800555c <__lshift>
 8004bbc:	4607      	mov	r7, r0
 8004bbe:	f1b8 0f00 	cmp.w	r8, #0
 8004bc2:	d04c      	beq.n	8004c5e <_dtoa_r+0xa86>
 8004bc4:	6879      	ldr	r1, [r7, #4]
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	f000 fb10 	bl	80051ec <_Balloc>
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	3202      	adds	r2, #2
 8004bd0:	4605      	mov	r5, r0
 8004bd2:	0092      	lsls	r2, r2, #2
 8004bd4:	f107 010c 	add.w	r1, r7, #12
 8004bd8:	300c      	adds	r0, #12
 8004bda:	f000 faef 	bl	80051bc <memcpy>
 8004bde:	2201      	movs	r2, #1
 8004be0:	4629      	mov	r1, r5
 8004be2:	4620      	mov	r0, r4
 8004be4:	f000 fcba 	bl	800555c <__lshift>
 8004be8:	9b00      	ldr	r3, [sp, #0]
 8004bea:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004bee:	9703      	str	r7, [sp, #12]
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	4607      	mov	r7, r0
 8004bf6:	9305      	str	r3, [sp, #20]
 8004bf8:	4631      	mov	r1, r6
 8004bfa:	4650      	mov	r0, sl
 8004bfc:	f7ff fa60 	bl	80040c0 <quorem>
 8004c00:	9903      	ldr	r1, [sp, #12]
 8004c02:	4605      	mov	r5, r0
 8004c04:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004c08:	4650      	mov	r0, sl
 8004c0a:	f000 fcf8 	bl	80055fe <__mcmp>
 8004c0e:	463a      	mov	r2, r7
 8004c10:	9000      	str	r0, [sp, #0]
 8004c12:	4631      	mov	r1, r6
 8004c14:	4620      	mov	r0, r4
 8004c16:	f000 fd0c 	bl	8005632 <__mdiff>
 8004c1a:	68c3      	ldr	r3, [r0, #12]
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	bb03      	cbnz	r3, 8004c62 <_dtoa_r+0xa8a>
 8004c20:	4601      	mov	r1, r0
 8004c22:	9006      	str	r0, [sp, #24]
 8004c24:	4650      	mov	r0, sl
 8004c26:	f000 fcea 	bl	80055fe <__mcmp>
 8004c2a:	9a06      	ldr	r2, [sp, #24]
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	4611      	mov	r1, r2
 8004c30:	4620      	mov	r0, r4
 8004c32:	9306      	str	r3, [sp, #24]
 8004c34:	f000 fb0e 	bl	8005254 <_Bfree>
 8004c38:	9b06      	ldr	r3, [sp, #24]
 8004c3a:	b9a3      	cbnz	r3, 8004c66 <_dtoa_r+0xa8e>
 8004c3c:	9a07      	ldr	r2, [sp, #28]
 8004c3e:	b992      	cbnz	r2, 8004c66 <_dtoa_r+0xa8e>
 8004c40:	9a05      	ldr	r2, [sp, #20]
 8004c42:	b982      	cbnz	r2, 8004c66 <_dtoa_r+0xa8e>
 8004c44:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004c48:	d029      	beq.n	8004c9e <_dtoa_r+0xac6>
 8004c4a:	9b00      	ldr	r3, [sp, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	dd01      	ble.n	8004c54 <_dtoa_r+0xa7c>
 8004c50:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8004c54:	f108 0501 	add.w	r5, r8, #1
 8004c58:	f888 9000 	strb.w	r9, [r8]
 8004c5c:	e753      	b.n	8004b06 <_dtoa_r+0x92e>
 8004c5e:	4638      	mov	r0, r7
 8004c60:	e7c2      	b.n	8004be8 <_dtoa_r+0xa10>
 8004c62:	2301      	movs	r3, #1
 8004c64:	e7e3      	b.n	8004c2e <_dtoa_r+0xa56>
 8004c66:	9a00      	ldr	r2, [sp, #0]
 8004c68:	2a00      	cmp	r2, #0
 8004c6a:	db04      	blt.n	8004c76 <_dtoa_r+0xa9e>
 8004c6c:	d125      	bne.n	8004cba <_dtoa_r+0xae2>
 8004c6e:	9a07      	ldr	r2, [sp, #28]
 8004c70:	bb1a      	cbnz	r2, 8004cba <_dtoa_r+0xae2>
 8004c72:	9a05      	ldr	r2, [sp, #20]
 8004c74:	bb0a      	cbnz	r2, 8004cba <_dtoa_r+0xae2>
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	ddec      	ble.n	8004c54 <_dtoa_r+0xa7c>
 8004c7a:	4651      	mov	r1, sl
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	4620      	mov	r0, r4
 8004c80:	f000 fc6c 	bl	800555c <__lshift>
 8004c84:	4631      	mov	r1, r6
 8004c86:	4682      	mov	sl, r0
 8004c88:	f000 fcb9 	bl	80055fe <__mcmp>
 8004c8c:	2800      	cmp	r0, #0
 8004c8e:	dc03      	bgt.n	8004c98 <_dtoa_r+0xac0>
 8004c90:	d1e0      	bne.n	8004c54 <_dtoa_r+0xa7c>
 8004c92:	f019 0f01 	tst.w	r9, #1
 8004c96:	d0dd      	beq.n	8004c54 <_dtoa_r+0xa7c>
 8004c98:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004c9c:	d1d8      	bne.n	8004c50 <_dtoa_r+0xa78>
 8004c9e:	2339      	movs	r3, #57	; 0x39
 8004ca0:	f888 3000 	strb.w	r3, [r8]
 8004ca4:	f108 0801 	add.w	r8, r8, #1
 8004ca8:	4645      	mov	r5, r8
 8004caa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004cae:	2b39      	cmp	r3, #57	; 0x39
 8004cb0:	f105 32ff 	add.w	r2, r5, #4294967295
 8004cb4:	d03b      	beq.n	8004d2e <_dtoa_r+0xb56>
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	e040      	b.n	8004d3c <_dtoa_r+0xb64>
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f108 0501 	add.w	r5, r8, #1
 8004cc0:	dd05      	ble.n	8004cce <_dtoa_r+0xaf6>
 8004cc2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004cc6:	d0ea      	beq.n	8004c9e <_dtoa_r+0xac6>
 8004cc8:	f109 0901 	add.w	r9, r9, #1
 8004ccc:	e7c4      	b.n	8004c58 <_dtoa_r+0xa80>
 8004cce:	9b02      	ldr	r3, [sp, #8]
 8004cd0:	9a04      	ldr	r2, [sp, #16]
 8004cd2:	f805 9c01 	strb.w	r9, [r5, #-1]
 8004cd6:	1aeb      	subs	r3, r5, r3
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	46a8      	mov	r8, r5
 8004cdc:	f43f af4b 	beq.w	8004b76 <_dtoa_r+0x99e>
 8004ce0:	4651      	mov	r1, sl
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	220a      	movs	r2, #10
 8004ce6:	4620      	mov	r0, r4
 8004ce8:	f000 facb 	bl	8005282 <__multadd>
 8004cec:	9b03      	ldr	r3, [sp, #12]
 8004cee:	9903      	ldr	r1, [sp, #12]
 8004cf0:	42bb      	cmp	r3, r7
 8004cf2:	4682      	mov	sl, r0
 8004cf4:	f04f 0300 	mov.w	r3, #0
 8004cf8:	f04f 020a 	mov.w	r2, #10
 8004cfc:	4620      	mov	r0, r4
 8004cfe:	d104      	bne.n	8004d0a <_dtoa_r+0xb32>
 8004d00:	f000 fabf 	bl	8005282 <__multadd>
 8004d04:	9003      	str	r0, [sp, #12]
 8004d06:	4607      	mov	r7, r0
 8004d08:	e776      	b.n	8004bf8 <_dtoa_r+0xa20>
 8004d0a:	f000 faba 	bl	8005282 <__multadd>
 8004d0e:	2300      	movs	r3, #0
 8004d10:	9003      	str	r0, [sp, #12]
 8004d12:	220a      	movs	r2, #10
 8004d14:	4639      	mov	r1, r7
 8004d16:	4620      	mov	r0, r4
 8004d18:	f000 fab3 	bl	8005282 <__multadd>
 8004d1c:	e7f3      	b.n	8004d06 <_dtoa_r+0xb2e>
 8004d1e:	4651      	mov	r1, sl
 8004d20:	2300      	movs	r3, #0
 8004d22:	220a      	movs	r2, #10
 8004d24:	4620      	mov	r0, r4
 8004d26:	f000 faac 	bl	8005282 <__multadd>
 8004d2a:	4682      	mov	sl, r0
 8004d2c:	e70d      	b.n	8004b4a <_dtoa_r+0x972>
 8004d2e:	9b02      	ldr	r3, [sp, #8]
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d105      	bne.n	8004d40 <_dtoa_r+0xb68>
 8004d34:	9a02      	ldr	r2, [sp, #8]
 8004d36:	f10b 0b01 	add.w	fp, fp, #1
 8004d3a:	2331      	movs	r3, #49	; 0x31
 8004d3c:	7013      	strb	r3, [r2, #0]
 8004d3e:	e6e2      	b.n	8004b06 <_dtoa_r+0x92e>
 8004d40:	4615      	mov	r5, r2
 8004d42:	e7b2      	b.n	8004caa <_dtoa_r+0xad2>
 8004d44:	4b09      	ldr	r3, [pc, #36]	; (8004d6c <_dtoa_r+0xb94>)
 8004d46:	f7ff baae 	b.w	80042a6 <_dtoa_r+0xce>
 8004d4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f47f aa88 	bne.w	8004262 <_dtoa_r+0x8a>
 8004d52:	4b07      	ldr	r3, [pc, #28]	; (8004d70 <_dtoa_r+0xb98>)
 8004d54:	f7ff baa7 	b.w	80042a6 <_dtoa_r+0xce>
 8004d58:	9b04      	ldr	r3, [sp, #16]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f73f aef4 	bgt.w	8004b48 <_dtoa_r+0x970>
 8004d60:	9b07      	ldr	r3, [sp, #28]
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	f77f aef0 	ble.w	8004b48 <_dtoa_r+0x970>
 8004d68:	e6b8      	b.n	8004adc <_dtoa_r+0x904>
 8004d6a:	bf00      	nop
 8004d6c:	08005f82 	.word	0x08005f82
 8004d70:	08005fa4 	.word	0x08005fa4

08004d74 <_localeconv_r>:
 8004d74:	4b04      	ldr	r3, [pc, #16]	; (8004d88 <_localeconv_r+0x14>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6a18      	ldr	r0, [r3, #32]
 8004d7a:	4b04      	ldr	r3, [pc, #16]	; (8004d8c <_localeconv_r+0x18>)
 8004d7c:	2800      	cmp	r0, #0
 8004d7e:	bf08      	it	eq
 8004d80:	4618      	moveq	r0, r3
 8004d82:	30f0      	adds	r0, #240	; 0xf0
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	20000004 	.word	0x20000004
 8004d8c:	20000508 	.word	0x20000508

08004d90 <malloc>:
 8004d90:	4b02      	ldr	r3, [pc, #8]	; (8004d9c <malloc+0xc>)
 8004d92:	4601      	mov	r1, r0
 8004d94:	6818      	ldr	r0, [r3, #0]
 8004d96:	f000 b803 	b.w	8004da0 <_malloc_r>
 8004d9a:	bf00      	nop
 8004d9c:	20000004 	.word	0x20000004

08004da0 <_malloc_r>:
 8004da0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004da4:	f101 040b 	add.w	r4, r1, #11
 8004da8:	2c16      	cmp	r4, #22
 8004daa:	4681      	mov	r9, r0
 8004dac:	d907      	bls.n	8004dbe <_malloc_r+0x1e>
 8004dae:	f034 0407 	bics.w	r4, r4, #7
 8004db2:	d505      	bpl.n	8004dc0 <_malloc_r+0x20>
 8004db4:	230c      	movs	r3, #12
 8004db6:	f8c9 3000 	str.w	r3, [r9]
 8004dba:	2600      	movs	r6, #0
 8004dbc:	e131      	b.n	8005022 <_malloc_r+0x282>
 8004dbe:	2410      	movs	r4, #16
 8004dc0:	428c      	cmp	r4, r1
 8004dc2:	d3f7      	bcc.n	8004db4 <_malloc_r+0x14>
 8004dc4:	4648      	mov	r0, r9
 8004dc6:	f000 fa05 	bl	80051d4 <__malloc_lock>
 8004dca:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8004dce:	4d9c      	ldr	r5, [pc, #624]	; (8005040 <_malloc_r+0x2a0>)
 8004dd0:	d236      	bcs.n	8004e40 <_malloc_r+0xa0>
 8004dd2:	f104 0208 	add.w	r2, r4, #8
 8004dd6:	442a      	add	r2, r5
 8004dd8:	f1a2 0108 	sub.w	r1, r2, #8
 8004ddc:	6856      	ldr	r6, [r2, #4]
 8004dde:	428e      	cmp	r6, r1
 8004de0:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8004de4:	d102      	bne.n	8004dec <_malloc_r+0x4c>
 8004de6:	68d6      	ldr	r6, [r2, #12]
 8004de8:	42b2      	cmp	r2, r6
 8004dea:	d010      	beq.n	8004e0e <_malloc_r+0x6e>
 8004dec:	6873      	ldr	r3, [r6, #4]
 8004dee:	68f2      	ldr	r2, [r6, #12]
 8004df0:	68b1      	ldr	r1, [r6, #8]
 8004df2:	f023 0303 	bic.w	r3, r3, #3
 8004df6:	60ca      	str	r2, [r1, #12]
 8004df8:	4433      	add	r3, r6
 8004dfa:	6091      	str	r1, [r2, #8]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	f042 0201 	orr.w	r2, r2, #1
 8004e02:	605a      	str	r2, [r3, #4]
 8004e04:	4648      	mov	r0, r9
 8004e06:	f000 f9eb 	bl	80051e0 <__malloc_unlock>
 8004e0a:	3608      	adds	r6, #8
 8004e0c:	e109      	b.n	8005022 <_malloc_r+0x282>
 8004e0e:	3302      	adds	r3, #2
 8004e10:	4a8c      	ldr	r2, [pc, #560]	; (8005044 <_malloc_r+0x2a4>)
 8004e12:	692e      	ldr	r6, [r5, #16]
 8004e14:	4296      	cmp	r6, r2
 8004e16:	4611      	mov	r1, r2
 8004e18:	d06d      	beq.n	8004ef6 <_malloc_r+0x156>
 8004e1a:	6870      	ldr	r0, [r6, #4]
 8004e1c:	f020 0003 	bic.w	r0, r0, #3
 8004e20:	1b07      	subs	r7, r0, r4
 8004e22:	2f0f      	cmp	r7, #15
 8004e24:	dd47      	ble.n	8004eb6 <_malloc_r+0x116>
 8004e26:	1933      	adds	r3, r6, r4
 8004e28:	f044 0401 	orr.w	r4, r4, #1
 8004e2c:	6074      	str	r4, [r6, #4]
 8004e2e:	616b      	str	r3, [r5, #20]
 8004e30:	612b      	str	r3, [r5, #16]
 8004e32:	60da      	str	r2, [r3, #12]
 8004e34:	609a      	str	r2, [r3, #8]
 8004e36:	f047 0201 	orr.w	r2, r7, #1
 8004e3a:	605a      	str	r2, [r3, #4]
 8004e3c:	5037      	str	r7, [r6, r0]
 8004e3e:	e7e1      	b.n	8004e04 <_malloc_r+0x64>
 8004e40:	0a63      	lsrs	r3, r4, #9
 8004e42:	d02a      	beq.n	8004e9a <_malloc_r+0xfa>
 8004e44:	2b04      	cmp	r3, #4
 8004e46:	d812      	bhi.n	8004e6e <_malloc_r+0xce>
 8004e48:	09a3      	lsrs	r3, r4, #6
 8004e4a:	3338      	adds	r3, #56	; 0x38
 8004e4c:	1c5a      	adds	r2, r3, #1
 8004e4e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004e52:	f1a2 0008 	sub.w	r0, r2, #8
 8004e56:	6856      	ldr	r6, [r2, #4]
 8004e58:	4286      	cmp	r6, r0
 8004e5a:	d006      	beq.n	8004e6a <_malloc_r+0xca>
 8004e5c:	6872      	ldr	r2, [r6, #4]
 8004e5e:	f022 0203 	bic.w	r2, r2, #3
 8004e62:	1b11      	subs	r1, r2, r4
 8004e64:	290f      	cmp	r1, #15
 8004e66:	dd1c      	ble.n	8004ea2 <_malloc_r+0x102>
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	e7d0      	b.n	8004e10 <_malloc_r+0x70>
 8004e6e:	2b14      	cmp	r3, #20
 8004e70:	d801      	bhi.n	8004e76 <_malloc_r+0xd6>
 8004e72:	335b      	adds	r3, #91	; 0x5b
 8004e74:	e7ea      	b.n	8004e4c <_malloc_r+0xac>
 8004e76:	2b54      	cmp	r3, #84	; 0x54
 8004e78:	d802      	bhi.n	8004e80 <_malloc_r+0xe0>
 8004e7a:	0b23      	lsrs	r3, r4, #12
 8004e7c:	336e      	adds	r3, #110	; 0x6e
 8004e7e:	e7e5      	b.n	8004e4c <_malloc_r+0xac>
 8004e80:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8004e84:	d802      	bhi.n	8004e8c <_malloc_r+0xec>
 8004e86:	0be3      	lsrs	r3, r4, #15
 8004e88:	3377      	adds	r3, #119	; 0x77
 8004e8a:	e7df      	b.n	8004e4c <_malloc_r+0xac>
 8004e8c:	f240 5254 	movw	r2, #1364	; 0x554
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d804      	bhi.n	8004e9e <_malloc_r+0xfe>
 8004e94:	0ca3      	lsrs	r3, r4, #18
 8004e96:	337c      	adds	r3, #124	; 0x7c
 8004e98:	e7d8      	b.n	8004e4c <_malloc_r+0xac>
 8004e9a:	233f      	movs	r3, #63	; 0x3f
 8004e9c:	e7d6      	b.n	8004e4c <_malloc_r+0xac>
 8004e9e:	237e      	movs	r3, #126	; 0x7e
 8004ea0:	e7d4      	b.n	8004e4c <_malloc_r+0xac>
 8004ea2:	2900      	cmp	r1, #0
 8004ea4:	68f1      	ldr	r1, [r6, #12]
 8004ea6:	db04      	blt.n	8004eb2 <_malloc_r+0x112>
 8004ea8:	68b3      	ldr	r3, [r6, #8]
 8004eaa:	60d9      	str	r1, [r3, #12]
 8004eac:	608b      	str	r3, [r1, #8]
 8004eae:	18b3      	adds	r3, r6, r2
 8004eb0:	e7a4      	b.n	8004dfc <_malloc_r+0x5c>
 8004eb2:	460e      	mov	r6, r1
 8004eb4:	e7d0      	b.n	8004e58 <_malloc_r+0xb8>
 8004eb6:	2f00      	cmp	r7, #0
 8004eb8:	616a      	str	r2, [r5, #20]
 8004eba:	612a      	str	r2, [r5, #16]
 8004ebc:	db05      	blt.n	8004eca <_malloc_r+0x12a>
 8004ebe:	4430      	add	r0, r6
 8004ec0:	6843      	ldr	r3, [r0, #4]
 8004ec2:	f043 0301 	orr.w	r3, r3, #1
 8004ec6:	6043      	str	r3, [r0, #4]
 8004ec8:	e79c      	b.n	8004e04 <_malloc_r+0x64>
 8004eca:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004ece:	d244      	bcs.n	8004f5a <_malloc_r+0x1ba>
 8004ed0:	08c0      	lsrs	r0, r0, #3
 8004ed2:	1087      	asrs	r7, r0, #2
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	fa02 f707 	lsl.w	r7, r2, r7
 8004eda:	686a      	ldr	r2, [r5, #4]
 8004edc:	3001      	adds	r0, #1
 8004ede:	433a      	orrs	r2, r7
 8004ee0:	606a      	str	r2, [r5, #4]
 8004ee2:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8004ee6:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8004eea:	60b7      	str	r7, [r6, #8]
 8004eec:	3a08      	subs	r2, #8
 8004eee:	60f2      	str	r2, [r6, #12]
 8004ef0:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8004ef4:	60fe      	str	r6, [r7, #12]
 8004ef6:	2001      	movs	r0, #1
 8004ef8:	109a      	asrs	r2, r3, #2
 8004efa:	fa00 f202 	lsl.w	r2, r0, r2
 8004efe:	6868      	ldr	r0, [r5, #4]
 8004f00:	4282      	cmp	r2, r0
 8004f02:	f200 80a1 	bhi.w	8005048 <_malloc_r+0x2a8>
 8004f06:	4202      	tst	r2, r0
 8004f08:	d106      	bne.n	8004f18 <_malloc_r+0x178>
 8004f0a:	f023 0303 	bic.w	r3, r3, #3
 8004f0e:	0052      	lsls	r2, r2, #1
 8004f10:	4202      	tst	r2, r0
 8004f12:	f103 0304 	add.w	r3, r3, #4
 8004f16:	d0fa      	beq.n	8004f0e <_malloc_r+0x16e>
 8004f18:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8004f1c:	46e0      	mov	r8, ip
 8004f1e:	469e      	mov	lr, r3
 8004f20:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8004f24:	4546      	cmp	r6, r8
 8004f26:	d153      	bne.n	8004fd0 <_malloc_r+0x230>
 8004f28:	f10e 0e01 	add.w	lr, lr, #1
 8004f2c:	f01e 0f03 	tst.w	lr, #3
 8004f30:	f108 0808 	add.w	r8, r8, #8
 8004f34:	d1f4      	bne.n	8004f20 <_malloc_r+0x180>
 8004f36:	0798      	lsls	r0, r3, #30
 8004f38:	d179      	bne.n	800502e <_malloc_r+0x28e>
 8004f3a:	686b      	ldr	r3, [r5, #4]
 8004f3c:	ea23 0302 	bic.w	r3, r3, r2
 8004f40:	606b      	str	r3, [r5, #4]
 8004f42:	6868      	ldr	r0, [r5, #4]
 8004f44:	0052      	lsls	r2, r2, #1
 8004f46:	4282      	cmp	r2, r0
 8004f48:	d87e      	bhi.n	8005048 <_malloc_r+0x2a8>
 8004f4a:	2a00      	cmp	r2, #0
 8004f4c:	d07c      	beq.n	8005048 <_malloc_r+0x2a8>
 8004f4e:	4673      	mov	r3, lr
 8004f50:	4202      	tst	r2, r0
 8004f52:	d1e1      	bne.n	8004f18 <_malloc_r+0x178>
 8004f54:	3304      	adds	r3, #4
 8004f56:	0052      	lsls	r2, r2, #1
 8004f58:	e7fa      	b.n	8004f50 <_malloc_r+0x1b0>
 8004f5a:	0a42      	lsrs	r2, r0, #9
 8004f5c:	2a04      	cmp	r2, #4
 8004f5e:	d815      	bhi.n	8004f8c <_malloc_r+0x1ec>
 8004f60:	0982      	lsrs	r2, r0, #6
 8004f62:	3238      	adds	r2, #56	; 0x38
 8004f64:	1c57      	adds	r7, r2, #1
 8004f66:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8004f6a:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8004f6e:	45be      	cmp	lr, r7
 8004f70:	d126      	bne.n	8004fc0 <_malloc_r+0x220>
 8004f72:	2001      	movs	r0, #1
 8004f74:	1092      	asrs	r2, r2, #2
 8004f76:	fa00 f202 	lsl.w	r2, r0, r2
 8004f7a:	6868      	ldr	r0, [r5, #4]
 8004f7c:	4310      	orrs	r0, r2
 8004f7e:	6068      	str	r0, [r5, #4]
 8004f80:	f8c6 e00c 	str.w	lr, [r6, #12]
 8004f84:	60b7      	str	r7, [r6, #8]
 8004f86:	f8ce 6008 	str.w	r6, [lr, #8]
 8004f8a:	e7b3      	b.n	8004ef4 <_malloc_r+0x154>
 8004f8c:	2a14      	cmp	r2, #20
 8004f8e:	d801      	bhi.n	8004f94 <_malloc_r+0x1f4>
 8004f90:	325b      	adds	r2, #91	; 0x5b
 8004f92:	e7e7      	b.n	8004f64 <_malloc_r+0x1c4>
 8004f94:	2a54      	cmp	r2, #84	; 0x54
 8004f96:	d802      	bhi.n	8004f9e <_malloc_r+0x1fe>
 8004f98:	0b02      	lsrs	r2, r0, #12
 8004f9a:	326e      	adds	r2, #110	; 0x6e
 8004f9c:	e7e2      	b.n	8004f64 <_malloc_r+0x1c4>
 8004f9e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8004fa2:	d802      	bhi.n	8004faa <_malloc_r+0x20a>
 8004fa4:	0bc2      	lsrs	r2, r0, #15
 8004fa6:	3277      	adds	r2, #119	; 0x77
 8004fa8:	e7dc      	b.n	8004f64 <_malloc_r+0x1c4>
 8004faa:	f240 5754 	movw	r7, #1364	; 0x554
 8004fae:	42ba      	cmp	r2, r7
 8004fb0:	bf9a      	itte	ls
 8004fb2:	0c82      	lsrls	r2, r0, #18
 8004fb4:	327c      	addls	r2, #124	; 0x7c
 8004fb6:	227e      	movhi	r2, #126	; 0x7e
 8004fb8:	e7d4      	b.n	8004f64 <_malloc_r+0x1c4>
 8004fba:	68bf      	ldr	r7, [r7, #8]
 8004fbc:	45be      	cmp	lr, r7
 8004fbe:	d004      	beq.n	8004fca <_malloc_r+0x22a>
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	f022 0203 	bic.w	r2, r2, #3
 8004fc6:	4290      	cmp	r0, r2
 8004fc8:	d3f7      	bcc.n	8004fba <_malloc_r+0x21a>
 8004fca:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8004fce:	e7d7      	b.n	8004f80 <_malloc_r+0x1e0>
 8004fd0:	6870      	ldr	r0, [r6, #4]
 8004fd2:	68f7      	ldr	r7, [r6, #12]
 8004fd4:	f020 0003 	bic.w	r0, r0, #3
 8004fd8:	eba0 0a04 	sub.w	sl, r0, r4
 8004fdc:	f1ba 0f0f 	cmp.w	sl, #15
 8004fe0:	dd10      	ble.n	8005004 <_malloc_r+0x264>
 8004fe2:	68b2      	ldr	r2, [r6, #8]
 8004fe4:	1933      	adds	r3, r6, r4
 8004fe6:	f044 0401 	orr.w	r4, r4, #1
 8004fea:	6074      	str	r4, [r6, #4]
 8004fec:	60d7      	str	r7, [r2, #12]
 8004fee:	60ba      	str	r2, [r7, #8]
 8004ff0:	f04a 0201 	orr.w	r2, sl, #1
 8004ff4:	616b      	str	r3, [r5, #20]
 8004ff6:	612b      	str	r3, [r5, #16]
 8004ff8:	60d9      	str	r1, [r3, #12]
 8004ffa:	6099      	str	r1, [r3, #8]
 8004ffc:	605a      	str	r2, [r3, #4]
 8004ffe:	f846 a000 	str.w	sl, [r6, r0]
 8005002:	e6ff      	b.n	8004e04 <_malloc_r+0x64>
 8005004:	f1ba 0f00 	cmp.w	sl, #0
 8005008:	db0f      	blt.n	800502a <_malloc_r+0x28a>
 800500a:	4430      	add	r0, r6
 800500c:	6843      	ldr	r3, [r0, #4]
 800500e:	f043 0301 	orr.w	r3, r3, #1
 8005012:	6043      	str	r3, [r0, #4]
 8005014:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8005018:	4648      	mov	r0, r9
 800501a:	60df      	str	r7, [r3, #12]
 800501c:	60bb      	str	r3, [r7, #8]
 800501e:	f000 f8df 	bl	80051e0 <__malloc_unlock>
 8005022:	4630      	mov	r0, r6
 8005024:	b003      	add	sp, #12
 8005026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800502a:	463e      	mov	r6, r7
 800502c:	e77a      	b.n	8004f24 <_malloc_r+0x184>
 800502e:	f85c 0908 	ldr.w	r0, [ip], #-8
 8005032:	4584      	cmp	ip, r0
 8005034:	f103 33ff 	add.w	r3, r3, #4294967295
 8005038:	f43f af7d 	beq.w	8004f36 <_malloc_r+0x196>
 800503c:	e781      	b.n	8004f42 <_malloc_r+0x1a2>
 800503e:	bf00      	nop
 8005040:	200000f8 	.word	0x200000f8
 8005044:	20000100 	.word	0x20000100
 8005048:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800504c:	f8db 6004 	ldr.w	r6, [fp, #4]
 8005050:	f026 0603 	bic.w	r6, r6, #3
 8005054:	42b4      	cmp	r4, r6
 8005056:	d803      	bhi.n	8005060 <_malloc_r+0x2c0>
 8005058:	1b33      	subs	r3, r6, r4
 800505a:	2b0f      	cmp	r3, #15
 800505c:	f300 8096 	bgt.w	800518c <_malloc_r+0x3ec>
 8005060:	4a4f      	ldr	r2, [pc, #316]	; (80051a0 <_malloc_r+0x400>)
 8005062:	6817      	ldr	r7, [r2, #0]
 8005064:	4a4f      	ldr	r2, [pc, #316]	; (80051a4 <_malloc_r+0x404>)
 8005066:	6811      	ldr	r1, [r2, #0]
 8005068:	3710      	adds	r7, #16
 800506a:	3101      	adds	r1, #1
 800506c:	eb0b 0306 	add.w	r3, fp, r6
 8005070:	4427      	add	r7, r4
 8005072:	d005      	beq.n	8005080 <_malloc_r+0x2e0>
 8005074:	494c      	ldr	r1, [pc, #304]	; (80051a8 <_malloc_r+0x408>)
 8005076:	3901      	subs	r1, #1
 8005078:	440f      	add	r7, r1
 800507a:	3101      	adds	r1, #1
 800507c:	4249      	negs	r1, r1
 800507e:	400f      	ands	r7, r1
 8005080:	4639      	mov	r1, r7
 8005082:	4648      	mov	r0, r9
 8005084:	9201      	str	r2, [sp, #4]
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	f000 fb80 	bl	800578c <_sbrk_r>
 800508c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005090:	4680      	mov	r8, r0
 8005092:	d056      	beq.n	8005142 <_malloc_r+0x3a2>
 8005094:	9b00      	ldr	r3, [sp, #0]
 8005096:	9a01      	ldr	r2, [sp, #4]
 8005098:	4283      	cmp	r3, r0
 800509a:	d901      	bls.n	80050a0 <_malloc_r+0x300>
 800509c:	45ab      	cmp	fp, r5
 800509e:	d150      	bne.n	8005142 <_malloc_r+0x3a2>
 80050a0:	4842      	ldr	r0, [pc, #264]	; (80051ac <_malloc_r+0x40c>)
 80050a2:	6801      	ldr	r1, [r0, #0]
 80050a4:	4543      	cmp	r3, r8
 80050a6:	eb07 0e01 	add.w	lr, r7, r1
 80050aa:	f8c0 e000 	str.w	lr, [r0]
 80050ae:	4940      	ldr	r1, [pc, #256]	; (80051b0 <_malloc_r+0x410>)
 80050b0:	4682      	mov	sl, r0
 80050b2:	d113      	bne.n	80050dc <_malloc_r+0x33c>
 80050b4:	420b      	tst	r3, r1
 80050b6:	d111      	bne.n	80050dc <_malloc_r+0x33c>
 80050b8:	68ab      	ldr	r3, [r5, #8]
 80050ba:	443e      	add	r6, r7
 80050bc:	f046 0601 	orr.w	r6, r6, #1
 80050c0:	605e      	str	r6, [r3, #4]
 80050c2:	4a3c      	ldr	r2, [pc, #240]	; (80051b4 <_malloc_r+0x414>)
 80050c4:	f8da 3000 	ldr.w	r3, [sl]
 80050c8:	6811      	ldr	r1, [r2, #0]
 80050ca:	428b      	cmp	r3, r1
 80050cc:	bf88      	it	hi
 80050ce:	6013      	strhi	r3, [r2, #0]
 80050d0:	4a39      	ldr	r2, [pc, #228]	; (80051b8 <_malloc_r+0x418>)
 80050d2:	6811      	ldr	r1, [r2, #0]
 80050d4:	428b      	cmp	r3, r1
 80050d6:	bf88      	it	hi
 80050d8:	6013      	strhi	r3, [r2, #0]
 80050da:	e032      	b.n	8005142 <_malloc_r+0x3a2>
 80050dc:	6810      	ldr	r0, [r2, #0]
 80050de:	3001      	adds	r0, #1
 80050e0:	bf1b      	ittet	ne
 80050e2:	eba8 0303 	subne.w	r3, r8, r3
 80050e6:	4473      	addne	r3, lr
 80050e8:	f8c2 8000 	streq.w	r8, [r2]
 80050ec:	f8ca 3000 	strne.w	r3, [sl]
 80050f0:	f018 0007 	ands.w	r0, r8, #7
 80050f4:	bf1c      	itt	ne
 80050f6:	f1c0 0008 	rsbne	r0, r0, #8
 80050fa:	4480      	addne	r8, r0
 80050fc:	4b2a      	ldr	r3, [pc, #168]	; (80051a8 <_malloc_r+0x408>)
 80050fe:	4447      	add	r7, r8
 8005100:	4418      	add	r0, r3
 8005102:	400f      	ands	r7, r1
 8005104:	1bc7      	subs	r7, r0, r7
 8005106:	4639      	mov	r1, r7
 8005108:	4648      	mov	r0, r9
 800510a:	f000 fb3f 	bl	800578c <_sbrk_r>
 800510e:	1c43      	adds	r3, r0, #1
 8005110:	bf08      	it	eq
 8005112:	4640      	moveq	r0, r8
 8005114:	f8da 3000 	ldr.w	r3, [sl]
 8005118:	f8c5 8008 	str.w	r8, [r5, #8]
 800511c:	bf08      	it	eq
 800511e:	2700      	moveq	r7, #0
 8005120:	eba0 0008 	sub.w	r0, r0, r8
 8005124:	443b      	add	r3, r7
 8005126:	4407      	add	r7, r0
 8005128:	f047 0701 	orr.w	r7, r7, #1
 800512c:	45ab      	cmp	fp, r5
 800512e:	f8ca 3000 	str.w	r3, [sl]
 8005132:	f8c8 7004 	str.w	r7, [r8, #4]
 8005136:	d0c4      	beq.n	80050c2 <_malloc_r+0x322>
 8005138:	2e0f      	cmp	r6, #15
 800513a:	d810      	bhi.n	800515e <_malloc_r+0x3be>
 800513c:	2301      	movs	r3, #1
 800513e:	f8c8 3004 	str.w	r3, [r8, #4]
 8005142:	68ab      	ldr	r3, [r5, #8]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	f022 0203 	bic.w	r2, r2, #3
 800514a:	4294      	cmp	r4, r2
 800514c:	eba2 0304 	sub.w	r3, r2, r4
 8005150:	d801      	bhi.n	8005156 <_malloc_r+0x3b6>
 8005152:	2b0f      	cmp	r3, #15
 8005154:	dc1a      	bgt.n	800518c <_malloc_r+0x3ec>
 8005156:	4648      	mov	r0, r9
 8005158:	f000 f842 	bl	80051e0 <__malloc_unlock>
 800515c:	e62d      	b.n	8004dba <_malloc_r+0x1a>
 800515e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8005162:	3e0c      	subs	r6, #12
 8005164:	f026 0607 	bic.w	r6, r6, #7
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	4333      	orrs	r3, r6
 800516e:	f8cb 3004 	str.w	r3, [fp, #4]
 8005172:	eb0b 0306 	add.w	r3, fp, r6
 8005176:	2205      	movs	r2, #5
 8005178:	2e0f      	cmp	r6, #15
 800517a:	605a      	str	r2, [r3, #4]
 800517c:	609a      	str	r2, [r3, #8]
 800517e:	d9a0      	bls.n	80050c2 <_malloc_r+0x322>
 8005180:	f10b 0108 	add.w	r1, fp, #8
 8005184:	4648      	mov	r0, r9
 8005186:	f000 fc0f 	bl	80059a8 <_free_r>
 800518a:	e79a      	b.n	80050c2 <_malloc_r+0x322>
 800518c:	68ae      	ldr	r6, [r5, #8]
 800518e:	f044 0201 	orr.w	r2, r4, #1
 8005192:	4434      	add	r4, r6
 8005194:	f043 0301 	orr.w	r3, r3, #1
 8005198:	6072      	str	r2, [r6, #4]
 800519a:	60ac      	str	r4, [r5, #8]
 800519c:	6063      	str	r3, [r4, #4]
 800519e:	e631      	b.n	8004e04 <_malloc_r+0x64>
 80051a0:	200006c0 	.word	0x200006c0
 80051a4:	20000500 	.word	0x20000500
 80051a8:	00000080 	.word	0x00000080
 80051ac:	20000690 	.word	0x20000690
 80051b0:	0000007f 	.word	0x0000007f
 80051b4:	200006b8 	.word	0x200006b8
 80051b8:	200006bc 	.word	0x200006bc

080051bc <memcpy>:
 80051bc:	b510      	push	{r4, lr}
 80051be:	1e43      	subs	r3, r0, #1
 80051c0:	440a      	add	r2, r1
 80051c2:	4291      	cmp	r1, r2
 80051c4:	d100      	bne.n	80051c8 <memcpy+0xc>
 80051c6:	bd10      	pop	{r4, pc}
 80051c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051d0:	e7f7      	b.n	80051c2 <memcpy+0x6>
	...

080051d4 <__malloc_lock>:
 80051d4:	4801      	ldr	r0, [pc, #4]	; (80051dc <__malloc_lock+0x8>)
 80051d6:	f000 bca3 	b.w	8005b20 <__retarget_lock_acquire_recursive>
 80051da:	bf00      	nop
 80051dc:	20000874 	.word	0x20000874

080051e0 <__malloc_unlock>:
 80051e0:	4801      	ldr	r0, [pc, #4]	; (80051e8 <__malloc_unlock+0x8>)
 80051e2:	f000 bc9e 	b.w	8005b22 <__retarget_lock_release_recursive>
 80051e6:	bf00      	nop
 80051e8:	20000874 	.word	0x20000874

080051ec <_Balloc>:
 80051ec:	b570      	push	{r4, r5, r6, lr}
 80051ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80051f0:	4604      	mov	r4, r0
 80051f2:	460e      	mov	r6, r1
 80051f4:	b93d      	cbnz	r5, 8005206 <_Balloc+0x1a>
 80051f6:	2010      	movs	r0, #16
 80051f8:	f7ff fdca 	bl	8004d90 <malloc>
 80051fc:	6260      	str	r0, [r4, #36]	; 0x24
 80051fe:	6045      	str	r5, [r0, #4]
 8005200:	6085      	str	r5, [r0, #8]
 8005202:	6005      	str	r5, [r0, #0]
 8005204:	60c5      	str	r5, [r0, #12]
 8005206:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005208:	68eb      	ldr	r3, [r5, #12]
 800520a:	b183      	cbz	r3, 800522e <_Balloc+0x42>
 800520c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005214:	b9b8      	cbnz	r0, 8005246 <_Balloc+0x5a>
 8005216:	2101      	movs	r1, #1
 8005218:	fa01 f506 	lsl.w	r5, r1, r6
 800521c:	1d6a      	adds	r2, r5, #5
 800521e:	0092      	lsls	r2, r2, #2
 8005220:	4620      	mov	r0, r4
 8005222:	f000 fb3d 	bl	80058a0 <_calloc_r>
 8005226:	b160      	cbz	r0, 8005242 <_Balloc+0x56>
 8005228:	6046      	str	r6, [r0, #4]
 800522a:	6085      	str	r5, [r0, #8]
 800522c:	e00e      	b.n	800524c <_Balloc+0x60>
 800522e:	2221      	movs	r2, #33	; 0x21
 8005230:	2104      	movs	r1, #4
 8005232:	4620      	mov	r0, r4
 8005234:	f000 fb34 	bl	80058a0 <_calloc_r>
 8005238:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800523a:	60e8      	str	r0, [r5, #12]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1e4      	bne.n	800520c <_Balloc+0x20>
 8005242:	2000      	movs	r0, #0
 8005244:	bd70      	pop	{r4, r5, r6, pc}
 8005246:	6802      	ldr	r2, [r0, #0]
 8005248:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800524c:	2300      	movs	r3, #0
 800524e:	6103      	str	r3, [r0, #16]
 8005250:	60c3      	str	r3, [r0, #12]
 8005252:	bd70      	pop	{r4, r5, r6, pc}

08005254 <_Bfree>:
 8005254:	b570      	push	{r4, r5, r6, lr}
 8005256:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005258:	4606      	mov	r6, r0
 800525a:	460d      	mov	r5, r1
 800525c:	b93c      	cbnz	r4, 800526e <_Bfree+0x1a>
 800525e:	2010      	movs	r0, #16
 8005260:	f7ff fd96 	bl	8004d90 <malloc>
 8005264:	6270      	str	r0, [r6, #36]	; 0x24
 8005266:	6044      	str	r4, [r0, #4]
 8005268:	6084      	str	r4, [r0, #8]
 800526a:	6004      	str	r4, [r0, #0]
 800526c:	60c4      	str	r4, [r0, #12]
 800526e:	b13d      	cbz	r5, 8005280 <_Bfree+0x2c>
 8005270:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005272:	686a      	ldr	r2, [r5, #4]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800527a:	6029      	str	r1, [r5, #0]
 800527c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005280:	bd70      	pop	{r4, r5, r6, pc}

08005282 <__multadd>:
 8005282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005286:	690d      	ldr	r5, [r1, #16]
 8005288:	461f      	mov	r7, r3
 800528a:	4606      	mov	r6, r0
 800528c:	460c      	mov	r4, r1
 800528e:	f101 0e14 	add.w	lr, r1, #20
 8005292:	2300      	movs	r3, #0
 8005294:	f8de 0000 	ldr.w	r0, [lr]
 8005298:	b281      	uxth	r1, r0
 800529a:	fb02 7101 	mla	r1, r2, r1, r7
 800529e:	0c0f      	lsrs	r7, r1, #16
 80052a0:	0c00      	lsrs	r0, r0, #16
 80052a2:	fb02 7000 	mla	r0, r2, r0, r7
 80052a6:	b289      	uxth	r1, r1
 80052a8:	3301      	adds	r3, #1
 80052aa:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80052ae:	429d      	cmp	r5, r3
 80052b0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80052b4:	f84e 1b04 	str.w	r1, [lr], #4
 80052b8:	dcec      	bgt.n	8005294 <__multadd+0x12>
 80052ba:	b1d7      	cbz	r7, 80052f2 <__multadd+0x70>
 80052bc:	68a3      	ldr	r3, [r4, #8]
 80052be:	429d      	cmp	r5, r3
 80052c0:	db12      	blt.n	80052e8 <__multadd+0x66>
 80052c2:	6861      	ldr	r1, [r4, #4]
 80052c4:	4630      	mov	r0, r6
 80052c6:	3101      	adds	r1, #1
 80052c8:	f7ff ff90 	bl	80051ec <_Balloc>
 80052cc:	6922      	ldr	r2, [r4, #16]
 80052ce:	3202      	adds	r2, #2
 80052d0:	f104 010c 	add.w	r1, r4, #12
 80052d4:	4680      	mov	r8, r0
 80052d6:	0092      	lsls	r2, r2, #2
 80052d8:	300c      	adds	r0, #12
 80052da:	f7ff ff6f 	bl	80051bc <memcpy>
 80052de:	4621      	mov	r1, r4
 80052e0:	4630      	mov	r0, r6
 80052e2:	f7ff ffb7 	bl	8005254 <_Bfree>
 80052e6:	4644      	mov	r4, r8
 80052e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80052ec:	3501      	adds	r5, #1
 80052ee:	615f      	str	r7, [r3, #20]
 80052f0:	6125      	str	r5, [r4, #16]
 80052f2:	4620      	mov	r0, r4
 80052f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080052f8 <__hi0bits>:
 80052f8:	0c02      	lsrs	r2, r0, #16
 80052fa:	0412      	lsls	r2, r2, #16
 80052fc:	4603      	mov	r3, r0
 80052fe:	b9b2      	cbnz	r2, 800532e <__hi0bits+0x36>
 8005300:	0403      	lsls	r3, r0, #16
 8005302:	2010      	movs	r0, #16
 8005304:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005308:	bf04      	itt	eq
 800530a:	021b      	lsleq	r3, r3, #8
 800530c:	3008      	addeq	r0, #8
 800530e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005312:	bf04      	itt	eq
 8005314:	011b      	lsleq	r3, r3, #4
 8005316:	3004      	addeq	r0, #4
 8005318:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800531c:	bf04      	itt	eq
 800531e:	009b      	lsleq	r3, r3, #2
 8005320:	3002      	addeq	r0, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	db06      	blt.n	8005334 <__hi0bits+0x3c>
 8005326:	005b      	lsls	r3, r3, #1
 8005328:	d503      	bpl.n	8005332 <__hi0bits+0x3a>
 800532a:	3001      	adds	r0, #1
 800532c:	4770      	bx	lr
 800532e:	2000      	movs	r0, #0
 8005330:	e7e8      	b.n	8005304 <__hi0bits+0xc>
 8005332:	2020      	movs	r0, #32
 8005334:	4770      	bx	lr

08005336 <__lo0bits>:
 8005336:	6803      	ldr	r3, [r0, #0]
 8005338:	f013 0207 	ands.w	r2, r3, #7
 800533c:	4601      	mov	r1, r0
 800533e:	d00b      	beq.n	8005358 <__lo0bits+0x22>
 8005340:	07da      	lsls	r2, r3, #31
 8005342:	d423      	bmi.n	800538c <__lo0bits+0x56>
 8005344:	0798      	lsls	r0, r3, #30
 8005346:	bf49      	itett	mi
 8005348:	085b      	lsrmi	r3, r3, #1
 800534a:	089b      	lsrpl	r3, r3, #2
 800534c:	2001      	movmi	r0, #1
 800534e:	600b      	strmi	r3, [r1, #0]
 8005350:	bf5c      	itt	pl
 8005352:	600b      	strpl	r3, [r1, #0]
 8005354:	2002      	movpl	r0, #2
 8005356:	4770      	bx	lr
 8005358:	b298      	uxth	r0, r3
 800535a:	b9a8      	cbnz	r0, 8005388 <__lo0bits+0x52>
 800535c:	0c1b      	lsrs	r3, r3, #16
 800535e:	2010      	movs	r0, #16
 8005360:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005364:	bf04      	itt	eq
 8005366:	0a1b      	lsreq	r3, r3, #8
 8005368:	3008      	addeq	r0, #8
 800536a:	071a      	lsls	r2, r3, #28
 800536c:	bf04      	itt	eq
 800536e:	091b      	lsreq	r3, r3, #4
 8005370:	3004      	addeq	r0, #4
 8005372:	079a      	lsls	r2, r3, #30
 8005374:	bf04      	itt	eq
 8005376:	089b      	lsreq	r3, r3, #2
 8005378:	3002      	addeq	r0, #2
 800537a:	07da      	lsls	r2, r3, #31
 800537c:	d402      	bmi.n	8005384 <__lo0bits+0x4e>
 800537e:	085b      	lsrs	r3, r3, #1
 8005380:	d006      	beq.n	8005390 <__lo0bits+0x5a>
 8005382:	3001      	adds	r0, #1
 8005384:	600b      	str	r3, [r1, #0]
 8005386:	4770      	bx	lr
 8005388:	4610      	mov	r0, r2
 800538a:	e7e9      	b.n	8005360 <__lo0bits+0x2a>
 800538c:	2000      	movs	r0, #0
 800538e:	4770      	bx	lr
 8005390:	2020      	movs	r0, #32
 8005392:	4770      	bx	lr

08005394 <__i2b>:
 8005394:	b510      	push	{r4, lr}
 8005396:	460c      	mov	r4, r1
 8005398:	2101      	movs	r1, #1
 800539a:	f7ff ff27 	bl	80051ec <_Balloc>
 800539e:	2201      	movs	r2, #1
 80053a0:	6144      	str	r4, [r0, #20]
 80053a2:	6102      	str	r2, [r0, #16]
 80053a4:	bd10      	pop	{r4, pc}

080053a6 <__multiply>:
 80053a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053aa:	4614      	mov	r4, r2
 80053ac:	690a      	ldr	r2, [r1, #16]
 80053ae:	6923      	ldr	r3, [r4, #16]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	bfb8      	it	lt
 80053b4:	460b      	movlt	r3, r1
 80053b6:	4689      	mov	r9, r1
 80053b8:	bfbc      	itt	lt
 80053ba:	46a1      	movlt	r9, r4
 80053bc:	461c      	movlt	r4, r3
 80053be:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80053c2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80053c6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80053ca:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80053ce:	eb07 060a 	add.w	r6, r7, sl
 80053d2:	429e      	cmp	r6, r3
 80053d4:	bfc8      	it	gt
 80053d6:	3101      	addgt	r1, #1
 80053d8:	f7ff ff08 	bl	80051ec <_Balloc>
 80053dc:	f100 0514 	add.w	r5, r0, #20
 80053e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80053e4:	462b      	mov	r3, r5
 80053e6:	2200      	movs	r2, #0
 80053e8:	4543      	cmp	r3, r8
 80053ea:	d316      	bcc.n	800541a <__multiply+0x74>
 80053ec:	f104 0214 	add.w	r2, r4, #20
 80053f0:	f109 0114 	add.w	r1, r9, #20
 80053f4:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 80053f8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80053fc:	9301      	str	r3, [sp, #4]
 80053fe:	9c01      	ldr	r4, [sp, #4]
 8005400:	4294      	cmp	r4, r2
 8005402:	4613      	mov	r3, r2
 8005404:	d80c      	bhi.n	8005420 <__multiply+0x7a>
 8005406:	2e00      	cmp	r6, #0
 8005408:	dd03      	ble.n	8005412 <__multiply+0x6c>
 800540a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800540e:	2b00      	cmp	r3, #0
 8005410:	d054      	beq.n	80054bc <__multiply+0x116>
 8005412:	6106      	str	r6, [r0, #16]
 8005414:	b003      	add	sp, #12
 8005416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800541a:	f843 2b04 	str.w	r2, [r3], #4
 800541e:	e7e3      	b.n	80053e8 <__multiply+0x42>
 8005420:	f8b3 a000 	ldrh.w	sl, [r3]
 8005424:	3204      	adds	r2, #4
 8005426:	f1ba 0f00 	cmp.w	sl, #0
 800542a:	d020      	beq.n	800546e <__multiply+0xc8>
 800542c:	46ae      	mov	lr, r5
 800542e:	4689      	mov	r9, r1
 8005430:	f04f 0c00 	mov.w	ip, #0
 8005434:	f859 4b04 	ldr.w	r4, [r9], #4
 8005438:	f8be b000 	ldrh.w	fp, [lr]
 800543c:	b2a3      	uxth	r3, r4
 800543e:	fb0a b303 	mla	r3, sl, r3, fp
 8005442:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8005446:	f8de 4000 	ldr.w	r4, [lr]
 800544a:	4463      	add	r3, ip
 800544c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8005450:	fb0a c40b 	mla	r4, sl, fp, ip
 8005454:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005458:	b29b      	uxth	r3, r3
 800545a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800545e:	454f      	cmp	r7, r9
 8005460:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8005464:	f84e 3b04 	str.w	r3, [lr], #4
 8005468:	d8e4      	bhi.n	8005434 <__multiply+0x8e>
 800546a:	f8ce c000 	str.w	ip, [lr]
 800546e:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8005472:	f1b9 0f00 	cmp.w	r9, #0
 8005476:	d01f      	beq.n	80054b8 <__multiply+0x112>
 8005478:	682b      	ldr	r3, [r5, #0]
 800547a:	46ae      	mov	lr, r5
 800547c:	468c      	mov	ip, r1
 800547e:	f04f 0a00 	mov.w	sl, #0
 8005482:	f8bc 4000 	ldrh.w	r4, [ip]
 8005486:	f8be b002 	ldrh.w	fp, [lr, #2]
 800548a:	fb09 b404 	mla	r4, r9, r4, fp
 800548e:	44a2      	add	sl, r4
 8005490:	b29b      	uxth	r3, r3
 8005492:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8005496:	f84e 3b04 	str.w	r3, [lr], #4
 800549a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800549e:	f8be 4000 	ldrh.w	r4, [lr]
 80054a2:	0c1b      	lsrs	r3, r3, #16
 80054a4:	fb09 4303 	mla	r3, r9, r3, r4
 80054a8:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80054ac:	4567      	cmp	r7, ip
 80054ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80054b2:	d8e6      	bhi.n	8005482 <__multiply+0xdc>
 80054b4:	f8ce 3000 	str.w	r3, [lr]
 80054b8:	3504      	adds	r5, #4
 80054ba:	e7a0      	b.n	80053fe <__multiply+0x58>
 80054bc:	3e01      	subs	r6, #1
 80054be:	e7a2      	b.n	8005406 <__multiply+0x60>

080054c0 <__pow5mult>:
 80054c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054c4:	4615      	mov	r5, r2
 80054c6:	f012 0203 	ands.w	r2, r2, #3
 80054ca:	4606      	mov	r6, r0
 80054cc:	460f      	mov	r7, r1
 80054ce:	d007      	beq.n	80054e0 <__pow5mult+0x20>
 80054d0:	3a01      	subs	r2, #1
 80054d2:	4c21      	ldr	r4, [pc, #132]	; (8005558 <__pow5mult+0x98>)
 80054d4:	2300      	movs	r3, #0
 80054d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80054da:	f7ff fed2 	bl	8005282 <__multadd>
 80054de:	4607      	mov	r7, r0
 80054e0:	10ad      	asrs	r5, r5, #2
 80054e2:	d035      	beq.n	8005550 <__pow5mult+0x90>
 80054e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80054e6:	b93c      	cbnz	r4, 80054f8 <__pow5mult+0x38>
 80054e8:	2010      	movs	r0, #16
 80054ea:	f7ff fc51 	bl	8004d90 <malloc>
 80054ee:	6270      	str	r0, [r6, #36]	; 0x24
 80054f0:	6044      	str	r4, [r0, #4]
 80054f2:	6084      	str	r4, [r0, #8]
 80054f4:	6004      	str	r4, [r0, #0]
 80054f6:	60c4      	str	r4, [r0, #12]
 80054f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80054fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005500:	b94c      	cbnz	r4, 8005516 <__pow5mult+0x56>
 8005502:	f240 2171 	movw	r1, #625	; 0x271
 8005506:	4630      	mov	r0, r6
 8005508:	f7ff ff44 	bl	8005394 <__i2b>
 800550c:	2300      	movs	r3, #0
 800550e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005512:	4604      	mov	r4, r0
 8005514:	6003      	str	r3, [r0, #0]
 8005516:	f04f 0800 	mov.w	r8, #0
 800551a:	07eb      	lsls	r3, r5, #31
 800551c:	d50a      	bpl.n	8005534 <__pow5mult+0x74>
 800551e:	4639      	mov	r1, r7
 8005520:	4622      	mov	r2, r4
 8005522:	4630      	mov	r0, r6
 8005524:	f7ff ff3f 	bl	80053a6 <__multiply>
 8005528:	4639      	mov	r1, r7
 800552a:	4681      	mov	r9, r0
 800552c:	4630      	mov	r0, r6
 800552e:	f7ff fe91 	bl	8005254 <_Bfree>
 8005532:	464f      	mov	r7, r9
 8005534:	106d      	asrs	r5, r5, #1
 8005536:	d00b      	beq.n	8005550 <__pow5mult+0x90>
 8005538:	6820      	ldr	r0, [r4, #0]
 800553a:	b938      	cbnz	r0, 800554c <__pow5mult+0x8c>
 800553c:	4622      	mov	r2, r4
 800553e:	4621      	mov	r1, r4
 8005540:	4630      	mov	r0, r6
 8005542:	f7ff ff30 	bl	80053a6 <__multiply>
 8005546:	6020      	str	r0, [r4, #0]
 8005548:	f8c0 8000 	str.w	r8, [r0]
 800554c:	4604      	mov	r4, r0
 800554e:	e7e4      	b.n	800551a <__pow5mult+0x5a>
 8005550:	4638      	mov	r0, r7
 8005552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005556:	bf00      	nop
 8005558:	080060a8 	.word	0x080060a8

0800555c <__lshift>:
 800555c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005560:	460c      	mov	r4, r1
 8005562:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005566:	6923      	ldr	r3, [r4, #16]
 8005568:	6849      	ldr	r1, [r1, #4]
 800556a:	eb0a 0903 	add.w	r9, sl, r3
 800556e:	68a3      	ldr	r3, [r4, #8]
 8005570:	4607      	mov	r7, r0
 8005572:	4616      	mov	r6, r2
 8005574:	f109 0501 	add.w	r5, r9, #1
 8005578:	42ab      	cmp	r3, r5
 800557a:	db31      	blt.n	80055e0 <__lshift+0x84>
 800557c:	4638      	mov	r0, r7
 800557e:	f7ff fe35 	bl	80051ec <_Balloc>
 8005582:	2200      	movs	r2, #0
 8005584:	4680      	mov	r8, r0
 8005586:	f100 0314 	add.w	r3, r0, #20
 800558a:	4611      	mov	r1, r2
 800558c:	4552      	cmp	r2, sl
 800558e:	db2a      	blt.n	80055e6 <__lshift+0x8a>
 8005590:	6920      	ldr	r0, [r4, #16]
 8005592:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005596:	f104 0114 	add.w	r1, r4, #20
 800559a:	f016 021f 	ands.w	r2, r6, #31
 800559e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80055a2:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80055a6:	d022      	beq.n	80055ee <__lshift+0x92>
 80055a8:	f1c2 0c20 	rsb	ip, r2, #32
 80055ac:	2000      	movs	r0, #0
 80055ae:	680e      	ldr	r6, [r1, #0]
 80055b0:	4096      	lsls	r6, r2
 80055b2:	4330      	orrs	r0, r6
 80055b4:	f843 0b04 	str.w	r0, [r3], #4
 80055b8:	f851 0b04 	ldr.w	r0, [r1], #4
 80055bc:	458e      	cmp	lr, r1
 80055be:	fa20 f00c 	lsr.w	r0, r0, ip
 80055c2:	d8f4      	bhi.n	80055ae <__lshift+0x52>
 80055c4:	6018      	str	r0, [r3, #0]
 80055c6:	b108      	cbz	r0, 80055cc <__lshift+0x70>
 80055c8:	f109 0502 	add.w	r5, r9, #2
 80055cc:	3d01      	subs	r5, #1
 80055ce:	4638      	mov	r0, r7
 80055d0:	f8c8 5010 	str.w	r5, [r8, #16]
 80055d4:	4621      	mov	r1, r4
 80055d6:	f7ff fe3d 	bl	8005254 <_Bfree>
 80055da:	4640      	mov	r0, r8
 80055dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055e0:	3101      	adds	r1, #1
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	e7c8      	b.n	8005578 <__lshift+0x1c>
 80055e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80055ea:	3201      	adds	r2, #1
 80055ec:	e7ce      	b.n	800558c <__lshift+0x30>
 80055ee:	3b04      	subs	r3, #4
 80055f0:	f851 2b04 	ldr.w	r2, [r1], #4
 80055f4:	f843 2f04 	str.w	r2, [r3, #4]!
 80055f8:	458e      	cmp	lr, r1
 80055fa:	d8f9      	bhi.n	80055f0 <__lshift+0x94>
 80055fc:	e7e6      	b.n	80055cc <__lshift+0x70>

080055fe <__mcmp>:
 80055fe:	6903      	ldr	r3, [r0, #16]
 8005600:	690a      	ldr	r2, [r1, #16]
 8005602:	1a9b      	subs	r3, r3, r2
 8005604:	b530      	push	{r4, r5, lr}
 8005606:	d10c      	bne.n	8005622 <__mcmp+0x24>
 8005608:	0092      	lsls	r2, r2, #2
 800560a:	3014      	adds	r0, #20
 800560c:	3114      	adds	r1, #20
 800560e:	1884      	adds	r4, r0, r2
 8005610:	4411      	add	r1, r2
 8005612:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005616:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800561a:	4295      	cmp	r5, r2
 800561c:	d003      	beq.n	8005626 <__mcmp+0x28>
 800561e:	d305      	bcc.n	800562c <__mcmp+0x2e>
 8005620:	2301      	movs	r3, #1
 8005622:	4618      	mov	r0, r3
 8005624:	bd30      	pop	{r4, r5, pc}
 8005626:	42a0      	cmp	r0, r4
 8005628:	d3f3      	bcc.n	8005612 <__mcmp+0x14>
 800562a:	e7fa      	b.n	8005622 <__mcmp+0x24>
 800562c:	f04f 33ff 	mov.w	r3, #4294967295
 8005630:	e7f7      	b.n	8005622 <__mcmp+0x24>

08005632 <__mdiff>:
 8005632:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005636:	460d      	mov	r5, r1
 8005638:	4607      	mov	r7, r0
 800563a:	4611      	mov	r1, r2
 800563c:	4628      	mov	r0, r5
 800563e:	4614      	mov	r4, r2
 8005640:	f7ff ffdd 	bl	80055fe <__mcmp>
 8005644:	1e06      	subs	r6, r0, #0
 8005646:	d108      	bne.n	800565a <__mdiff+0x28>
 8005648:	4631      	mov	r1, r6
 800564a:	4638      	mov	r0, r7
 800564c:	f7ff fdce 	bl	80051ec <_Balloc>
 8005650:	2301      	movs	r3, #1
 8005652:	6103      	str	r3, [r0, #16]
 8005654:	6146      	str	r6, [r0, #20]
 8005656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800565a:	bfa4      	itt	ge
 800565c:	4623      	movge	r3, r4
 800565e:	462c      	movge	r4, r5
 8005660:	4638      	mov	r0, r7
 8005662:	6861      	ldr	r1, [r4, #4]
 8005664:	bfa6      	itte	ge
 8005666:	461d      	movge	r5, r3
 8005668:	2600      	movge	r6, #0
 800566a:	2601      	movlt	r6, #1
 800566c:	f7ff fdbe 	bl	80051ec <_Balloc>
 8005670:	692b      	ldr	r3, [r5, #16]
 8005672:	60c6      	str	r6, [r0, #12]
 8005674:	6926      	ldr	r6, [r4, #16]
 8005676:	f105 0914 	add.w	r9, r5, #20
 800567a:	f104 0214 	add.w	r2, r4, #20
 800567e:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005682:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005686:	f100 0514 	add.w	r5, r0, #20
 800568a:	f04f 0c00 	mov.w	ip, #0
 800568e:	f852 ab04 	ldr.w	sl, [r2], #4
 8005692:	f859 4b04 	ldr.w	r4, [r9], #4
 8005696:	fa1c f18a 	uxtah	r1, ip, sl
 800569a:	b2a3      	uxth	r3, r4
 800569c:	1ac9      	subs	r1, r1, r3
 800569e:	0c23      	lsrs	r3, r4, #16
 80056a0:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80056a4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80056a8:	b289      	uxth	r1, r1
 80056aa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80056ae:	45c8      	cmp	r8, r9
 80056b0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80056b4:	4696      	mov	lr, r2
 80056b6:	f845 3b04 	str.w	r3, [r5], #4
 80056ba:	d8e8      	bhi.n	800568e <__mdiff+0x5c>
 80056bc:	45be      	cmp	lr, r7
 80056be:	d305      	bcc.n	80056cc <__mdiff+0x9a>
 80056c0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80056c4:	b18b      	cbz	r3, 80056ea <__mdiff+0xb8>
 80056c6:	6106      	str	r6, [r0, #16]
 80056c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056cc:	f85e 1b04 	ldr.w	r1, [lr], #4
 80056d0:	fa1c f381 	uxtah	r3, ip, r1
 80056d4:	141a      	asrs	r2, r3, #16
 80056d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80056da:	b29b      	uxth	r3, r3
 80056dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80056e4:	f845 3b04 	str.w	r3, [r5], #4
 80056e8:	e7e8      	b.n	80056bc <__mdiff+0x8a>
 80056ea:	3e01      	subs	r6, #1
 80056ec:	e7e8      	b.n	80056c0 <__mdiff+0x8e>

080056ee <__d2b>:
 80056ee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80056f2:	460e      	mov	r6, r1
 80056f4:	2101      	movs	r1, #1
 80056f6:	ec59 8b10 	vmov	r8, r9, d0
 80056fa:	4615      	mov	r5, r2
 80056fc:	f7ff fd76 	bl	80051ec <_Balloc>
 8005700:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005704:	4607      	mov	r7, r0
 8005706:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800570a:	bb34      	cbnz	r4, 800575a <__d2b+0x6c>
 800570c:	9301      	str	r3, [sp, #4]
 800570e:	f1b8 0f00 	cmp.w	r8, #0
 8005712:	d027      	beq.n	8005764 <__d2b+0x76>
 8005714:	a802      	add	r0, sp, #8
 8005716:	f840 8d08 	str.w	r8, [r0, #-8]!
 800571a:	f7ff fe0c 	bl	8005336 <__lo0bits>
 800571e:	9900      	ldr	r1, [sp, #0]
 8005720:	b1f0      	cbz	r0, 8005760 <__d2b+0x72>
 8005722:	9a01      	ldr	r2, [sp, #4]
 8005724:	f1c0 0320 	rsb	r3, r0, #32
 8005728:	fa02 f303 	lsl.w	r3, r2, r3
 800572c:	430b      	orrs	r3, r1
 800572e:	40c2      	lsrs	r2, r0
 8005730:	617b      	str	r3, [r7, #20]
 8005732:	9201      	str	r2, [sp, #4]
 8005734:	9b01      	ldr	r3, [sp, #4]
 8005736:	61bb      	str	r3, [r7, #24]
 8005738:	2b00      	cmp	r3, #0
 800573a:	bf14      	ite	ne
 800573c:	2102      	movne	r1, #2
 800573e:	2101      	moveq	r1, #1
 8005740:	6139      	str	r1, [r7, #16]
 8005742:	b1c4      	cbz	r4, 8005776 <__d2b+0x88>
 8005744:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005748:	4404      	add	r4, r0
 800574a:	6034      	str	r4, [r6, #0]
 800574c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005750:	6028      	str	r0, [r5, #0]
 8005752:	4638      	mov	r0, r7
 8005754:	b003      	add	sp, #12
 8005756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800575a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800575e:	e7d5      	b.n	800570c <__d2b+0x1e>
 8005760:	6179      	str	r1, [r7, #20]
 8005762:	e7e7      	b.n	8005734 <__d2b+0x46>
 8005764:	a801      	add	r0, sp, #4
 8005766:	f7ff fde6 	bl	8005336 <__lo0bits>
 800576a:	9b01      	ldr	r3, [sp, #4]
 800576c:	617b      	str	r3, [r7, #20]
 800576e:	2101      	movs	r1, #1
 8005770:	6139      	str	r1, [r7, #16]
 8005772:	3020      	adds	r0, #32
 8005774:	e7e5      	b.n	8005742 <__d2b+0x54>
 8005776:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800577a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800577e:	6030      	str	r0, [r6, #0]
 8005780:	6918      	ldr	r0, [r3, #16]
 8005782:	f7ff fdb9 	bl	80052f8 <__hi0bits>
 8005786:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800578a:	e7e1      	b.n	8005750 <__d2b+0x62>

0800578c <_sbrk_r>:
 800578c:	b538      	push	{r3, r4, r5, lr}
 800578e:	4c06      	ldr	r4, [pc, #24]	; (80057a8 <_sbrk_r+0x1c>)
 8005790:	2300      	movs	r3, #0
 8005792:	4605      	mov	r5, r0
 8005794:	4608      	mov	r0, r1
 8005796:	6023      	str	r3, [r4, #0]
 8005798:	f000 fb86 	bl	8005ea8 <_sbrk>
 800579c:	1c43      	adds	r3, r0, #1
 800579e:	d102      	bne.n	80057a6 <_sbrk_r+0x1a>
 80057a0:	6823      	ldr	r3, [r4, #0]
 80057a2:	b103      	cbz	r3, 80057a6 <_sbrk_r+0x1a>
 80057a4:	602b      	str	r3, [r5, #0]
 80057a6:	bd38      	pop	{r3, r4, r5, pc}
 80057a8:	2000087c 	.word	0x2000087c

080057ac <__ssprint_r>:
 80057ac:	6893      	ldr	r3, [r2, #8]
 80057ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b2:	4681      	mov	r9, r0
 80057b4:	460c      	mov	r4, r1
 80057b6:	4617      	mov	r7, r2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d060      	beq.n	800587e <__ssprint_r+0xd2>
 80057bc:	f04f 0b00 	mov.w	fp, #0
 80057c0:	f8d2 a000 	ldr.w	sl, [r2]
 80057c4:	465e      	mov	r6, fp
 80057c6:	b356      	cbz	r6, 800581e <__ssprint_r+0x72>
 80057c8:	68a3      	ldr	r3, [r4, #8]
 80057ca:	429e      	cmp	r6, r3
 80057cc:	d344      	bcc.n	8005858 <__ssprint_r+0xac>
 80057ce:	89a2      	ldrh	r2, [r4, #12]
 80057d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057d4:	d03e      	beq.n	8005854 <__ssprint_r+0xa8>
 80057d6:	6825      	ldr	r5, [r4, #0]
 80057d8:	6921      	ldr	r1, [r4, #16]
 80057da:	eba5 0801 	sub.w	r8, r5, r1
 80057de:	6965      	ldr	r5, [r4, #20]
 80057e0:	2302      	movs	r3, #2
 80057e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057e6:	fb95 f5f3 	sdiv	r5, r5, r3
 80057ea:	f108 0301 	add.w	r3, r8, #1
 80057ee:	4433      	add	r3, r6
 80057f0:	429d      	cmp	r5, r3
 80057f2:	bf38      	it	cc
 80057f4:	461d      	movcc	r5, r3
 80057f6:	0553      	lsls	r3, r2, #21
 80057f8:	d546      	bpl.n	8005888 <__ssprint_r+0xdc>
 80057fa:	4629      	mov	r1, r5
 80057fc:	4648      	mov	r0, r9
 80057fe:	f7ff facf 	bl	8004da0 <_malloc_r>
 8005802:	b998      	cbnz	r0, 800582c <__ssprint_r+0x80>
 8005804:	230c      	movs	r3, #12
 8005806:	f8c9 3000 	str.w	r3, [r9]
 800580a:	89a3      	ldrh	r3, [r4, #12]
 800580c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005810:	81a3      	strh	r3, [r4, #12]
 8005812:	2300      	movs	r3, #0
 8005814:	60bb      	str	r3, [r7, #8]
 8005816:	607b      	str	r3, [r7, #4]
 8005818:	f04f 30ff 	mov.w	r0, #4294967295
 800581c:	e031      	b.n	8005882 <__ssprint_r+0xd6>
 800581e:	f8da b000 	ldr.w	fp, [sl]
 8005822:	f8da 6004 	ldr.w	r6, [sl, #4]
 8005826:	f10a 0a08 	add.w	sl, sl, #8
 800582a:	e7cc      	b.n	80057c6 <__ssprint_r+0x1a>
 800582c:	4642      	mov	r2, r8
 800582e:	6921      	ldr	r1, [r4, #16]
 8005830:	9001      	str	r0, [sp, #4]
 8005832:	f7ff fcc3 	bl	80051bc <memcpy>
 8005836:	89a2      	ldrh	r2, [r4, #12]
 8005838:	9b01      	ldr	r3, [sp, #4]
 800583a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800583e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005842:	81a2      	strh	r2, [r4, #12]
 8005844:	6123      	str	r3, [r4, #16]
 8005846:	6165      	str	r5, [r4, #20]
 8005848:	4443      	add	r3, r8
 800584a:	eba5 0508 	sub.w	r5, r5, r8
 800584e:	6023      	str	r3, [r4, #0]
 8005850:	60a5      	str	r5, [r4, #8]
 8005852:	4633      	mov	r3, r6
 8005854:	429e      	cmp	r6, r3
 8005856:	d200      	bcs.n	800585a <__ssprint_r+0xae>
 8005858:	4633      	mov	r3, r6
 800585a:	461a      	mov	r2, r3
 800585c:	4659      	mov	r1, fp
 800585e:	6820      	ldr	r0, [r4, #0]
 8005860:	9301      	str	r3, [sp, #4]
 8005862:	f000 f971 	bl	8005b48 <memmove>
 8005866:	68a2      	ldr	r2, [r4, #8]
 8005868:	9b01      	ldr	r3, [sp, #4]
 800586a:	1ad2      	subs	r2, r2, r3
 800586c:	60a2      	str	r2, [r4, #8]
 800586e:	6822      	ldr	r2, [r4, #0]
 8005870:	4413      	add	r3, r2
 8005872:	6023      	str	r3, [r4, #0]
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	1b9e      	subs	r6, r3, r6
 8005878:	60be      	str	r6, [r7, #8]
 800587a:	2e00      	cmp	r6, #0
 800587c:	d1cf      	bne.n	800581e <__ssprint_r+0x72>
 800587e:	2000      	movs	r0, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	b003      	add	sp, #12
 8005884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005888:	462a      	mov	r2, r5
 800588a:	4648      	mov	r0, r9
 800588c:	f000 f97e 	bl	8005b8c <_realloc_r>
 8005890:	4603      	mov	r3, r0
 8005892:	2800      	cmp	r0, #0
 8005894:	d1d6      	bne.n	8005844 <__ssprint_r+0x98>
 8005896:	6921      	ldr	r1, [r4, #16]
 8005898:	4648      	mov	r0, r9
 800589a:	f000 f885 	bl	80059a8 <_free_r>
 800589e:	e7b1      	b.n	8005804 <__ssprint_r+0x58>

080058a0 <_calloc_r>:
 80058a0:	b510      	push	{r4, lr}
 80058a2:	4351      	muls	r1, r2
 80058a4:	f7ff fa7c 	bl	8004da0 <_malloc_r>
 80058a8:	4604      	mov	r4, r0
 80058aa:	b198      	cbz	r0, 80058d4 <_calloc_r+0x34>
 80058ac:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80058b0:	f022 0203 	bic.w	r2, r2, #3
 80058b4:	3a04      	subs	r2, #4
 80058b6:	2a24      	cmp	r2, #36	; 0x24
 80058b8:	d81b      	bhi.n	80058f2 <_calloc_r+0x52>
 80058ba:	2a13      	cmp	r2, #19
 80058bc:	d917      	bls.n	80058ee <_calloc_r+0x4e>
 80058be:	2100      	movs	r1, #0
 80058c0:	2a1b      	cmp	r2, #27
 80058c2:	6001      	str	r1, [r0, #0]
 80058c4:	6041      	str	r1, [r0, #4]
 80058c6:	d807      	bhi.n	80058d8 <_calloc_r+0x38>
 80058c8:	f100 0308 	add.w	r3, r0, #8
 80058cc:	2200      	movs	r2, #0
 80058ce:	601a      	str	r2, [r3, #0]
 80058d0:	605a      	str	r2, [r3, #4]
 80058d2:	609a      	str	r2, [r3, #8]
 80058d4:	4620      	mov	r0, r4
 80058d6:	bd10      	pop	{r4, pc}
 80058d8:	2a24      	cmp	r2, #36	; 0x24
 80058da:	6081      	str	r1, [r0, #8]
 80058dc:	60c1      	str	r1, [r0, #12]
 80058de:	bf11      	iteee	ne
 80058e0:	f100 0310 	addne.w	r3, r0, #16
 80058e4:	6101      	streq	r1, [r0, #16]
 80058e6:	f100 0318 	addeq.w	r3, r0, #24
 80058ea:	6141      	streq	r1, [r0, #20]
 80058ec:	e7ee      	b.n	80058cc <_calloc_r+0x2c>
 80058ee:	4603      	mov	r3, r0
 80058f0:	e7ec      	b.n	80058cc <_calloc_r+0x2c>
 80058f2:	2100      	movs	r1, #0
 80058f4:	f000 f942 	bl	8005b7c <memset>
 80058f8:	e7ec      	b.n	80058d4 <_calloc_r+0x34>
	...

080058fc <_malloc_trim_r>:
 80058fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005900:	4f25      	ldr	r7, [pc, #148]	; (8005998 <_malloc_trim_r+0x9c>)
 8005902:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80059a4 <_malloc_trim_r+0xa8>
 8005906:	4689      	mov	r9, r1
 8005908:	4606      	mov	r6, r0
 800590a:	f7ff fc63 	bl	80051d4 <__malloc_lock>
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	685d      	ldr	r5, [r3, #4]
 8005912:	f1a8 0411 	sub.w	r4, r8, #17
 8005916:	f025 0503 	bic.w	r5, r5, #3
 800591a:	eba4 0409 	sub.w	r4, r4, r9
 800591e:	442c      	add	r4, r5
 8005920:	fbb4 f4f8 	udiv	r4, r4, r8
 8005924:	3c01      	subs	r4, #1
 8005926:	fb08 f404 	mul.w	r4, r8, r4
 800592a:	4544      	cmp	r4, r8
 800592c:	da05      	bge.n	800593a <_malloc_trim_r+0x3e>
 800592e:	4630      	mov	r0, r6
 8005930:	f7ff fc56 	bl	80051e0 <__malloc_unlock>
 8005934:	2000      	movs	r0, #0
 8005936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800593a:	2100      	movs	r1, #0
 800593c:	4630      	mov	r0, r6
 800593e:	f7ff ff25 	bl	800578c <_sbrk_r>
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	442b      	add	r3, r5
 8005946:	4298      	cmp	r0, r3
 8005948:	d1f1      	bne.n	800592e <_malloc_trim_r+0x32>
 800594a:	4261      	negs	r1, r4
 800594c:	4630      	mov	r0, r6
 800594e:	f7ff ff1d 	bl	800578c <_sbrk_r>
 8005952:	3001      	adds	r0, #1
 8005954:	d110      	bne.n	8005978 <_malloc_trim_r+0x7c>
 8005956:	2100      	movs	r1, #0
 8005958:	4630      	mov	r0, r6
 800595a:	f7ff ff17 	bl	800578c <_sbrk_r>
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	1a83      	subs	r3, r0, r2
 8005962:	2b0f      	cmp	r3, #15
 8005964:	dde3      	ble.n	800592e <_malloc_trim_r+0x32>
 8005966:	490d      	ldr	r1, [pc, #52]	; (800599c <_malloc_trim_r+0xa0>)
 8005968:	6809      	ldr	r1, [r1, #0]
 800596a:	1a40      	subs	r0, r0, r1
 800596c:	490c      	ldr	r1, [pc, #48]	; (80059a0 <_malloc_trim_r+0xa4>)
 800596e:	f043 0301 	orr.w	r3, r3, #1
 8005972:	6008      	str	r0, [r1, #0]
 8005974:	6053      	str	r3, [r2, #4]
 8005976:	e7da      	b.n	800592e <_malloc_trim_r+0x32>
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	4a09      	ldr	r2, [pc, #36]	; (80059a0 <_malloc_trim_r+0xa4>)
 800597c:	1b2d      	subs	r5, r5, r4
 800597e:	f045 0501 	orr.w	r5, r5, #1
 8005982:	605d      	str	r5, [r3, #4]
 8005984:	6813      	ldr	r3, [r2, #0]
 8005986:	4630      	mov	r0, r6
 8005988:	1b1c      	subs	r4, r3, r4
 800598a:	6014      	str	r4, [r2, #0]
 800598c:	f7ff fc28 	bl	80051e0 <__malloc_unlock>
 8005990:	2001      	movs	r0, #1
 8005992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005996:	bf00      	nop
 8005998:	200000f8 	.word	0x200000f8
 800599c:	20000500 	.word	0x20000500
 80059a0:	20000690 	.word	0x20000690
 80059a4:	00000080 	.word	0x00000080

080059a8 <_free_r>:
 80059a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059ac:	4604      	mov	r4, r0
 80059ae:	4688      	mov	r8, r1
 80059b0:	2900      	cmp	r1, #0
 80059b2:	f000 80ab 	beq.w	8005b0c <_free_r+0x164>
 80059b6:	f7ff fc0d 	bl	80051d4 <__malloc_lock>
 80059ba:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80059be:	4d54      	ldr	r5, [pc, #336]	; (8005b10 <_free_r+0x168>)
 80059c0:	f022 0001 	bic.w	r0, r2, #1
 80059c4:	f1a8 0308 	sub.w	r3, r8, #8
 80059c8:	181f      	adds	r7, r3, r0
 80059ca:	68a9      	ldr	r1, [r5, #8]
 80059cc:	687e      	ldr	r6, [r7, #4]
 80059ce:	428f      	cmp	r7, r1
 80059d0:	f026 0603 	bic.w	r6, r6, #3
 80059d4:	f002 0201 	and.w	r2, r2, #1
 80059d8:	d11b      	bne.n	8005a12 <_free_r+0x6a>
 80059da:	4430      	add	r0, r6
 80059dc:	b93a      	cbnz	r2, 80059ee <_free_r+0x46>
 80059de:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80059e2:	1a9b      	subs	r3, r3, r2
 80059e4:	4410      	add	r0, r2
 80059e6:	6899      	ldr	r1, [r3, #8]
 80059e8:	68da      	ldr	r2, [r3, #12]
 80059ea:	60ca      	str	r2, [r1, #12]
 80059ec:	6091      	str	r1, [r2, #8]
 80059ee:	f040 0201 	orr.w	r2, r0, #1
 80059f2:	605a      	str	r2, [r3, #4]
 80059f4:	60ab      	str	r3, [r5, #8]
 80059f6:	4b47      	ldr	r3, [pc, #284]	; (8005b14 <_free_r+0x16c>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4298      	cmp	r0, r3
 80059fc:	d304      	bcc.n	8005a08 <_free_r+0x60>
 80059fe:	4b46      	ldr	r3, [pc, #280]	; (8005b18 <_free_r+0x170>)
 8005a00:	4620      	mov	r0, r4
 8005a02:	6819      	ldr	r1, [r3, #0]
 8005a04:	f7ff ff7a 	bl	80058fc <_malloc_trim_r>
 8005a08:	4620      	mov	r0, r4
 8005a0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a0e:	f7ff bbe7 	b.w	80051e0 <__malloc_unlock>
 8005a12:	607e      	str	r6, [r7, #4]
 8005a14:	2a00      	cmp	r2, #0
 8005a16:	d139      	bne.n	8005a8c <_free_r+0xe4>
 8005a18:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8005a1c:	1a5b      	subs	r3, r3, r1
 8005a1e:	4408      	add	r0, r1
 8005a20:	6899      	ldr	r1, [r3, #8]
 8005a22:	f105 0e08 	add.w	lr, r5, #8
 8005a26:	4571      	cmp	r1, lr
 8005a28:	d032      	beq.n	8005a90 <_free_r+0xe8>
 8005a2a:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8005a2e:	f8c1 e00c 	str.w	lr, [r1, #12]
 8005a32:	f8ce 1008 	str.w	r1, [lr, #8]
 8005a36:	19b9      	adds	r1, r7, r6
 8005a38:	6849      	ldr	r1, [r1, #4]
 8005a3a:	07c9      	lsls	r1, r1, #31
 8005a3c:	d40a      	bmi.n	8005a54 <_free_r+0xac>
 8005a3e:	4430      	add	r0, r6
 8005a40:	68b9      	ldr	r1, [r7, #8]
 8005a42:	bb3a      	cbnz	r2, 8005a94 <_free_r+0xec>
 8005a44:	4e35      	ldr	r6, [pc, #212]	; (8005b1c <_free_r+0x174>)
 8005a46:	42b1      	cmp	r1, r6
 8005a48:	d124      	bne.n	8005a94 <_free_r+0xec>
 8005a4a:	616b      	str	r3, [r5, #20]
 8005a4c:	612b      	str	r3, [r5, #16]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	60d9      	str	r1, [r3, #12]
 8005a52:	6099      	str	r1, [r3, #8]
 8005a54:	f040 0101 	orr.w	r1, r0, #1
 8005a58:	6059      	str	r1, [r3, #4]
 8005a5a:	5018      	str	r0, [r3, r0]
 8005a5c:	2a00      	cmp	r2, #0
 8005a5e:	d1d3      	bne.n	8005a08 <_free_r+0x60>
 8005a60:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005a64:	d21a      	bcs.n	8005a9c <_free_r+0xf4>
 8005a66:	08c0      	lsrs	r0, r0, #3
 8005a68:	1081      	asrs	r1, r0, #2
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	408a      	lsls	r2, r1
 8005a6e:	6869      	ldr	r1, [r5, #4]
 8005a70:	3001      	adds	r0, #1
 8005a72:	430a      	orrs	r2, r1
 8005a74:	606a      	str	r2, [r5, #4]
 8005a76:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8005a7a:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8005a7e:	6099      	str	r1, [r3, #8]
 8005a80:	3a08      	subs	r2, #8
 8005a82:	60da      	str	r2, [r3, #12]
 8005a84:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8005a88:	60cb      	str	r3, [r1, #12]
 8005a8a:	e7bd      	b.n	8005a08 <_free_r+0x60>
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	e7d2      	b.n	8005a36 <_free_r+0x8e>
 8005a90:	2201      	movs	r2, #1
 8005a92:	e7d0      	b.n	8005a36 <_free_r+0x8e>
 8005a94:	68fe      	ldr	r6, [r7, #12]
 8005a96:	60ce      	str	r6, [r1, #12]
 8005a98:	60b1      	str	r1, [r6, #8]
 8005a9a:	e7db      	b.n	8005a54 <_free_r+0xac>
 8005a9c:	0a42      	lsrs	r2, r0, #9
 8005a9e:	2a04      	cmp	r2, #4
 8005aa0:	d813      	bhi.n	8005aca <_free_r+0x122>
 8005aa2:	0982      	lsrs	r2, r0, #6
 8005aa4:	3238      	adds	r2, #56	; 0x38
 8005aa6:	1c51      	adds	r1, r2, #1
 8005aa8:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8005aac:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8005ab0:	428e      	cmp	r6, r1
 8005ab2:	d124      	bne.n	8005afe <_free_r+0x156>
 8005ab4:	2001      	movs	r0, #1
 8005ab6:	1092      	asrs	r2, r2, #2
 8005ab8:	fa00 f202 	lsl.w	r2, r0, r2
 8005abc:	6868      	ldr	r0, [r5, #4]
 8005abe:	4302      	orrs	r2, r0
 8005ac0:	606a      	str	r2, [r5, #4]
 8005ac2:	60de      	str	r6, [r3, #12]
 8005ac4:	6099      	str	r1, [r3, #8]
 8005ac6:	60b3      	str	r3, [r6, #8]
 8005ac8:	e7de      	b.n	8005a88 <_free_r+0xe0>
 8005aca:	2a14      	cmp	r2, #20
 8005acc:	d801      	bhi.n	8005ad2 <_free_r+0x12a>
 8005ace:	325b      	adds	r2, #91	; 0x5b
 8005ad0:	e7e9      	b.n	8005aa6 <_free_r+0xfe>
 8005ad2:	2a54      	cmp	r2, #84	; 0x54
 8005ad4:	d802      	bhi.n	8005adc <_free_r+0x134>
 8005ad6:	0b02      	lsrs	r2, r0, #12
 8005ad8:	326e      	adds	r2, #110	; 0x6e
 8005ada:	e7e4      	b.n	8005aa6 <_free_r+0xfe>
 8005adc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005ae0:	d802      	bhi.n	8005ae8 <_free_r+0x140>
 8005ae2:	0bc2      	lsrs	r2, r0, #15
 8005ae4:	3277      	adds	r2, #119	; 0x77
 8005ae6:	e7de      	b.n	8005aa6 <_free_r+0xfe>
 8005ae8:	f240 5154 	movw	r1, #1364	; 0x554
 8005aec:	428a      	cmp	r2, r1
 8005aee:	bf9a      	itte	ls
 8005af0:	0c82      	lsrls	r2, r0, #18
 8005af2:	327c      	addls	r2, #124	; 0x7c
 8005af4:	227e      	movhi	r2, #126	; 0x7e
 8005af6:	e7d6      	b.n	8005aa6 <_free_r+0xfe>
 8005af8:	6889      	ldr	r1, [r1, #8]
 8005afa:	428e      	cmp	r6, r1
 8005afc:	d004      	beq.n	8005b08 <_free_r+0x160>
 8005afe:	684a      	ldr	r2, [r1, #4]
 8005b00:	f022 0203 	bic.w	r2, r2, #3
 8005b04:	4290      	cmp	r0, r2
 8005b06:	d3f7      	bcc.n	8005af8 <_free_r+0x150>
 8005b08:	68ce      	ldr	r6, [r1, #12]
 8005b0a:	e7da      	b.n	8005ac2 <_free_r+0x11a>
 8005b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b10:	200000f8 	.word	0x200000f8
 8005b14:	20000504 	.word	0x20000504
 8005b18:	200006c0 	.word	0x200006c0
 8005b1c:	20000100 	.word	0x20000100

08005b20 <__retarget_lock_acquire_recursive>:
 8005b20:	4770      	bx	lr

08005b22 <__retarget_lock_release_recursive>:
 8005b22:	4770      	bx	lr

08005b24 <__ascii_mbtowc>:
 8005b24:	b082      	sub	sp, #8
 8005b26:	b901      	cbnz	r1, 8005b2a <__ascii_mbtowc+0x6>
 8005b28:	a901      	add	r1, sp, #4
 8005b2a:	b142      	cbz	r2, 8005b3e <__ascii_mbtowc+0x1a>
 8005b2c:	b14b      	cbz	r3, 8005b42 <__ascii_mbtowc+0x1e>
 8005b2e:	7813      	ldrb	r3, [r2, #0]
 8005b30:	600b      	str	r3, [r1, #0]
 8005b32:	7812      	ldrb	r2, [r2, #0]
 8005b34:	1c10      	adds	r0, r2, #0
 8005b36:	bf18      	it	ne
 8005b38:	2001      	movne	r0, #1
 8005b3a:	b002      	add	sp, #8
 8005b3c:	4770      	bx	lr
 8005b3e:	4610      	mov	r0, r2
 8005b40:	e7fb      	b.n	8005b3a <__ascii_mbtowc+0x16>
 8005b42:	f06f 0001 	mvn.w	r0, #1
 8005b46:	e7f8      	b.n	8005b3a <__ascii_mbtowc+0x16>

08005b48 <memmove>:
 8005b48:	4288      	cmp	r0, r1
 8005b4a:	b510      	push	{r4, lr}
 8005b4c:	eb01 0302 	add.w	r3, r1, r2
 8005b50:	d803      	bhi.n	8005b5a <memmove+0x12>
 8005b52:	1e42      	subs	r2, r0, #1
 8005b54:	4299      	cmp	r1, r3
 8005b56:	d10c      	bne.n	8005b72 <memmove+0x2a>
 8005b58:	bd10      	pop	{r4, pc}
 8005b5a:	4298      	cmp	r0, r3
 8005b5c:	d2f9      	bcs.n	8005b52 <memmove+0xa>
 8005b5e:	1881      	adds	r1, r0, r2
 8005b60:	1ad2      	subs	r2, r2, r3
 8005b62:	42d3      	cmn	r3, r2
 8005b64:	d100      	bne.n	8005b68 <memmove+0x20>
 8005b66:	bd10      	pop	{r4, pc}
 8005b68:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b6c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005b70:	e7f7      	b.n	8005b62 <memmove+0x1a>
 8005b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b76:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005b7a:	e7eb      	b.n	8005b54 <memmove+0xc>

08005b7c <memset>:
 8005b7c:	4402      	add	r2, r0
 8005b7e:	4603      	mov	r3, r0
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d100      	bne.n	8005b86 <memset+0xa>
 8005b84:	4770      	bx	lr
 8005b86:	f803 1b01 	strb.w	r1, [r3], #1
 8005b8a:	e7f9      	b.n	8005b80 <memset+0x4>

08005b8c <_realloc_r>:
 8005b8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b90:	4682      	mov	sl, r0
 8005b92:	460c      	mov	r4, r1
 8005b94:	b929      	cbnz	r1, 8005ba2 <_realloc_r+0x16>
 8005b96:	4611      	mov	r1, r2
 8005b98:	b003      	add	sp, #12
 8005b9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b9e:	f7ff b8ff 	b.w	8004da0 <_malloc_r>
 8005ba2:	9201      	str	r2, [sp, #4]
 8005ba4:	f7ff fb16 	bl	80051d4 <__malloc_lock>
 8005ba8:	9a01      	ldr	r2, [sp, #4]
 8005baa:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8005bae:	f102 080b 	add.w	r8, r2, #11
 8005bb2:	f1b8 0f16 	cmp.w	r8, #22
 8005bb6:	f1a4 0908 	sub.w	r9, r4, #8
 8005bba:	f025 0603 	bic.w	r6, r5, #3
 8005bbe:	d90a      	bls.n	8005bd6 <_realloc_r+0x4a>
 8005bc0:	f038 0807 	bics.w	r8, r8, #7
 8005bc4:	d509      	bpl.n	8005bda <_realloc_r+0x4e>
 8005bc6:	230c      	movs	r3, #12
 8005bc8:	f8ca 3000 	str.w	r3, [sl]
 8005bcc:	2700      	movs	r7, #0
 8005bce:	4638      	mov	r0, r7
 8005bd0:	b003      	add	sp, #12
 8005bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bd6:	f04f 0810 	mov.w	r8, #16
 8005bda:	4590      	cmp	r8, r2
 8005bdc:	d3f3      	bcc.n	8005bc6 <_realloc_r+0x3a>
 8005bde:	45b0      	cmp	r8, r6
 8005be0:	f340 8145 	ble.w	8005e6e <_realloc_r+0x2e2>
 8005be4:	4ba8      	ldr	r3, [pc, #672]	; (8005e88 <_realloc_r+0x2fc>)
 8005be6:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8005bea:	eb09 0106 	add.w	r1, r9, r6
 8005bee:	4571      	cmp	r1, lr
 8005bf0:	469b      	mov	fp, r3
 8005bf2:	684b      	ldr	r3, [r1, #4]
 8005bf4:	d005      	beq.n	8005c02 <_realloc_r+0x76>
 8005bf6:	f023 0001 	bic.w	r0, r3, #1
 8005bfa:	4408      	add	r0, r1
 8005bfc:	6840      	ldr	r0, [r0, #4]
 8005bfe:	07c7      	lsls	r7, r0, #31
 8005c00:	d447      	bmi.n	8005c92 <_realloc_r+0x106>
 8005c02:	f023 0303 	bic.w	r3, r3, #3
 8005c06:	4571      	cmp	r1, lr
 8005c08:	eb06 0703 	add.w	r7, r6, r3
 8005c0c:	d119      	bne.n	8005c42 <_realloc_r+0xb6>
 8005c0e:	f108 0010 	add.w	r0, r8, #16
 8005c12:	4287      	cmp	r7, r0
 8005c14:	db3f      	blt.n	8005c96 <_realloc_r+0x10a>
 8005c16:	eb09 0308 	add.w	r3, r9, r8
 8005c1a:	eba7 0708 	sub.w	r7, r7, r8
 8005c1e:	f047 0701 	orr.w	r7, r7, #1
 8005c22:	f8cb 3008 	str.w	r3, [fp, #8]
 8005c26:	605f      	str	r7, [r3, #4]
 8005c28:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	ea43 0308 	orr.w	r3, r3, r8
 8005c34:	f844 3c04 	str.w	r3, [r4, #-4]
 8005c38:	4650      	mov	r0, sl
 8005c3a:	f7ff fad1 	bl	80051e0 <__malloc_unlock>
 8005c3e:	4627      	mov	r7, r4
 8005c40:	e7c5      	b.n	8005bce <_realloc_r+0x42>
 8005c42:	45b8      	cmp	r8, r7
 8005c44:	dc27      	bgt.n	8005c96 <_realloc_r+0x10a>
 8005c46:	68cb      	ldr	r3, [r1, #12]
 8005c48:	688a      	ldr	r2, [r1, #8]
 8005c4a:	60d3      	str	r3, [r2, #12]
 8005c4c:	609a      	str	r2, [r3, #8]
 8005c4e:	eba7 0008 	sub.w	r0, r7, r8
 8005c52:	280f      	cmp	r0, #15
 8005c54:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005c58:	eb09 0207 	add.w	r2, r9, r7
 8005c5c:	f240 8109 	bls.w	8005e72 <_realloc_r+0x2e6>
 8005c60:	eb09 0108 	add.w	r1, r9, r8
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	ea43 0308 	orr.w	r3, r3, r8
 8005c6c:	f040 0001 	orr.w	r0, r0, #1
 8005c70:	f8c9 3004 	str.w	r3, [r9, #4]
 8005c74:	6048      	str	r0, [r1, #4]
 8005c76:	6853      	ldr	r3, [r2, #4]
 8005c78:	f043 0301 	orr.w	r3, r3, #1
 8005c7c:	6053      	str	r3, [r2, #4]
 8005c7e:	3108      	adds	r1, #8
 8005c80:	4650      	mov	r0, sl
 8005c82:	f7ff fe91 	bl	80059a8 <_free_r>
 8005c86:	4650      	mov	r0, sl
 8005c88:	f7ff faaa 	bl	80051e0 <__malloc_unlock>
 8005c8c:	f109 0708 	add.w	r7, r9, #8
 8005c90:	e79d      	b.n	8005bce <_realloc_r+0x42>
 8005c92:	2300      	movs	r3, #0
 8005c94:	4619      	mov	r1, r3
 8005c96:	07e8      	lsls	r0, r5, #31
 8005c98:	f100 8084 	bmi.w	8005da4 <_realloc_r+0x218>
 8005c9c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8005ca0:	eba9 0505 	sub.w	r5, r9, r5
 8005ca4:	6868      	ldr	r0, [r5, #4]
 8005ca6:	f020 0003 	bic.w	r0, r0, #3
 8005caa:	4430      	add	r0, r6
 8005cac:	2900      	cmp	r1, #0
 8005cae:	d076      	beq.n	8005d9e <_realloc_r+0x212>
 8005cb0:	4571      	cmp	r1, lr
 8005cb2:	d150      	bne.n	8005d56 <_realloc_r+0x1ca>
 8005cb4:	4403      	add	r3, r0
 8005cb6:	f108 0110 	add.w	r1, r8, #16
 8005cba:	428b      	cmp	r3, r1
 8005cbc:	db6f      	blt.n	8005d9e <_realloc_r+0x212>
 8005cbe:	462f      	mov	r7, r5
 8005cc0:	68ea      	ldr	r2, [r5, #12]
 8005cc2:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8005cc6:	60ca      	str	r2, [r1, #12]
 8005cc8:	6091      	str	r1, [r2, #8]
 8005cca:	1f32      	subs	r2, r6, #4
 8005ccc:	2a24      	cmp	r2, #36	; 0x24
 8005cce:	d83b      	bhi.n	8005d48 <_realloc_r+0x1bc>
 8005cd0:	2a13      	cmp	r2, #19
 8005cd2:	d936      	bls.n	8005d42 <_realloc_r+0x1b6>
 8005cd4:	6821      	ldr	r1, [r4, #0]
 8005cd6:	60a9      	str	r1, [r5, #8]
 8005cd8:	6861      	ldr	r1, [r4, #4]
 8005cda:	60e9      	str	r1, [r5, #12]
 8005cdc:	2a1b      	cmp	r2, #27
 8005cde:	d81c      	bhi.n	8005d1a <_realloc_r+0x18e>
 8005ce0:	f105 0210 	add.w	r2, r5, #16
 8005ce4:	f104 0108 	add.w	r1, r4, #8
 8005ce8:	6808      	ldr	r0, [r1, #0]
 8005cea:	6010      	str	r0, [r2, #0]
 8005cec:	6848      	ldr	r0, [r1, #4]
 8005cee:	6050      	str	r0, [r2, #4]
 8005cf0:	6889      	ldr	r1, [r1, #8]
 8005cf2:	6091      	str	r1, [r2, #8]
 8005cf4:	eb05 0208 	add.w	r2, r5, r8
 8005cf8:	eba3 0308 	sub.w	r3, r3, r8
 8005cfc:	f043 0301 	orr.w	r3, r3, #1
 8005d00:	f8cb 2008 	str.w	r2, [fp, #8]
 8005d04:	6053      	str	r3, [r2, #4]
 8005d06:	686b      	ldr	r3, [r5, #4]
 8005d08:	f003 0301 	and.w	r3, r3, #1
 8005d0c:	ea43 0308 	orr.w	r3, r3, r8
 8005d10:	606b      	str	r3, [r5, #4]
 8005d12:	4650      	mov	r0, sl
 8005d14:	f7ff fa64 	bl	80051e0 <__malloc_unlock>
 8005d18:	e759      	b.n	8005bce <_realloc_r+0x42>
 8005d1a:	68a1      	ldr	r1, [r4, #8]
 8005d1c:	6129      	str	r1, [r5, #16]
 8005d1e:	68e1      	ldr	r1, [r4, #12]
 8005d20:	6169      	str	r1, [r5, #20]
 8005d22:	2a24      	cmp	r2, #36	; 0x24
 8005d24:	bf01      	itttt	eq
 8005d26:	6922      	ldreq	r2, [r4, #16]
 8005d28:	61aa      	streq	r2, [r5, #24]
 8005d2a:	6960      	ldreq	r0, [r4, #20]
 8005d2c:	61e8      	streq	r0, [r5, #28]
 8005d2e:	bf19      	ittee	ne
 8005d30:	f105 0218 	addne.w	r2, r5, #24
 8005d34:	f104 0110 	addne.w	r1, r4, #16
 8005d38:	f105 0220 	addeq.w	r2, r5, #32
 8005d3c:	f104 0118 	addeq.w	r1, r4, #24
 8005d40:	e7d2      	b.n	8005ce8 <_realloc_r+0x15c>
 8005d42:	463a      	mov	r2, r7
 8005d44:	4621      	mov	r1, r4
 8005d46:	e7cf      	b.n	8005ce8 <_realloc_r+0x15c>
 8005d48:	4621      	mov	r1, r4
 8005d4a:	4638      	mov	r0, r7
 8005d4c:	9301      	str	r3, [sp, #4]
 8005d4e:	f7ff fefb 	bl	8005b48 <memmove>
 8005d52:	9b01      	ldr	r3, [sp, #4]
 8005d54:	e7ce      	b.n	8005cf4 <_realloc_r+0x168>
 8005d56:	18c7      	adds	r7, r0, r3
 8005d58:	45b8      	cmp	r8, r7
 8005d5a:	dc20      	bgt.n	8005d9e <_realloc_r+0x212>
 8005d5c:	68cb      	ldr	r3, [r1, #12]
 8005d5e:	688a      	ldr	r2, [r1, #8]
 8005d60:	60d3      	str	r3, [r2, #12]
 8005d62:	609a      	str	r2, [r3, #8]
 8005d64:	4628      	mov	r0, r5
 8005d66:	68eb      	ldr	r3, [r5, #12]
 8005d68:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8005d6c:	60d3      	str	r3, [r2, #12]
 8005d6e:	609a      	str	r2, [r3, #8]
 8005d70:	1f32      	subs	r2, r6, #4
 8005d72:	2a24      	cmp	r2, #36	; 0x24
 8005d74:	d842      	bhi.n	8005dfc <_realloc_r+0x270>
 8005d76:	2a13      	cmp	r2, #19
 8005d78:	d93e      	bls.n	8005df8 <_realloc_r+0x26c>
 8005d7a:	6823      	ldr	r3, [r4, #0]
 8005d7c:	60ab      	str	r3, [r5, #8]
 8005d7e:	6863      	ldr	r3, [r4, #4]
 8005d80:	60eb      	str	r3, [r5, #12]
 8005d82:	2a1b      	cmp	r2, #27
 8005d84:	d824      	bhi.n	8005dd0 <_realloc_r+0x244>
 8005d86:	f105 0010 	add.w	r0, r5, #16
 8005d8a:	f104 0308 	add.w	r3, r4, #8
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	6002      	str	r2, [r0, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	6042      	str	r2, [r0, #4]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	6083      	str	r3, [r0, #8]
 8005d9a:	46a9      	mov	r9, r5
 8005d9c:	e757      	b.n	8005c4e <_realloc_r+0xc2>
 8005d9e:	4580      	cmp	r8, r0
 8005da0:	4607      	mov	r7, r0
 8005da2:	dddf      	ble.n	8005d64 <_realloc_r+0x1d8>
 8005da4:	4611      	mov	r1, r2
 8005da6:	4650      	mov	r0, sl
 8005da8:	f7fe fffa 	bl	8004da0 <_malloc_r>
 8005dac:	4607      	mov	r7, r0
 8005dae:	2800      	cmp	r0, #0
 8005db0:	d0af      	beq.n	8005d12 <_realloc_r+0x186>
 8005db2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005db6:	f023 0301 	bic.w	r3, r3, #1
 8005dba:	f1a0 0208 	sub.w	r2, r0, #8
 8005dbe:	444b      	add	r3, r9
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d11f      	bne.n	8005e04 <_realloc_r+0x278>
 8005dc4:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8005dc8:	f027 0703 	bic.w	r7, r7, #3
 8005dcc:	4437      	add	r7, r6
 8005dce:	e73e      	b.n	8005c4e <_realloc_r+0xc2>
 8005dd0:	68a3      	ldr	r3, [r4, #8]
 8005dd2:	612b      	str	r3, [r5, #16]
 8005dd4:	68e3      	ldr	r3, [r4, #12]
 8005dd6:	616b      	str	r3, [r5, #20]
 8005dd8:	2a24      	cmp	r2, #36	; 0x24
 8005dda:	bf01      	itttt	eq
 8005ddc:	6923      	ldreq	r3, [r4, #16]
 8005dde:	61ab      	streq	r3, [r5, #24]
 8005de0:	6962      	ldreq	r2, [r4, #20]
 8005de2:	61ea      	streq	r2, [r5, #28]
 8005de4:	bf19      	ittee	ne
 8005de6:	f105 0018 	addne.w	r0, r5, #24
 8005dea:	f104 0310 	addne.w	r3, r4, #16
 8005dee:	f105 0020 	addeq.w	r0, r5, #32
 8005df2:	f104 0318 	addeq.w	r3, r4, #24
 8005df6:	e7ca      	b.n	8005d8e <_realloc_r+0x202>
 8005df8:	4623      	mov	r3, r4
 8005dfa:	e7c8      	b.n	8005d8e <_realloc_r+0x202>
 8005dfc:	4621      	mov	r1, r4
 8005dfe:	f7ff fea3 	bl	8005b48 <memmove>
 8005e02:	e7ca      	b.n	8005d9a <_realloc_r+0x20e>
 8005e04:	1f32      	subs	r2, r6, #4
 8005e06:	2a24      	cmp	r2, #36	; 0x24
 8005e08:	d82d      	bhi.n	8005e66 <_realloc_r+0x2da>
 8005e0a:	2a13      	cmp	r2, #19
 8005e0c:	d928      	bls.n	8005e60 <_realloc_r+0x2d4>
 8005e0e:	6823      	ldr	r3, [r4, #0]
 8005e10:	6003      	str	r3, [r0, #0]
 8005e12:	6863      	ldr	r3, [r4, #4]
 8005e14:	6043      	str	r3, [r0, #4]
 8005e16:	2a1b      	cmp	r2, #27
 8005e18:	d80e      	bhi.n	8005e38 <_realloc_r+0x2ac>
 8005e1a:	f100 0308 	add.w	r3, r0, #8
 8005e1e:	f104 0208 	add.w	r2, r4, #8
 8005e22:	6811      	ldr	r1, [r2, #0]
 8005e24:	6019      	str	r1, [r3, #0]
 8005e26:	6851      	ldr	r1, [r2, #4]
 8005e28:	6059      	str	r1, [r3, #4]
 8005e2a:	6892      	ldr	r2, [r2, #8]
 8005e2c:	609a      	str	r2, [r3, #8]
 8005e2e:	4621      	mov	r1, r4
 8005e30:	4650      	mov	r0, sl
 8005e32:	f7ff fdb9 	bl	80059a8 <_free_r>
 8005e36:	e76c      	b.n	8005d12 <_realloc_r+0x186>
 8005e38:	68a3      	ldr	r3, [r4, #8]
 8005e3a:	6083      	str	r3, [r0, #8]
 8005e3c:	68e3      	ldr	r3, [r4, #12]
 8005e3e:	60c3      	str	r3, [r0, #12]
 8005e40:	2a24      	cmp	r2, #36	; 0x24
 8005e42:	bf01      	itttt	eq
 8005e44:	6923      	ldreq	r3, [r4, #16]
 8005e46:	6103      	streq	r3, [r0, #16]
 8005e48:	6961      	ldreq	r1, [r4, #20]
 8005e4a:	6141      	streq	r1, [r0, #20]
 8005e4c:	bf19      	ittee	ne
 8005e4e:	f100 0310 	addne.w	r3, r0, #16
 8005e52:	f104 0210 	addne.w	r2, r4, #16
 8005e56:	f100 0318 	addeq.w	r3, r0, #24
 8005e5a:	f104 0218 	addeq.w	r2, r4, #24
 8005e5e:	e7e0      	b.n	8005e22 <_realloc_r+0x296>
 8005e60:	4603      	mov	r3, r0
 8005e62:	4622      	mov	r2, r4
 8005e64:	e7dd      	b.n	8005e22 <_realloc_r+0x296>
 8005e66:	4621      	mov	r1, r4
 8005e68:	f7ff fe6e 	bl	8005b48 <memmove>
 8005e6c:	e7df      	b.n	8005e2e <_realloc_r+0x2a2>
 8005e6e:	4637      	mov	r7, r6
 8005e70:	e6ed      	b.n	8005c4e <_realloc_r+0xc2>
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	431f      	orrs	r7, r3
 8005e78:	f8c9 7004 	str.w	r7, [r9, #4]
 8005e7c:	6853      	ldr	r3, [r2, #4]
 8005e7e:	f043 0301 	orr.w	r3, r3, #1
 8005e82:	6053      	str	r3, [r2, #4]
 8005e84:	e6ff      	b.n	8005c86 <_realloc_r+0xfa>
 8005e86:	bf00      	nop
 8005e88:	200000f8 	.word	0x200000f8

08005e8c <__ascii_wctomb>:
 8005e8c:	b149      	cbz	r1, 8005ea2 <__ascii_wctomb+0x16>
 8005e8e:	2aff      	cmp	r2, #255	; 0xff
 8005e90:	bf85      	ittet	hi
 8005e92:	238a      	movhi	r3, #138	; 0x8a
 8005e94:	6003      	strhi	r3, [r0, #0]
 8005e96:	700a      	strbls	r2, [r1, #0]
 8005e98:	f04f 30ff 	movhi.w	r0, #4294967295
 8005e9c:	bf98      	it	ls
 8005e9e:	2001      	movls	r0, #1
 8005ea0:	4770      	bx	lr
 8005ea2:	4608      	mov	r0, r1
 8005ea4:	4770      	bx	lr
	...

08005ea8 <_sbrk>:
 8005ea8:	4b04      	ldr	r3, [pc, #16]	; (8005ebc <_sbrk+0x14>)
 8005eaa:	6819      	ldr	r1, [r3, #0]
 8005eac:	4602      	mov	r2, r0
 8005eae:	b909      	cbnz	r1, 8005eb4 <_sbrk+0xc>
 8005eb0:	4903      	ldr	r1, [pc, #12]	; (8005ec0 <_sbrk+0x18>)
 8005eb2:	6019      	str	r1, [r3, #0]
 8005eb4:	6818      	ldr	r0, [r3, #0]
 8005eb6:	4402      	add	r2, r0
 8005eb8:	601a      	str	r2, [r3, #0]
 8005eba:	4770      	bx	lr
 8005ebc:	200006c4 	.word	0x200006c4
 8005ec0:	20000880 	.word	0x20000880

08005ec4 <_init>:
 8005ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ec6:	bf00      	nop
 8005ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eca:	bc08      	pop	{r3}
 8005ecc:	469e      	mov	lr, r3
 8005ece:	4770      	bx	lr

08005ed0 <_fini>:
 8005ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed2:	bf00      	nop
 8005ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ed6:	bc08      	pop	{r3}
 8005ed8:	469e      	mov	lr, r3
 8005eda:	4770      	bx	lr
